<?xml version="1.0" encoding="UTF-8"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" dir="decl_simple" filename="decl_simple_cpp">

<unit>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>std</name>::<name>s</name></name>&amp;</type> <name>a</name></decl>;</decl_stmt>
</unit>

<unit>
<decl_stmt><decl><type><name><name>A</name>::<name>b</name>&amp;::<name>d</name></name></type> <name>c</name></decl>;</decl_stmt>
</unit>

<unit>
<decl_stmt><decl><type><name><name>A</name>::<name>b</name>*::<name>d</name></name></type> <name>c</name></decl>;</decl_stmt>
</unit>

<unit>
<decl_stmt><decl><type><name><name>A</name>::<name>b</name>::*<name>d</name></name></type> <name>c</name></decl>;</decl_stmt>
</unit>

<unit>
<decl_stmt><decl><type><name><name>A</name>::<name>b</name>::&amp;<name>d</name></name></type> <name>c</name></decl>;</decl_stmt>
</unit>

<unit>
<decl_stmt><decl><type><name><name>A</name>::<name>b</name>&amp;*::<name>d</name></name></type> <name>c</name></decl>;</decl_stmt>
</unit>

<unit>
<decl_stmt><decl><type><name><name>A</name>::<name>b</name>*&amp;::<name>d</name></name></type> <name>c</name></decl>;</decl_stmt>
</unit>

<unit>
<decl_stmt><decl><type><name><name>A</name>::<name>b</name>::*&amp;<name>d</name></name></type> <name>c</name></decl>;</decl_stmt>
</unit>

<unit>
<decl_stmt><decl><type><name><name>A</name>::<name>b</name>::&amp;*<name>d</name></name></type> <name>c</name></decl>;</decl_stmt>
</unit>

<unit>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c</name></decl>;</decl_stmt>
</unit>

<unit>
<decl_stmt><decl><type><name>int</name> <specifier>const</specifier></type> <name>c</name></decl>;</decl_stmt>
</unit>

<unit>
<decl_stmt><decl><type><name>int</name> <specifier>const</specifier> *</type> <name>c</name></decl>;</decl_stmt>
</unit>

<unit>
<decl_stmt><decl><type><name>int</name> <specifier>const</specifier> * <specifier>const</specifier></type> <name>c</name></decl>;</decl_stmt>
</unit>

<unit>
<decl_stmt><decl><type><name>native</name></type> <name>n</name></decl>;</decl_stmt>
</unit>

<unit>
<decl_stmt><decl><type><name>strictfp</name></type> <name>s</name></decl>;</decl_stmt>
</unit>

<unit>
<decl_stmt><decl><type><name>transient</name></type> <name>s</name></decl>;</decl_stmt>
</unit>

<unit>
<decl_stmt><decl><type><specifier>volatile</specifier> <name>var</name></type> <name>signal</name></decl>;</decl_stmt>
</unit>

<unit>
<decl_stmt><decl><type><name>final</name></type> <name>signal</name></decl>;</decl_stmt>
</unit>

<unit>
<decl_stmt><decl><type><name>override</name></type> <name>signal</name></decl>;</decl_stmt>
</unit>

<unit>
<decl_stmt><decl><type><name>signal</name></type> <name>override</name></decl>;</decl_stmt>
</unit>

<unit>
<decl_stmt><decl><type><name>final</name></type> <name>signal</name></decl>;</decl_stmt>
</unit>

<unit>
<decl_stmt><decl><type><name>signal</name></type> <name>final</name></decl>;</decl_stmt>
</unit>

<unit>
<decl_stmt><decl><type><specifier>thread_local</specifier> <name>unsigned</name> <name>int</name></type> <name>rage</name> <init>=<expr>0</expr></init></decl>;</decl_stmt>
</unit>

<unit>
<decl_stmt><decl><type><name>A</name></type> <name>a</name><argument_list>{}</argument_list></decl>;</decl_stmt>
</unit>

<unit>
<decl_stmt><decl><type><name>A</name></type> <name>a</name><argument_list>{<argument><expr>1</expr></argument>, <argument><expr>2</expr></argument>}</argument_list></decl>;</decl_stmt>
</unit>

<unit>
<decl_stmt><decl><type><name>A</name></type> <name>a</name><argument_list>{<argument><expr><block>{<expr>1</expr>}</block></expr></argument>}</argument_list></decl>;</decl_stmt>
</unit>

<unit>
<decl_stmt><decl><type><name>A</name></type> <name>a</name><argument_list>{<argument><expr>1</expr></argument>, <argument><expr><block>{<expr><name>a</name></expr>}</block></expr></argument>}</argument_list></decl>;</decl_stmt>
</unit>

<unit>
<decl_stmt><decl><type><specifier>const</specifier> <name>A</name></type> <name>a</name><argument_list>(<argument><expr><call><name>b</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
</unit>

<unit>
<decl_stmt><decl><type><name>foo</name> <name>A</name></type> <name>a</name><argument_list>(<argument><expr><call><name>b</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
</unit>


<unit>
<decl_stmt><decl><type><name>foo</name> <name>foo</name> <name>A</name></type> <name>a</name><argument_list>(<argument><expr><call><name>b</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
</unit>

<unit>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>a</name> <range>: <expr>3</expr></range></decl>;</decl_stmt>
</unit>

<unit>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>a</name> <range>: <expr>3</expr></range></decl>, <decl><type ref="prev"/><name>b</name> <range>: <expr>4</expr></range></decl>, <decl><type ref="prev"/><name>c</name> <range>: <expr>5</expr></range></decl>;</decl_stmt>
</unit>

<unit>
<decl_stmt><decl><type><alignas>alignas<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></alignas> <name>unsigned</name> <name>char</name></type> <name><name>c</name><index>[]</index></name></decl>;</decl_stmt>
</unit>

<unit>
<decl_stmt><decl><type><alignas>alignas<argument_list>(<argument><expr>(<name>float</name>)</expr></argument>)</argument_list></alignas> <name>unsigned</name> <name>char</name></type> <name><name>c</name><index>[]</index></name></decl>;</decl_stmt>
</unit>

<unit>
<decl_stmt><decl><type><specifier>__block</specifier> <name>a</name></type> <name>b</name></decl>;</decl_stmt>
</unit>

<unit>
<decl_stmt><decl><type><name>a</name> <specifier>__block</specifier></type> <name>b</name></decl>;</decl_stmt>
</unit>

<unit>
<decl_stmt><decl><type><specifier>__weak</specifier> <name>a</name></type> <name>b</name></decl>;</decl_stmt>
</unit>

<unit>
<decl_stmt><decl><type><name>a</name> <specifier>__weak</specifier></type> <name>b</name></decl>;</decl_stmt>
</unit>

<unit>
<decl_stmt><decl><type><specifier>__strong</specifier> <name>a</name></type> <name>b</name></decl>;</decl_stmt>
</unit>

<unit>
<decl_stmt><decl><type><name>a</name> <specifier>__strong</specifier></type> <name>b</name></decl>;</decl_stmt>
</unit>

<!-- Incorrect with C/C++ mode
<unit>
<decl_stmt><decl><type><name>restrict</name></type> <name>restrict</name></decl>;</decl_stmt>
</unit>
-->

<unit>
<decl_stmt><decl><type><name>int</name></type> <name>a</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></decl>, <decl><type ref="prev"/><name>b</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></decl>;</decl_stmt>
</unit>

<unit>
<decl_stmt><decl><type><name>int</name></type> <name>a</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></decl>, <decl><type ref="prev"/><name>b</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></decl>, <decl><type ref="prev"/><name>c</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></decl>;</decl_stmt>
</unit>

<unit>
<decl_stmt><decl><type><name>int</name></type> <name>a</name> <range>: <expr>0</expr></range></decl>;</decl_stmt>
</unit>

<unit>
<decl_stmt><decl><type>class <name>a</name></type> <name>b</name></decl>;</decl_stmt>
</unit>

<unit>
<decl_stmt><decl><type>struct <name>a</name></type> <name>b</name></decl>;</decl_stmt>
</unit>

<unit>
<decl_stmt><decl><type>union <name>a</name></type> <name>b</name></decl>;</decl_stmt>
</unit>

<unit>
<decl_stmt><decl><type>enum <name>a</name></type> <name>b</name></decl>;</decl_stmt>
</unit>

<unit>
<decl_stmt><decl><type><specifier>register</specifier> <name>a</name></type> <name>b</name></decl>;</decl_stmt>
</unit>

</unit>
