<?xml version="1.0" encoding="UTF-8"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" dir="ternary" filename="ternary">

<unit>
<expr_stmt><expr><ternary><condition><expr><name>a</name></expr> ?</condition><then> <expr><name>b</name></expr> </then><else>: <expr><name>c</name></expr></else></ternary></expr>;</expr_stmt>
</unit>

<unit>
<expr_stmt><expr>(<ternary><condition><expr><name>a</name></expr> ?</condition><then> <expr><name>b</name></expr> </then><else>: <expr><name>c</name></expr></else></ternary>)</expr>;</expr_stmt>
</unit>

<unit>
<expr_stmt><expr><ternary><condition><expr>(<ternary><condition><expr><name>a</name></expr> ?</condition><then> <expr><name>b</name></expr> </then><else>: <expr><name>c</name></expr></else></ternary>)</expr> ?</condition><then> <expr><name>b</name></expr> </then><else>: <expr><name>c</name></expr></else></ternary></expr>;</expr_stmt>
</unit>

<unit>
<expr_stmt><expr><ternary><condition><expr><name>a</name></expr> ?</condition><then> <expr><ternary><condition><expr><name>a</name></expr> ?</condition><then> <expr><name>b</name></expr> </then><else>: <expr><name>c</name></expr></else></ternary></expr> </then><else>: <expr><name>c</name></expr></else></ternary></expr>;</expr_stmt>
</unit>


<unit>
<expr_stmt><expr><ternary><condition><expr><name>a</name></expr> ?</condition><then> <expr><name>b</name></expr> </then><else>: <expr><ternary><condition><expr><name>a</name></expr> ?</condition><then> <expr><name>b</name></expr> </then><else>: <expr><name>c</name></expr></else></ternary></expr></else></ternary></expr>;</expr_stmt>
</unit>

<unit>
<expr_stmt><expr><ternary><condition><expr>(<ternary><condition><expr><name>a</name></expr> ?</condition><then> <expr><name>b</name></expr> </then><else>: <expr><name>c</name></expr></else></ternary>)</expr> ?</condition><then> <expr><ternary><condition><expr><name>a</name></expr> ?</condition><then> <expr><name>b</name></expr> </then><else>: <expr><name>c</name></expr></else></ternary></expr> </then><else>: <expr><ternary><condition><expr><name>a</name></expr> ?</condition><then> <expr><name>b</name></expr> </then><else>: <expr><name>c</name></expr></else></ternary></expr></else></ternary></expr>;</expr_stmt>
</unit>

<unit>
<decl_stmt><decl><type><name>bool</name></type> <name>is_true</name> <init>= <expr><ternary><condition><expr><name>a</name></expr> ?</condition><then> <expr><name>b</name></expr> </then><else>: <expr><name>c</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
</unit>

<unit>
<decl_stmt><decl><type><name>bool</name></type> <name>is_true</name> <init>= <expr>(<ternary><condition><expr><name>a</name></expr> ?</condition><then> <expr><name>b</name></expr> </then><else>: <expr><name>c</name></expr></else></ternary>)</expr></init></decl>;</decl_stmt>
</unit>

<unit>
<decl_stmt><decl><type><name>bool</name></type> <name>is_true</name> <init>= <expr><ternary><condition><expr>(<ternary><condition><expr><name>a</name></expr> ?</condition><then> <expr><name>b</name></expr> </then><else>: <expr><name>c</name></expr></else></ternary>)</expr> ?</condition><then> <expr><name>b</name></expr> </then><else>: <expr><name>c</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
</unit>

<unit>
<decl_stmt><decl><type><name>bool</name></type> <name>is_true</name> <init>= <expr><ternary><condition><expr><name>a</name></expr> ?</condition><then> <expr><ternary><condition><expr><name>a</name></expr> ?</condition><then> <expr><name>b</name></expr> </then><else>: <expr><name>c</name></expr></else></ternary></expr> </then><else>: <expr><name>c</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
</unit>

<unit>
<decl_stmt><decl><type><name>bool</name></type> <name>is_true</name> <init>= <expr><ternary><condition><expr><name>a</name></expr> ?</condition><then> <expr><name>b</name></expr> </then><else>: <expr><ternary><condition><expr><name>a</name></expr> ?</condition><then> <expr><name>b</name></expr> </then><else>: <expr><name>c</name></expr></else></ternary></expr></else></ternary></expr></init></decl>;</decl_stmt>
</unit>

<unit>
<decl_stmt><decl><type><name>bool</name></type> <name>is_true</name> <init>= <expr><ternary><condition><expr>(<ternary><condition><expr><name>a</name></expr> ?</condition><then> <expr><name>b</name></expr> </then><else>: <expr><name>c</name></expr></else></ternary>)</expr> ?</condition><then> <expr><ternary><condition><expr><name>a</name></expr> ?</condition><then> <expr><name>b</name></expr> </then><else>: <expr><name>c</name></expr></else></ternary></expr> </then><else>: <expr><ternary><condition><expr><name>a</name></expr> ?</condition><then> <expr><name>b</name></expr> </then><else>: <expr><name>c</name></expr></else></ternary></expr></else></ternary></expr></init></decl>;</decl_stmt>
</unit>

</unit>
