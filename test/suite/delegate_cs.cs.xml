<?xml version="1.0" encoding="UTF-8"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C#" dir="delegate" filename="delegate_cs">

<unit>
<expr_stmt><expr><name><name>button1</name><operator>.</operator><name>Click</name></name> <operator>+=</operator> <lambda><name>delegate</name><parameter_list>(<param><decl><type><name><name>System</name><operator>.</operator><name>Object</name></name></type> <name>o</name></decl></param>, <param><decl><type><name><name>System</name><operator>.</operator><name>EventArgs</name></name></type> <name>e</name></decl></param>)</parameter_list>
                   <block>{ <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>Windows</name><operator>.</operator><name>Forms</name><operator>.</operator><name>MessageBox</name><operator>.</operator><name>Show</name></name><argument_list>(<argument><expr><literal type="string">"Click!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></lambda></expr>;</expr_stmt>
</unit>

<unit>
<function_decl><type><specifier>delegate</specifier> <name>void</name></type> <name>f</name><parameter_list>()</parameter_list>;</function_decl>
</unit>

<unit>
<function_decl><type><specifier>public</specifier> <specifier>delegate</specifier> <name>void</name></type> <name>f</name><parameter_list>()</parameter_list>;</function_decl>
</unit>

<unit>
<decl_stmt><decl><type><name>Del</name></type> <name>d</name> <init>= <expr><lambda><name>delegate</name><parameter_list>(<param><decl><type><name>int</name></type> <name>k</name></decl></param>)</parameter_list> <block>{ <comment type="block">/* ... */</comment> }</block></lambda></expr></init></decl>;</decl_stmt>
</unit>

<unit>
<function><type><name>void</name></type> <name>StartThread</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name><name>System</name><operator>.</operator><name>Threading</name><operator>.</operator><name>Thread</name></name></type> <name>t1</name> <init>= <expr><operator>new</operator> <call><name><name>System</name><operator>.</operator><name>Threading</name><operator>.</operator><name>Thread</name></name>
      <argument_list>(<argument><expr><lambda><name>delegate</name><parameter_list>()</parameter_list>
            <block>{
                <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>Console</name><operator>.</operator><name>Write</name></name><argument_list>(<argument><expr><literal type="string">"Hello,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>Console</name><operator>.</operator><name>WriteLine</name></name><argument_list>(<argument><expr><literal type="string">"World!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>t1</name><operator>.</operator><name>Start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>
</unit>

<unit>
<expr_stmt><expr><call><name>BeginInvoke</name><argument_list>(<argument><expr><lambda><name>delegate</name><parameter_list>()</parameter_list> <block>{ }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</unit>

<unit>
<expr_stmt><expr><call><name>BeginInvoke</name><argument_list>(<argument><expr><lambda><name>delegate</name><parameter_list>()</parameter_list> <block>{
                <if>if<condition>(<expr><literal type="number">1</literal></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><name>a</name></expr>;</expr_stmt></block></then></if>
 }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</unit>

<unit>
<expr_stmt><expr><call><name>BeginInvoke</name><argument_list>(<argument><expr><lambda><name>delegate</name><parameter_list>()</parameter_list> <block>{
                <while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition>
                    <block type="pseudo"><expr_stmt><expr><name>a</name></expr>;</expr_stmt></block></while>
 }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</unit>

<unit>
<expr_stmt><expr><call><name>BeginInvoke</name><argument_list>(<argument><expr><lambda><name>delegate</name><parameter_list>()</parameter_list> <block>{
                <for>for<control>(<init>;</init><condition><expr><literal type="number">1</literal></expr>;</condition><incr/>)</control>
                    <block type="pseudo"><expr_stmt><expr><name>a</name></expr>;</expr_stmt></block></for>
 }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</unit>

<unit>
<lambda><name>delegate</name> <block>{ <return>return <expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">1</literal></expr>;</return> }</block></lambda>
</unit>

</unit>
