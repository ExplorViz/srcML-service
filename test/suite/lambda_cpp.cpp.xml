<?xml version="1.0" encoding="UTF-8"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" dir="lambda" filename="lambda_cpp" options="TERNARY">

<unit>
<expr_stmt><expr><lambda><capture>[]</capture><parameter_list>(<param><decl><type><name>int</name></type> <name>i</name></decl></param>)</parameter_list> <block>{<return>return <expr><name>i</name> + 1</expr>;</return>}</block></lambda></expr>;</expr_stmt>
</unit>

<unit>
<expr_stmt><expr><call><lambda><capture>[]</capture><parameter_list>(<param><decl><type><name>int</name></type> <name>i</name></decl></param>)</parameter_list> <block>{<return>return <expr><name>i</name> + 1</expr>;</return>}</block></lambda><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>call</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</unit>

<unit>
<decl_stmt><decl><type><name>auto</name></type> <name>f</name> <init>= <expr><lambda><capture>[]</capture><parameter_list>(<param><decl><type><name>int</name></type> <name>i</name></decl></param>)</parameter_list> <block>{<return>return <expr><name>i</name> + 1</expr>;</return>}</block></lambda></expr></init></decl>;</decl_stmt>
</unit>

<unit>
<decl_stmt><decl><type><name>auto</name></type> <name>ret</name> <init>= <expr><call><lambda><capture>[]</capture><parameter_list>(<param><decl><type><name>int</name></type> <name>i</name></decl></param>)</parameter_list> <block>{<return>return <expr><name>i</name> + 1</expr>;</return>}</block></lambda><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
</unit>

<unit>
<expr_stmt><expr><lambda><capture>[]</capture><parameter_list>(<param><decl><type><name>int</name></type> <name>i</name></decl></param>)</parameter_list> -&gt; <type><name>int</name></type> <block>{ <return>return <expr><name>i</name> + 1</expr>;</return>}</block></lambda></expr>;</expr_stmt>
</unit>

<unit>
<expr_stmt><expr><lambda><capture>[]</capture><parameter_list>(<param><decl><type><name>int</name></type> <name>i</name></decl></param>)</parameter_list> <specifier>mutable</specifier> <block>{ <return>return <expr><name>i</name> + 1</expr>;</return>}</block></lambda></expr>;</expr_stmt>
</unit>

<unit>
<expr_stmt><expr><lambda><capture>[]</capture><parameter_list>(<param><decl><type><name>int</name></type> <name>i</name></decl></param>)</parameter_list> <noexcept>noexcept<argument_list>()</argument_list></noexcept> <block>{ <return>return <expr><name>i</name> + 1</expr>;</return>}</block></lambda></expr>;</expr_stmt>
</unit>

<unit>
<expr_stmt><expr><lambda><capture>[]</capture><parameter_list>(<param><decl><type><name>int</name></type> <name>i</name></decl></param>)</parameter_list> <attribute>[[]]</attribute> <block>{ <return>return <expr><name>i</name> + 1</expr>;</return>}</block></lambda></expr>;</expr_stmt>
</unit>

<unit>
<expr_stmt><expr><lambda><capture>[]</capture><parameter_list>(<param><decl><type><name>int</name></type> <name>i</name></decl></param>)</parameter_list> <specifier>mutable</specifier> <noexcept>noexcept<argument_list>()</argument_list></noexcept> <attribute>[[]]</attribute> -&gt; <type><name>int</name></type> <block>{ <return>return <expr><name>i</name> + 1</expr>;</return>}</block></lambda></expr>;</expr_stmt>
</unit>

<unit>
<expr_stmt><expr><lambda><capture>[]</capture> <block>{ <return>return <expr>1</expr>;</return>}</block></lambda></expr>;</expr_stmt>
</unit>

<unit>
<expr_stmt><expr><call><name>a</name><argument_list>(<argument><expr><lambda><capture>[]</capture><parameter_list>(<param><decl><type><name>int</name></type> <name>i</name></decl></param>)</parameter_list> <block>{ <return>return <expr><name>i</name> + 1</expr>;</return>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</unit>

<unit>
<expr_stmt><expr><call><name>a</name><argument_list>(<argument><expr><call><lambda><capture>[]</capture><parameter_list>(<param><decl><type><name>int</name></type> <name>i</name></decl></param>)</parameter_list> <block>{ <return>return <expr><name>i</name> + 1</expr>;</return>}</block></lambda><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</unit>

<unit>
<expr_stmt><expr><lambda><capture>[<argument><name>a</name></argument>]</capture><parameter_list>(<param><decl><type><name>int</name></type> <name>i</name></decl></param>)</parameter_list> <block>{ <return>return <expr><name>i</name> + 1</expr>;</return>}</block></lambda></expr>;</expr_stmt>
</unit>

<unit>
<expr_stmt><expr><lambda><capture>[<argument>&amp;<name>a</name></argument>]</capture><parameter_list>(<param><decl><type><name>int</name></type> <name>i</name></decl></param>)</parameter_list> <block>{ <return>return <expr><name>i</name> + 1</expr>;</return>}</block></lambda></expr>;</expr_stmt>
</unit>

<unit>
<expr_stmt><expr><lambda><capture>[<argument><name>a</name></argument>, <argument>&amp;<name>b</name></argument>]</capture><parameter_list>(<param><decl><type><name>int</name></type> <name>i</name></decl></param>)</parameter_list> <block>{ <return>return <expr><name>i</name> + 1</expr>;</return>}</block></lambda></expr>;</expr_stmt>
</unit>

<unit>
<expr_stmt><expr><lambda><capture>[<argument><name>a</name></argument>, <argument><name>b</name></argument>, <argument><name>c</name></argument>]</capture><parameter_list>(<param><decl><type><name>int</name></type> <name>i</name></decl></param>)</parameter_list> <block>{ <return>return <expr><name>i</name> + 1</expr>;</return>}</block></lambda></expr>;</expr_stmt>
</unit>

<unit>
<expr_stmt><expr><lambda><capture>[<argument>&amp;</argument>]</capture><parameter_list>(<param><decl><type><name>int</name></type> <name>i</name></decl></param>)</parameter_list> <block>{ <return>return <expr><name>i</name> + 1</expr>;</return>}</block></lambda></expr>;</expr_stmt>
</unit>

<unit>
<expr_stmt><expr><lambda><capture>[<argument>=</argument>]</capture><parameter_list>(<param><decl><type><name>int</name></type> <name>i</name></decl></param>)</parameter_list> <block>{ <return>return <expr><name>i</name> + 1</expr>;</return>}</block></lambda></expr>;</expr_stmt>
</unit>

<unit>
<decl_stmt><decl><type><name>auto</name></type> <name>lambda</name> <init>= <expr><lambda><capture>[<argument><name>value</name> = 1</argument>]</capture> <block>{<return>return <expr><name>value</name></expr>;</return>}</block></lambda></expr></init></decl>;</decl_stmt>
</unit>

<unit>
<decl_stmt><decl><type><name>auto</name></type> <name>lambda</name> <init>= <expr><lambda><capture>[<argument><name>ptr</name> = <call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></argument>]</capture> <block>{<return>return <expr>*<name>ptr</name></expr>;</return>}</block></lambda></expr></init></decl>;</decl_stmt>
</unit>

<unit>
<decl_stmt><decl><type><name>auto</name></type> <name>lambda</name> <init>= <expr><lambda><capture>[<argument><name>a</name> = <name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></argument>]</capture> <block>{ <return>return <expr><name>a</name></expr>;</return> }</block></lambda></expr></init></decl>;</decl_stmt>
</unit>

<unit>
<expr_stmt><expr><ternary><condition><expr><lambda><capture>[]</capture><block>{ <return>return <expr>1</expr>;</return> }</block></lambda></expr> ?</condition><then> <expr><lambda><capture>[]</capture><block>{ <return>return <expr>1</expr>;</return> }</block></lambda></expr> </then><else>: <expr><lambda><capture>[]</capture><block>{ <return>return <expr>1</expr>;</return> }</block></lambda></expr></else></ternary></expr>;</expr_stmt>
</unit>

<unit>
<expr_stmt><expr><ternary><condition><expr><lambda><capture>[]</capture><parameter_list>()</parameter_list><block>{ <return>return <expr>1</expr>;</return> }</block></lambda></expr> ?</condition><then> <expr><lambda><capture>[]</capture><parameter_list>()</parameter_list><block>{ <return>return <expr>1</expr>;</return> }</block></lambda></expr> </then><else>: <expr><lambda><capture>[]</capture><parameter_list>()</parameter_list><block>{ <return>return <expr>1</expr>;</return> }</block></lambda></expr></else></ternary></expr>;</expr_stmt>
</unit>

<unit>
<expr_stmt><expr><ternary><condition><expr><lambda><capture>[]</capture><parameter_list>()</parameter_list><block>{ <return>return <expr><ternary><condition><expr><name>a</name></expr> ?</condition><then> <expr><name>b</name></expr> </then><else>: <expr><name>c</name></expr></else></ternary></expr>;</return> }</block></lambda></expr> ?</condition><then> <expr><lambda><capture>[]</capture><parameter_list>()</parameter_list><block>{ <return>return <expr><ternary><condition><expr><name>a</name></expr> ?</condition><then> <expr><name>b</name></expr> </then><else>: <expr><name>c</name></expr></else></ternary></expr>;</return> }</block></lambda></expr> </then><else>: <expr><lambda><capture>[]</capture><parameter_list>()</parameter_list><block>{ <return>return <expr><ternary><condition><expr><name>a</name></expr> ?</condition><then> <expr><name>b</name></expr> </then><else>: <expr><name>c</name></expr></else></ternary></expr>;</return> }</block></lambda></expr></else></ternary></expr>;</expr_stmt>
</unit>

</unit>
