<?xml version="1.0" encoding="UTF-8"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" dir="constructor" options="WRAP_TEMPLATE">

<unit>
<class>class <name>A</name> <block>{<private type="default"> <constructor_decl><specifier>virtual</specifier> <name>A</name><parameter_list>()</parameter_list> = 0;</constructor_decl> </private>}</block>;</class>
</unit>

<unit>
<class>class <name>NonCopyable</name> <block>{<private type="default"> <constructor_decl><name>NonCopyable</name><parameter_list>()</parameter_list> = <specifier>default</specifier>;</constructor_decl> </private>}</block>;</class>
</unit>

<unit>
<class>class <name>NonCopyable</name> <block>{<private type="default"> <constructor_decl><name>NonCopyable</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>NonCopyable</name>&amp;</type></decl></param>)</parameter_list> = <specifier>delete</specifier>;</constructor_decl> </private>}</block>;</class>
</unit>

<unit>
<constructor><name><name>A</name>::<name>A</name></name><parameter_list>()</parameter_list> <member_list>: <call><name>a</name><argument_list>(<argument><expr><block>{<expr><name>a</name></expr>}</block></expr></argument>)</argument_list></call> </member_list><block>{}</block></constructor>
</unit>

<unit>
<constructor><name><name>A</name>::<name>A</name></name><parameter_list>()</parameter_list> <member_list>: <call><name>a</name><argument_list>{}</argument_list></call></member_list> <block>{}</block></constructor>
</unit>

<unit>
<constructor><name><name>A</name>::<name>A</name></name><parameter_list>()</parameter_list> <member_list>: <call><name>a</name><argument_list>{<argument><expr><name>a</name></expr></argument>, <argument><expr>1</expr></argument>}</argument_list></call></member_list> <block>{}</block></constructor>
</unit>

<unit>
<constructor><name><name>A</name>::<name>A</name></name><parameter_list>()</parameter_list> <member_list>: <call><name>a</name><argument_list>{<argument><expr><block>{<expr><name>a</name></expr>}</block></expr></argument>}</argument_list></call></member_list> <block>{}</block></constructor>
</unit>

<unit>
<constructor><name><name>A</name>::<name>A</name></name><parameter_list>()</parameter_list> <member_list>: <call><name>a</name><argument_list>{<argument><expr><block>{<expr><name>a</name></expr>, <expr><block>{<expr>1</expr>}</block></expr>}</block></expr></argument>}</argument_list></call></member_list> <block>{}</block></constructor>
</unit>

<unit>
<macro><name>MACRO</name></macro> <constructor><name><name>A</name>::<name>A</name></name><parameter_list>()</parameter_list> <member_list>: <call><name>a</name><argument_list>()</argument_list></call> </member_list><block>{}</block></constructor>
</unit>

<unit>
<template>template <parameter_list>&lt;<param><type><name>T</name></type></param>&gt;</parameter_list> <constructor><name><name><name>K</name><argument_list>&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name>::<name>K</name></name><parameter_list>()</parameter_list> <block>{}</block></constructor></template>
</unit>

<unit>
<template>template <parameter_list>&lt;<param><type><name>T</name></type></param>&gt;</parameter_list> <constructor><name><name><name>K</name><argument_list>&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name>::<name>K</name></name><parameter_list>()</parameter_list> <block>{}</block></constructor></template>
</unit>

</unit>
