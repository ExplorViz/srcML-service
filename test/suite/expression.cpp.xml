<?xml version="1.0" encoding="UTF-8"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" dir="expression">

<unit>
<expr_stmt><expr><name>a</name></expr>;</expr_stmt>
</unit>

<unit>
<expr_stmt><expr>(<name>a</name>)</expr>;</expr_stmt>
</unit>

<unit>
<empty_stmt>;</empty_stmt>
</unit>

<unit>
<expr_stmt><expr>1</expr>;</expr_stmt>
</unit>

<unit>
<expr_stmt><expr>1.</expr>;</expr_stmt>
</unit>

<unit>
<expr_stmt><expr>10.</expr>;</expr_stmt>
</unit>

<unit>
<expr_stmt><expr>1.2</expr>;</expr_stmt>
</unit>

<unit>
<expr_stmt><expr>10.20</expr>;</expr_stmt>
</unit>

<unit>
<expr_stmt><expr><name>a</name> + <name>b</name></expr>;</expr_stmt>
</unit>

<unit>
<expr_stmt><expr>*<name>a</name> = <name>b</name></expr>;</expr_stmt>
</unit>

<unit>
<expr_stmt><expr><name>a</name> - <name>b</name></expr>;</expr_stmt>
</unit>

<unit>
<expr_stmt><expr><name>a</name> &lt; <name>b</name></expr>;</expr_stmt>
</unit>

<unit>
<expr_stmt><expr><name>a</name> &gt; <name>b</name></expr>;</expr_stmt>
</unit>

<unit>
<expr_stmt><expr><name>a</name> + <call><name>f</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</unit>

<unit>
<expr_stmt><expr><name>a</name> ? <name>b</name> : <name>c</name></expr>;</expr_stmt>
</unit>

<unit>
<expr_stmt><expr><name>a</name></expr>, <expr><name>b</name></expr>;</expr_stmt>
</unit>

<unit>
<expr_stmt><expr><name><name>a</name><index>[<expr>1 + 1 - 1 * 1 &amp; 1 % 1 ! 1 ~ 1 &lt; 1 &gt; 1 &lt;= 1 &gt;= 1 == 1 != 1 / 1 | 1 || 1 &amp;&amp; 1 ? 1 : 1</expr>]</index></name></expr>;</expr_stmt>
</unit>

<unit>
<expr_stmt><expr><call><name>b</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</unit>

<unit>
<expr_stmt><expr><name><name>a</name><index>[<expr><call><name>b</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
</unit>

<unit>
<expr_stmt><expr><name>tmp</name> &amp;= <name>f</name></expr>;</expr_stmt>
</unit>

<unit>
<expr_stmt><expr><name>tmp</name> *= <name>f</name></expr>;</expr_stmt>
</unit>

<unit>
<expr_stmt><expr><name><name>base</name>.<name>a</name></name></expr>;</expr_stmt>
</unit>

<unit>
<expr_stmt><expr><name><name>this</name>.<name>a</name></name></expr>;</expr_stmt>
</unit>

<unit>
<expr_stmt><expr><name>num</name> = <name>value</name></expr>;</expr_stmt>
</unit>

<unit>
<expr_stmt><expr><name>L</name> + <name>U</name> + <name>u</name> + <name>R</name>
  + <name>u8</name> + <name>LR</name> + <name>UR</name> + <name>uR</name> + <name>u8R</name>
  + <name>LRFoo</name> + <name>URFoo</name> + <name>uRFoo</name> + <name>u8RFoo</name> + <name>RFoo</name></expr>;</expr_stmt>
</unit>

<unit>
  <expr_stmt><expr><noexcept>noexcept</noexcept></expr>;</expr_stmt>
</unit>

<unit>
  <expr_stmt><expr><noexcept>noexcept(<argument><expr><name>A</name></expr></argument>)</noexcept></expr>;</expr_stmt>
</unit>

</unit>
