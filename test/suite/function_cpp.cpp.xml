<?xml version="1.0" encoding="UTF-8"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" dir="function" filename="function_cpp">

<unit>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>f</name><parameter_list>()</parameter_list> <block>{}</block></function>
</unit>

<unit>
<function><type><name>void</name></type> <name>foo</name><parameter_list>(<param><function_decl><type><name>int</name></type> (*<name>a</name>)<parameter_list>(<param><decl><type><name>char</name></type> <name>i</name></decl></param>)</parameter_list></function_decl></param>, <param><decl><type><name>char</name></type> <name>b</name></decl></param>)</parameter_list>
<block>{
}</block></function> 
</unit>

<unit>
<function><type><name>int</name></type> <name>main</name><parameter_list>(<param><decl><type><name>int</name></type> <name>argc</name></decl></param>, <param><decl><type><name><name>int</name>*<index>[]</index></name></type> <name>argv</name></decl></param>)</parameter_list>
<block>{}</block></function>
</unit>

<unit>
<function><type><specifier>virtual</specifier> <name>int</name>*</type> <name>f</name><parameter_list>(<param><decl><type><name>int</name></type> <name>a</name></decl></param>)</parameter_list> <block>{}</block></function>
</unit>

<unit>
<function><type><name>int</name> *</type> <name>f</name><parameter_list>()</parameter_list> <block>{}</block></function>
</unit>

<unit>
<function><type><specifier>const</specifier> <name>int</name>*</type> <name>f</name><parameter_list>()</parameter_list> <block>{}</block></function>
</unit>

<unit>
<function><type><name>int</name>*</type> <name>f</name><parameter_list>(<param><decl><type><name>int</name></type> <name>a</name></decl></param>)</parameter_list> <block>{}</block></function>
</unit>

<unit>
<function><type><specifier>const</specifier> <name>int</name>*</type> <name>f</name><parameter_list>(<param><decl><type><name>int</name></type> <name>a</name></decl></param>)</parameter_list> <block>{}</block></function>
</unit>

<unit>
<function><type><name>void</name></type> <name>f</name><parameter_list>(<param><decl><type><name>int</name>*</type> <name>a</name></decl></param>)</parameter_list><block>{}</block></function>
</unit>


<unit>
<function><type><name>void</name></type> <name>f</name><parameter_list>(<param><decl><type><name>int</name>*</type> <name>a</name></decl></param>)</parameter_list><block>{}</block></function>
</unit>

<unit>
<function><type><specifier>constexpr</specifier> <name>int</name></type> <name>get_five</name><parameter_list>()</parameter_list> <block>{<return>return <expr>5</expr>;</return>}</block></function>
</unit>

<unit>
<function><type><name>int</name></type> <name>get_five</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{<return>return <expr>5</expr>;</return>}</block></function>
</unit>

<unit>
<function><type><name>auto</name></type> <name>func_name</name><parameter_list>(<param><decl><type><name>int</name></type> <name>x</name></decl></param>, <param><decl><type><name>int</name></type> <name>y</name></decl></param>)</parameter_list> -&gt; <type><name>int</name></type> <block>{}</block></function>
</unit>

<unit>
<function><type><name>auto</name></type> <name>func_name</name><parameter_list>(<param><decl><type><name>int</name></type> <name>x</name></decl></param>, <param><decl><type><name>int</name></type> <name>y</name></decl></param>)</parameter_list> -&gt; <type><specifier>const</specifier> <name>int</name></type> <block>{}</block></function>
</unit>

<unit>
<function><type><name>auto</name></type> <name>fpif</name><parameter_list>(<param><decl><type><name>int</name></type></decl></param>)</parameter_list>-&gt;<function_decl><type><name>int</name></type> (*)<parameter_list>(<param><decl><type><name>int</name></type></decl></param>)</parameter_list></function_decl> <block>{}</block></function>
</unit>

<unit>
<function><type><name>void</name></type> <name>bar</name><parameter_list>()</parameter_list> <noexcept>noexcept</noexcept> <block>{}</block></function>
</unit>

<unit>
<function><type><name>void</name></type> <name>bar</name><parameter_list>()</parameter_list> <noexcept>noexcept(<argument><expr>true</expr></argument>)</noexcept> <block>{}</block></function>
</unit>

<unit>
<function><type><name>void</name></type> <name>foo</name><parameter_list>()</parameter_list> <noexcept>noexcept(<noexcept>noexcept(<argument><expr><call><name>T</name><argument_list>()</argument_list></call></expr></argument>)</noexcept>)</noexcept> <block>{}</block></function>
</unit>

<unit>
<function><type><name>void</name></type> <name>bar</name><parameter_list>()</parameter_list> <attribute>[[<expr><name>System</name></expr>]]</attribute> <block>{}</block></function>
</unit>

<unit>
<function><type><name>void</name></type> <name>foo</name><parameter_list>()</parameter_list> &amp; <block>{}</block></function>
</unit>

<unit>
<function><type><name>void</name></type> <name>foo</name><parameter_list>()</parameter_list> &amp;&amp; <block>{}</block></function>
</unit>

<unit>
<function><type><name>void</name></type> <name>foo</name><parameter_list>()</parameter_list> <specifier>const</specifier> &amp; <noexcept>noexcept(<noexcept>noexcept(<argument><expr><call><name>T</name><argument_list>()</argument_list></call></expr></argument>)</noexcept>)</noexcept> <attribute>[[<expr><name>System</name></expr>]]</attribute> -&gt; <function_decl><type><name>int</name></type> (*)<parameter_list>(<param><decl><type><name>int</name></type></decl></param>)</parameter_list></function_decl> <block>{}</block></function>
</unit>

<unit>
<function><type><name>void</name></type> <name>foo</name><parameter_list>()</parameter_list> <specifier>const</specifier> &amp;&amp; <noexcept>noexcept(<noexcept>noexcept(<argument><expr><call><name>T</name><argument_list>()</argument_list></call></expr></argument>)</noexcept>)</noexcept> <attribute>[[<expr><name>System</name></expr>]]</attribute> -&gt; <function_decl><type><name>int</name></type> (*)<parameter_list>(<param><decl><type><name>int</name></type></decl></param>)</parameter_list></function_decl> <block>{}</block></function>
</unit>

<unit>
<template>template <parameter_list>&lt;<param><type>typename</type> <name>F</name></param>&gt;</parameter_list>
<function><type><name>auto</name></type> <name>run</name><parameter_list>(<param><decl><type><name>F</name></type> <name>f</name></decl></param>)</parameter_list> -&gt; <type>typename <name><name>Q</name>::<name><name>Q</name><argument_list>&lt;<argument><expr>!<name><name>Q</name>::<name><name>H</name><argument_list>&lt;<argument><expr><name>Functor</name></expr></argument>&gt;</argument_list></name>::<name>V</name></name></expr></argument>, <argument><expr><name><name>Q</name><argument_list>&lt;<argument><expr><decltype>decltype<argument_list>(<argument><expr><call><name>f</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decltype></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name>::<name>T</name></name></type>
            <block>{}</block></function></template>
</unit>

</unit>
