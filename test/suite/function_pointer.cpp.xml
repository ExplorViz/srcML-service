<?xml version="1.0" encoding="UTF-8"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" dir="function_pointer" filename="function_pointer">

<unit>
<function_decl><type><name>int</name></type> <name>f</name><parameter_list>(<param><function_decl><type><name>double</name></type> (<modifier>*</modifier><name>g</name>)<parameter_list>()</parameter_list></function_decl></param>)</parameter_list>;</function_decl>
</unit>

<unit>
<function_decl><type><name>int</name></type> <name>f</name><parameter_list>(<param><function_decl><type><name>double</name></type> (<modifier>*</modifier><name>g</name>)<parameter_list>(<param><decl><type><name>int</name></type></decl></param>)</parameter_list></function_decl></param>)</parameter_list>;</function_decl>
</unit>

<unit>
<function_decl><type><name>int</name></type> <name>f</name><parameter_list>(<param><function_decl><type><name>double</name></type> (<modifier>*</modifier><name>g</name>)<parameter_list>(<param><decl><type><name>int</name></type> <name>a</name></decl></param>)</parameter_list></function_decl></param>)</parameter_list>;</function_decl>
</unit>

<unit>
<function_decl><type><name>double</name></type> (<modifier>*</modifier><name>g</name>)<parameter_list>(<param><decl><type><name>int</name></type> <name>a</name></decl></param>)</parameter_list>;</function_decl>
</unit>

<unit>
<function_decl><type><name>double</name></type> (<modifier>*</modifier>)<parameter_list>(<param><decl><type><name>int</name></type> <name>a</name></decl></param>)</parameter_list>;</function_decl>
</unit>

<unit>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>a</name>) <parameter_list>(<param><function_decl><type><name>void</name></type> (<name>callback</name>) <parameter_list>(<param><decl><type><name>void</name> <modifier>*</modifier></type> <name>data</name></decl></param>)</parameter_list></function_decl></param>)</parameter_list>;</function_decl>
</unit>

<unit>
<macro><name>A</name><argument_list>(<argument>1</argument>)</argument_list></macro> <function><type><name>void</name></type> <name>f</name><parameter_list>()</parameter_list> <block>{}</block></function>
</unit>

<unit>
<function_decl><type><name>double</name><modifier>*</modifier></type> (<modifier>*</modifier>)<parameter_list>(<param><decl><type><name>int</name></type> <name>a</name></decl></param>)</parameter_list>;</function_decl>
</unit>

<unit>
<function_decl><type><specifier>const</specifier> <name>double</name><modifier>*</modifier></type> (<modifier>*</modifier>)<parameter_list>(<param><decl><type><name>int</name></type> <name>a</name></decl></param>)</parameter_list>;</function_decl>
</unit>

<unit>
<function_decl><type><specifier>const</specifier> <name>double</name><modifier>*</modifier></type> (<modifier>*</modifier><name>f</name>)<parameter_list>(<param><decl><type><name>int</name></type> <name>a</name></decl></param>)</parameter_list>;</function_decl>
</unit>

<unit>
<function_decl><type><name>f</name></type>(<modifier>*</modifier><name>a</name>)<parameter_list>()</parameter_list>;</function_decl>
</unit>

<!--
<unit>
<expr_stmt><expr><call><name>f</name><argument_list>(<argument><expr>*<name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</unit>
-->

<unit>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>pass_state_graph</name> <parameter_list>(<param><decl><type><name>state_t</name></type> <name>start_state</name></decl></param>, <param><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>applied_func</name>) <parameter_list>(<param><decl><type><name>state_t</name></type> <name>state</name></decl></param>)</parameter_list></function_decl></param>)</parameter_list>
<block>{

  <expr_stmt><expr><call>(<modifier>*</modifier><name>applied_func</name>) <argument_list>(<argument><expr><name>start_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

}</block></function>
</unit>

<unit>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>minus</name>)<parameter_list>(<param><decl><type><name>int</name></type></decl></param>, <param><decl><type><name>int</name></type></decl></param>)</parameter_list> <init>= <expr><name>subtract</name></expr></init>;</function_decl>
</unit>

<unit>
<function_decl><type><name>void</name></type> <name>f</name><parameter_list>(<param><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>minus</name>)<parameter_list>(<param><decl><type><name>int</name></type></decl></param>, <param><decl><type><name>int</name></type></decl></param>)</parameter_list> <init>= <expr><name>subtract</name></expr></init></function_decl></param>)</parameter_list>;</function_decl>
</unit>

</unit>
