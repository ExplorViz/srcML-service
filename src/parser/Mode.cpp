/**
 * @file Mode.cpp
 *
 * @copyright Copyright (C) 2014 SDML (www.srcML.org)
 *
 * This file is part of the srcML Toolkit.
 *
 * The srcML Toolkit is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * The srcML Toolkit is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with the srcML Toolkit; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */
 
#include "ModeStack.hpp"

/* Set of mode flags */
const srcMLState::MODE_TYPE ModeStack::MODE_STATEMENT                 ("0000000000000000000000000000000000000000000000000000000000000001");
const srcMLState::MODE_TYPE ModeStack::MODE_LIST                      ("0000000000000000000000000000000000000000000000000000000000000010");
const srcMLState::MODE_TYPE ModeStack::MODE_EXPECT                    ("0000000000000000000000000000000000000000000000000000000000000100");
const srcMLState::MODE_TYPE ModeStack::MODE_DETECT_COLON              ("0000000000000000000000000000000000000000000000000000000000001000");
const srcMLState::MODE_TYPE ModeStack::MODE_TEMPLATE                  ("0000000000000000000000000000000000000000000000000000000000010000");
const srcMLState::MODE_TYPE ModeStack::MODE_ARGUMENT                  ("0000000000000000000000000000000000000000000000000000000000100000");
const srcMLState::MODE_TYPE ModeStack::MODE_NAMESPACE                 ("0000000000000000000000000000000000000000000000000000000001000000");
const srcMLState::MODE_TYPE ModeStack::MODE_PARAMETER                 ("0000000000000000000000000000000000000000000000000000000010000000");
const srcMLState::MODE_TYPE ModeStack::MODE_EXPRESSION                ("0000000000000000000000000000000000000000000000000000000100000000");
const srcMLState::MODE_TYPE ModeStack::MODE_CALL                      ("0000000000000000000000000000000000000000000000000000001000000000");
const srcMLState::MODE_TYPE ModeStack::MODE_CONDITION                 ("0000000000000000000000000000000000000000000000000000010000000000");
const srcMLState::MODE_TYPE ModeStack::MODE_TOP                       ("0000000000000000000000000000000000000000000000000000100000000000");
const srcMLState::MODE_TYPE ModeStack::MODE_BLOCK                     ("0000000000000000000000000000000000000000000000000001000000000000");
const srcMLState::MODE_TYPE ModeStack::MODE_INIT                      ("0000000000000000000000000000000000000000000000000010000000000000");
const srcMLState::MODE_TYPE ModeStack::MODE_FUNCTION_TAIL             ("0000000000000000000000000000000000000000000000000100000000000000");
const srcMLState::MODE_TYPE ModeStack::MODE_PARSE_EOL                 ("0000000000000000000000000000000000000000000000001000000000000000");
const srcMLState::MODE_TYPE ModeStack::MODE_LOCAL                     ("0000000000000000000000000000000000000000000000010000000000000000");
const srcMLState::MODE_TYPE ModeStack::MODE_VARIABLE_NAME             ("0000000000000000000000000000000000000000000000100000000000000000");
const srcMLState::MODE_TYPE ModeStack::MODE_IF                        ("0000000000000000000000000000000000000000000001000000000000000000");
const srcMLState::MODE_TYPE ModeStack::MODE_TOP_SECTION               ("0000000000000000000000000000000000000000000010000000000000000000");
const srcMLState::MODE_TYPE ModeStack::MODE_FOR_GROUP                 ("0000000000000000000000000000000000000000000100000000000000000000");
const srcMLState::MODE_TYPE ModeStack::MODE_FOR_INITIALIZATION        ("0000000000000000000000000000000000000000001000000000000000000000");
const srcMLState::MODE_TYPE ModeStack::MODE_FOR_CONDITION             ("0000000000000000000000000000000000000000010000000000000000000000");
const srcMLState::MODE_TYPE ModeStack::MODE_FOR_INCREMENT             ("0000000000000000000000000000000000000000100000000000000000000000");
const srcMLState::MODE_TYPE ModeStack::MODE_PREPROC                   ("0000000000000000000000000000000000000001000000000000000000000000");
const srcMLState::MODE_TYPE ModeStack::MODE_NEST                      ("0000000000000000000000000000000000000010000000000000000000000000");
const srcMLState::MODE_TYPE ModeStack::MODE_EXPRESSION_BLOCK          ("0000000000000000000000000000000000000100000000000000000000000000");
const srcMLState::MODE_TYPE ModeStack::MODE_INTERNAL_END_PAREN        ("0000000000000000000000000000000000001000000000000000000000000000");
const srcMLState::MODE_TYPE ModeStack::MODE_ACCESS_REGION             ("0000000000000000000000000000000000010000000000000000000000000000");
const srcMLState::MODE_TYPE ModeStack::MODE_DO_STATEMENT              ("0000000000000000000000000000000000100000000000000000000000000000");
const srcMLState::MODE_TYPE ModeStack::MODE_IGNORE_TERMINATE          ("0000000000000000000000000000000001000000000000000000000000000000");
const srcMLState::MODE_TYPE ModeStack::MODE_USING                     ("0000000000000000000000000000000010000000000000000000000000000000");
const srcMLState::MODE_TYPE ModeStack::MODE_EXTERN                    ("0000000000000000000000000000000100000000000000000000000000000000");
const srcMLState::MODE_TYPE ModeStack::MODE_TRAILING_RETURN           ("0000000000000000000000000000001000000000000000000000000000000000");
const srcMLState::MODE_TYPE ModeStack::MODE_INTERNAL_END_CURLY        ("0000000000000000000000000000010000000000000000000000000000000000");
const srcMLState::MODE_TYPE ModeStack::MODE_ISSUE_EMPTY_AT_POP        ("0000000000000000000000000000100000000000000000000000000000000000");
// const srcMLState::MODE_TYPE ModeStack::MODE_GUESSING               ("0000000000000000000000000001000000000000000000000000000000000000");
const srcMLState::MODE_TYPE ModeStack::MODE_CLASS                     ("0000000000000000000000000010000000000000000000000000000000000000");
const srcMLState::MODE_TYPE ModeStack::MODE_END_AT_ENDIF              ("0000000000000000000000000100000000000000000000000000000000000000");
const srcMLState::MODE_TYPE ModeStack::MODE_END_AT_BLOCK              ("0000000000000000000000001000000000000000000000000000000000000000");
const srcMLState::MODE_TYPE ModeStack::MODE_END_ONLY_AT_RPAREN        ("0000000000000000000000010000000000000000000000000000000000000000");
const srcMLState::MODE_TYPE ModeStack::MODE_END_AT_BLOCK_NO_TERMINATE ("0000000000000000000000100000000000000000000000000000000000000000");
const srcMLState::MODE_TYPE ModeStack::MODE_ARGUMENT_LIST             ("0000000000000000000001000000000000000000000000000000000000000000");
const srcMLState::MODE_TYPE ModeStack::MODE_ASSOCIATION_LIST          ("0000000000000000000010000000000000000000000000000000000000000000");
const srcMLState::MODE_TYPE ModeStack::MODE_FUNCTION_NAME             ("0000000000000000000100000000000000000000000000000000000000000000");
const srcMLState::MODE_TYPE ModeStack::MODE_ELSE                      ("0000000000000000001000000000000000000000000000000000000000000000");
const srcMLState::MODE_TYPE ModeStack::MODE_TYPEDEF                   ("0000000000000000010000000000000000000000000000000000000000000000");
const srcMLState::MODE_TYPE ModeStack::MODE_DECL                      ("0000000000000000100000000000000000000000000000000000000000000000");
const srcMLState::MODE_TYPE ModeStack::MODE_EAT_TYPE                  ("0000000000000001000000000000000000000000000000000000000000000000");
const srcMLState::MODE_TYPE ModeStack::MODE_FUNCTION_PARAMETER        ("0000000000000010000000000000000000000000000000000000000000000000");
const srcMLState::MODE_TYPE ModeStack::MODE_TERNARY                   ("0000000000000100000000000000000000000000000000000000000000000000");
const srcMLState::MODE_TYPE ModeStack::MODE_OBJECTIVE_C_CALL          ("0000000000001000000000000000000000000000000000000000000000000000");
const srcMLState::MODE_TYPE ModeStack::MODE_INNER_DECL                ("0000000000010000000000000000000000000000000000000000000000000000");
const srcMLState::MODE_TYPE ModeStack::MODE_SWITCH                    ("0000000000100000000000000000000000000000000000000000000000000000");
const srcMLState::MODE_TYPE ModeStack::MODE_TERNARY_CONDITION         ("0000000001000000000000000000000000000000000000000000000000000000");
const srcMLState::MODE_TYPE ModeStack::MODE_THEN                      ("0000000010000000000000000000000000000000000000000000000000000000");
const srcMLState::MODE_TYPE ModeStack::MODE_IN_INIT                   ("0000000100000000000000000000000000000000000000000000000000000000");
const srcMLState::MODE_TYPE ModeStack::MODE_TRY                       ("0000001000000000000000000000000000000000000000000000000000000000");
const srcMLState::MODE_TYPE ModeStack::MODE_END_LIST_AT_BLOCK         ("0000010000000000000000000000000000000000000000000000000000000000");
const srcMLState::MODE_TYPE ModeStack::MODE_TEMPLATE_PARAMETER_LIST   ("0000100000000000000000000000000000000000000000000000000000000000");
const srcMLState::MODE_TYPE ModeStack::MODE_ONLY_END_TERMINATE        ("0001000000000000000000000000000000000000000000000000000000000000");
const srcMLState::MODE_TYPE ModeStack::MODE_ENUM                      ("0010000000000000000000000000000000000000000000000000000000000000");
const srcMLState::MODE_TYPE ModeStack::MODE_ANONYMOUS                 ("0100000000000000000000000000000000000000000000000000000000000000");
const srcMLState::MODE_TYPE ModeStack::MODE_END_AT_COMMA              ("1000000000000000000000000000000000000000000000000000000000000000");
