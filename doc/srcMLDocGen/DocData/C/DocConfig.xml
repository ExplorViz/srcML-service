<DocConfig title="C srcML" lang="C" outputFile="C.md">

    <Category title="Statements">
        <DocEntry title="if Statement" shortTitle="if">
            <Elements>
                <Element name="if" />
                <Subelement name="condition" />
                <Subelement name="then" />
                <Subelement name="else" />
                <Subelement name="elseif" />
            </Elements>
            <Example file="C-if-1.c">
                <XPath path="//src:if">
                    <Desc>Find all if statements.</Desc>
                </XPath>
            </Example>
            <Example file="C-if-2.c" >
                <XPath path="//src:if/src:condition">
                    <Desc>Find all conditions of all if statements.</Desc>
                </XPath>
            </Example>
            <Example file="C-if-3.c" >
                <XPath path="//src:else">
                    <Desc>Find all else statements.</Desc>
                </XPath>
            </Example>
            <Example file="C-if-4.c">
                <XPath path="//src:if/src:then//src:if">
                    <Desc>Find all nested if statements.</Desc>
                </XPath>
            </Example>
            <Example file="C-if-5.c"/>
            <Example file="C-if-6.c" >
                <XPath path="//src:elseif">
                    <Desc>Find all else-if statements.</Desc>
                </XPath>
            </Example>
        </DocEntry>

        <DocEntry title="while statement" shortTitle="while">
            <Elements>
                <Element name="while" />
                <Subelement name="condition" />
                <Subelement name="block" />
            </Elements>
            <Example file="C-while-1.c">
                <XPath path="//src:while">
                    <Desc>Find all while statements.</Desc>
                </XPath>
                <XPath path="//src:while/src:condition">
                    <Desc>Find all of the conditions of all while statements.</Desc>
                </XPath>
                <XPath path="//src:while[src:condition//src:name = 'X']">
                    <Desc>Find all while statements which have a condition containing the variable `'X'`.</Desc>
                </XPath>
            </Example>
        </DocEntry>

        <DocEntry title="do while statement" shortTitle="do">
            <Elements>
                <Element name="do" />
                <Subelement name="block" />
                <Subelement name="condition" />
            </Elements>
            <Example file="C-do-while-1.c" >
                <XPath path="//src:do">
                    <Desc>Find all do statements.</Desc>
                </XPath>
                <XPath path="//src:do[src:condition//src:name = 'Z']">
                    <Desc>Find all do while statements which have a condition containing the variable `'Z'`.</Desc>
                </XPath>
            </Example>
            <Example file="C-do-while-2.c" />
        </DocEntry>

        <DocEntry title="switch statement" shortTitle="switch">
            <Elements>
                <Element name="switch" />
                <Subelement name="case" />
                <Subelement name="condition" />
                <Subelement name="block" />
            </Elements>
            <Example file="C-switch-1.c">
                <XPath path="//src:switch">
                    <Desc>Find all switch statements.</Desc>
                </XPath>
                <XPath path="//src:switch/src:condition">
                    <Desc>Find all of the conditions of all switch statements.</Desc>
                </XPath>
            </Example>
            <Example file="C-switch-2.c"/>
        </DocEntry>

        <DocEntry title="case statement" shortTitle="case">
            <Elements>
                <Element name="case" />
                <Subelement name="expr" />
            </Elements>
            <Example file="C-case-1.c">

                <XPath path="//src:case">
                    <Desc>Find all case statements.</Desc>
                </XPath>

                <XPath path="//src:case[.//src:name = 'SATURDAY']">
                    <Desc>Find all case statements which use the name `'SATURDAY'`.</Desc>
                </XPath>

                <XPath path="//src:switch[src:block/src:case[.//src:name = 'SATURDAY']]">
                    <Desc>Find all switch statements which have a case that uses the name `'SATURDAY'`.</Desc>
                </XPath>
            </Example>
        </DocEntry>

        <DocEntry title="default statement" shortTitle="default">
            <Elements>
                <Element name="default"/>
            </Elements>
            <Example file="C-default-1.c">
                <XPath path="//src:default">
                    <Desc>Find all default statements.</Desc>
                </XPath>
                <XPath path="//src:switch[src:block/src:default]">
                    <Desc>Find all switch statements which have a case that have a `default:` statement.</Desc>
                </XPath>
            </Example>
        </DocEntry>

        <DocEntry title="for statement" shortTitle="for">
            <Elements>
                <Element name="for" />
                <Subelement name="init" />
                <Subelement name="condition" />
                <Subelement name="incr" />
                <!-- <Subelement name="block" /> -->
            </Elements>
            <Example file="C-for-1.c">
                <XPath path="//src:for">
                    <Desc>Find all for statements.</Desc>
                </XPath>
                <XPath path="//src:for/src:init">
                    <Desc>Find all initialization statements from within the control of all for statements.</Desc>
                </XPath>
                <XPath path="//src:for[string-length(src:init/src:decl/src:name) = 1]">
                    <Desc>Find all for loops which declare a variable with a single character name (e.g. `x`, `i` or `y`).</Desc>
                </XPath>
                <XPath path="//src:for[src:incr/src:expr//node()/following-sibling::op:operator[.= '++']]">
                    <Desc>Find all for loops which use post decrement as part of the increment expression.</Desc>
                </XPath>
            </Example>
            <Example file="C-for-2.c">
                <XPath path="//src:for/src:incr">
                    <Desc>Find all of the increments expression of all for loops.</Desc>
                </XPath>
            </Example>
            <Example file="C-for-3.c">
                <XPath path="//src:for/src:condition">
                    <Desc>Find all of the conditions of all for loops.</Desc>
                </XPath>
            </Example>
        </DocEntry>

        <DocEntry title="break statement" shortTitle="break">
            <Elements>
                <Element name="break" />
            </Elements>
            <Example file="C-break.c">
                <XPath path="//src:break">
                    <Desc>Find all break statements.</Desc>
                </XPath>
            </Example>
        </DocEntry>

        <DocEntry title="continue statement" shortTitle="continue">
            <Elements>
                <Element name="continue" />
            </Elements>
            <Example file="C-continue.c">
                <XPath path="//src:continue">
                    <Desc>Find all continue statements.</Desc>
                </XPath>
            </Example>
        </DocEntry>

        <DocEntry title="return statement" shortTitle="return">
            <Elements>
                <Element name="return" />
            </Elements>
            <Example file="C-return-1.c">
                <XPath path="//src:return">
                    <Desc>Find all return statements.</Desc>
                </XPath>
                <XPath path="//src:function[ count(.//src:return) > 1]">
                    <Desc>Find all functions with more then one return statements.</Desc>
                </XPath>
            </Example>
            <Example file="C-return-2.c" />
        </DocEntry>

        <DocEntry title="block statement" shortTitle="block">
            <Elements>
                <Element name="block" />
            </Elements>
            <Example file="C-compound-block.c">
                <XPath path="//src:block">
                    <Desc>Find all blocks.</Desc>
                </XPath>
                <XPath path="//src:block/src:decl_stmt">
                    <Desc>Find all variable declaration statements which are children of a block.</Desc>
                </XPath>

            </Example>
        </DocEntry>


        <DocEntry title="label statement" shortTitle="label">
            <Elements>
                <Element name="label" />
                <Subelement name="name" />
            </Elements>
            <Example file="C-label.c" >
                <XPath path="//src:label">
                    <Desc>Find all label statements.</Desc>
                </XPath>

                <XPath path="//src:label[src:name[. != //src:goto/src:name]]">
                    <!--
                        Sort of! This can pair ALL goto's with ALL labels not not
                        just those which it could actually jump to.
                    -->
                    <Desc>Find all label statements without goto statements.</Desc>
                </XPath>

            </Example>
        </DocEntry>

        <DocEntry title="goto statement" shortTitle="goto">
            <Elements>
                <Element name="goto" />
                <Subelement name="name" />
            </Elements>
            <Example file="C-goto.c" >
                <XPath path="//src:goto">
                    <Desc>Find all goto statements.</Desc>
                </XPath>
            </Example>
        </DocEntry>

        <DocEntry title="empty statement">
            <Elements>
                <Element name="empty_stmt" />
            </Elements>
            <Example file="C-empty-stmt.c" >
                <XPath path="//src:empty_stmt">
                    <Desc>Find all empty statements.</Desc>
                </XPath>
            </Example>
        </DocEntry>
    </Category>


    <Category title="Specifiers">

        <DocEntry title="const">
            <Elements>
                <Element name="specifier" />
            </Elements>
            <Example file="C-const-variable-1.c">
                <XPath path="//src:decl/src:type/src:specifier [.='const']">
                    <Desc>Find all const variable declarations.</Desc>
                </XPath>
            </Example>
            <Example file="C-const-variable-2.c" />
        </DocEntry>

        <DocEntry title="volatile">
            <Elements>
                <Element name="specifier" />
            </Elements>
            <Example file="C-volatile.c">
                <XPath path="//src:decl/src:type/src:specifier [.='volatile']">
                    <Desc>Find all volatile variable declarations.</Desc>
                </XPath>
            </Example>
        </DocEntry>

        <DocEntry title="restrict">
            <Elements>
                <Element name="specifier" />
            </Elements>
            <Example file="C-restrict.c" >
                <XPath path="//src:decl/src:type/src:specifier [.='restrict']">
                    <Desc>Find all variables declared with the restrict specifier.</Desc>
                </XPath>
            </Example>
        </DocEntry>

        <DocEntry title="auto">
            <Elements>
                <Element name="specifier" />
            </Elements>
            <Example file="C-auto.c">
                <XPath path="//src:decl/src:type/src:specifier [.='auto']">
                    <Desc>Find all auto variable declarations.</Desc>
                </XPath>
            </Example>
        </DocEntry>

        <DocEntry title="register">
            <Elements>
                <Element name="name" />
            </Elements>
            <Example file="C-register.c">
                <!--
                    FIXME register is supposed to be a specifier and this was a
                    bug that was going to be fixed but wasn't at the time this
                    was written.
                -->
                <XPath path="//src:decl/src:type/src:name [.='volatile']">
                    <Desc>Find all volatile variable declarations.</Desc>
                </XPath>
            </Example>
        </DocEntry>

        <DocEntry title="extern block">
            <Elements>
                <Element name="extern" />
                <Subelement ns="lit" name="literal" >
                    <RequiredMarkup srcMLOption="--literal"/>
                </Subelement>
                <Subelement name="block" />
            </Elements>
            <Example title="Extern Block with Linkage Specifier" file="C-extern-linkage-block.c">
                <XPath path="//src:extern">
                    <Desc>Find all extern block variable declarations.</Desc>
                </XPath>
            </Example>
        </DocEntry>

        <DocEntry title="extern specifier">
            <Elements>
                <Element name="specifier" />
                <Subelement ns="lit" name="literal" >
                    <RequiredMarkup srcMLOption="--literal"/>
                </Subelement>
                <Subelement name="decl_stmt" />
                <Subelement name="function_stmt" />
                <Subelement name="block" />
            </Elements>
            <Example title="External Variable" file="C-extern-1.c" >
                <XPath path="//src:decl/src:type/src:specifier [.='extern']">
                    <Desc>Find all variables declared with the specifier extern.</Desc>
                </XPath>
            </Example>
            <Example title="External Structure" file="C-extern-2.c" />
            <Example title="External Function" file="C-extern-3.c"/>
            <Example title="External Function with Linkage Specifier" file="C-extern-linkage-1.c"  >
                <XPath path="//src:function_decl/src:type/src:specifier [.='extern']">
                    <Desc>Find all functions declared with the specifier extern.</Desc>
                </XPath>
            </Example>
            <Example title="Extern Structure with Linkage Specifier" file="C-extern-linkage-2.c" />
            <Example title="Extern Variable with Linkage Specifier" file="C-extern-linkage-3.c" />
        </DocEntry>

        <DocEntry title="static">
            <Elements>
                <Element name="specifier" />
            </Elements>
            <Example file="C-static-1.c">
                <XPath path="//src:function_decl/src:type/src:specifier [.='static']">
                    <Desc>Find all static functions declarations.</Desc>
                </XPath>
            </Example>
            <Example file="C-static-2.c">
                <XPath path="//src:decl/src:type/src:specifier [.='static']">
                    <Desc>Find all static variables declarations.</Desc>
                </XPath>
            </Example>
        </DocEntry>

        <DocEntry title="inline">
            <Elements>
                <Element name="specifier" />
            </Elements>
            <Example file="C-inline.c">
                <XPath path="//src:function_decl/src:type/src:specifier [.='inline']">
                    <Desc>Find all inline function declarations.</Desc>
                </XPath>
            </Example>
        </DocEntry>
    </Category>


    <Category title="Declarations/Definitions">

        <DocEntry title="variable declaration statement">
            <Elements>
                <Element name="decl_stmt" />
            </Elements>
            <Example title="A Trivial Example" file="C-variable-declaration-1.c">
                <XPath path="//src:decl_stmt">
                    <Desc>Find all declaration statements.</Desc>
                </XPath>
            </Example>
            <Example title="struct, union and enum declarations" file="C-variable-declaration-2.c" >
                <XPath path="//src:decl_stmt/src:decl[src:type/text()[contains(., 'union')]]">
                    <Desc>Find all variable declaration statements with the union qualifier.</Desc>
                </XPath>
            </Example>
        </DocEntry>

        <DocEntry title="variable declaration">
            <Elements>
                <Element name="decl" />
                <Subelement name="init">
                    <Desc>Only used when variable is initialized at declaration. See initialization examples for more details.</Desc>
                </Subelement>
            </Elements>
            <Example title="A Trivial Example" file="C-variable-declaration-1.c" >
                <XPath path="//src:decl">
                    <Desc>Find all variable declarations.</Desc>
                </XPath>
                <XPath path="//src:decl[src:init]">
                    <Desc>Find all variable declarations which also initialize the variable.</Desc>
                </XPath>
            </Example>
            <Example title="struct, union and enum declarations" file="C-variable-declaration-2.c" >
                <XPath path="//src:decl[src:type/text()[contains(., 'struct')]]">
                    <Desc>Find all variable declarations with the struct qualifier.</Desc>
                </XPath>
            </Example>
        </DocEntry>



        <DocEntry title="function declaration">
            <Elements>
                <Element name="function_decl" />
                <Subelement name="name" />
                <Subelement name="parameter_list" />
                <Subelement name="param" />
            </Elements>
            <Example file="C-function-decl-1.c">

                <XPath path="//src:function_decl">
                    <Desc>Find all function declarations.</Desc>
                </XPath>

                <XPath path="//src:function_decl/src:type">
                    <Desc>Find all return types from all function declarations.</Desc>
                </XPath>

                <!--
                    <XPath path="//src:function_decl/src:type">
                        <Desc>Find the number of parameters for each function declaration..</Desc>
                    </XPath>
                -->
            </Example>
            <Example file="C-function-decl-2.c">
                <XPath path="//src:function_decl/src:parameter_list/src:param">
                    <Desc>Find all parameters from all function declarations.</Desc>
                </XPath>
                <XPath path="//src:function_decl[src:parameter_list[count(src:param) = 2]">
                    <Desc>Find all function declarations with only two parameters.</Desc>
                </XPath>
                <XPath path="//src:function_decl/src:name">
                    <Desc>Find the names of all function declarations.</Desc>
                </XPath>
            </Example>
            <Example file="C-function-decl-3.c" />
            <Example file="C-function-decl-4.c" >
                <XPath path="//src:function_decl[src:parameter_list/src:param/src:decl/src:type/type:modifier[.='...']]">
                    <Desc>Find all function declarations that has variadic arguments.</Desc>
                </XPath>
            </Example>
        </DocEntry>

        <DocEntry title="function definition">
            <Elements>
                <Element name="function" />
                <Subelement name="name" />
                <Subelement name="parameter_list" />
                <Subelement name="param" />
            </Elements>
            <Example file="C-function-def-1.c">

                <XPath path="//src:function">
                    <Desc>Find all function definitions.</Desc>
                </XPath>

                <XPath path="//src:function/src:type">
                    <Desc>Find all return types from all function definitions.</Desc>
                </XPath>
            </Example>
            <Example file="C-function-def-2.c">
                <XPath path="//src:function/src:parameter_list/src:param">
                    <Desc>Find all parameters from all function definitions.</Desc>
                </XPath>
                <XPath path="//src:function[src:parameter_list[count(src:param) = 2]">
                    <Desc>Find all function definitions with only two parameters.</Desc>
                </XPath>
                <XPath path="//src:function/src:name">
                    <Desc>Find the names of all function definitions.</Desc>
                </XPath>
            </Example>
            <Example file="C-function-def-3.c"/>
            <Example file="C-function-def-4.c"/>
            <Example file="C-function-def-5.c" >
                <XPath path="//src:function[src:parameter_list/src:param/src:decl/src:type/type:modifier[.='...']]">
                    <Desc>Find all function definition that has variadic arguments.</Desc>
                </XPath>
            </Example>
            <Example file="C-function-decl-5.c">
                <XPath path="//src:function[src:decl_stmt]">
                    <Desc>Find all K &amp; R function definitions.</Desc>
                </XPath>
            </Example>
        </DocEntry>


        <DocEntry title="pointer declaration">
            <Elements>
                <Element ns="type" name="modifier">
                    <RequiredMarkup srcMLOption="--modifier"/>
                </Element>
            </Elements>
            <Example file="C-pointer-declaration-1.c">
                <XPath path="//src:decl[type:modifier[.='*']]">
                    <Desc>Find all of the declarations of pointers.</Desc>
                </XPath>
            </Example>
            <Example file="C-pointer-declaration-2.c" />
            <Example file="C-pointer-declaration-3.c" />
            <Example file="C-pointer-declaration-4.c" />
            <Example file="C-pointer-declaration-5.c">
                <XPath path="//src:function_decl[text()[contains(., ')')]]">
                    <Desc>Find all function pointers.</Desc>
                </XPath>
            </Example>
            <Example file="C-cv-ptr-decl-1.c" />
            <Example file="C-cv-ptr-decl-2.c" />
        </DocEntry>


        <DocEntry title="typedef">
            <Elements>
                <Element name="typedef" />
                <Subelement name="type" />
                <Subelement name="name" />
                <Subelement name="function_decl" />
            </Elements>
            <Example file="C-typedef-1.c">
                <XPath path="//src:typedef">
                    <Desc>Find all typedefs.</Desc>
                </XPath>
                <XPath path="//src:typedef/src:type">
                    <Desc>Find all types within typedefs.</Desc>
                </XPath>
                <XPath path="//src:typedef/src:name">
                    <Desc>Find all names for all typedefs.</Desc>
                </XPath>
            </Example>
            <Example file="C-typedef-2.c" >
                <XPath path="//src:typedef[src:type/src:struct]">
                    <Desc>Find all typedefs that are used to define a struct.</Desc>
                </XPath>
            </Example>
            <Example file="C-typedef-3.c" >
                <XPath path="//src:typedef[src:function_decl]">
                    <Desc>Find all typedefs that declare a function type.</Desc>
                </XPath>
            </Example>

            <Example file="C-typedef-4.c">
                <XPath path="//src:typedef[src:function_decl[text()[contains(., ')')]]]">
                    <Desc>Find all typedefs of a function pointer.</Desc>
                </XPath>
                <XPath path="//src:typedef/src:function_decl[text()[contains(., ')')]]/src:name">
                    <Desc>Find all names from all typedefs of function pointers.</Desc>
                </XPath>
            </Example>
        </DocEntry>

        <DocEntry title="array declaration">
            <Elements>
                <Element name="decl" />
                <Subelement name="name" />
                <Subelement name="index" />
            </Elements>
            <Example file="C-array-declaration-1.c">
                <XPath path="//src:decl[src:name/src:name/src:index]]">
                    <Desc>Find all array declarations.</Desc>
                </XPath>
            </Example>
            <Example file="C-array-declaration-2.c">
                <XPath path="//src:decl[src:name/src:name/src:index/lit:literal[number(text()) &lt; 50]]">
                    <Desc>Find all array declarations where the number of elements is less then 50.</Desc>
                </XPath>
            </Example>
            <Example file="C-array-declaration-3.c" />
            <Example file="C-array-declaration-4.c" />
        </DocEntry>

        <DocEntry title="array initialization">
            <Elements>
                <Element name="init" />
                <Subelement name="block" />
            </Elements>
            <Example file="C-array-initialization-1.c">
                <XPath path="//src:decl[src:name/src:name/src:index]][src:init]">
                    <Desc>Find all array declarations which initialize the array at the same time.</Desc>
                </XPath>
            </Example>
            <Example file="C-array-initialization-2.c" />
        </DocEntry>

        <DocEntry title="bitfield">
            <Elements>
                <Element name="range" />
                <Subelement name="expr" />
                <Subelement ns="lit" name="literal">
                    <RequiredMarkup srcMLOption="--literal"/>
                </Subelement>
            </Elements>
            <Example file="C-bitfields.c" >
                <XPath path="//src:decl[src:range]">
                    <Desc>Find all bitfield declarations.</Desc>
                </XPath>
            </Example>
        </DocEntry>
    </Category>


    <Category title="Struct, Union and Enum">
        <DocEntry title="struct declaration">
            <Elements>
                <Element name="struct_decl" />
                <Subelement name="name" />
            </Elements>
            <Example title="forward declaration" file="C-struct-declaration-3.c" >
                <XPath path="//src:struct_decl">
                    <Desc>Find all of the forward declarations for all structs.</Desc>
                </XPath>
            </Example>
        </DocEntry>

        <DocEntry title="struct definition">
            <Elements>
                <Element name="struct" />
                <Subelement name="name" />
                <Subelement name="block" />
            </Elements>
            <Example title="trivial declaration" file="C-struct-declaration-1.c">
                <XPath path="//src:struct">
                    <Desc>Find the definition of all structs.</Desc>
                </XPath>
                <XPath path="//src:struct/src:block/src:decl_stmt">
                    <Desc>Find the members from all structs.</Desc>
                </XPath>
            </Example>
            <Example title="variable of an anonymous struct type" file="C-struct-declaration-2.c" />
            <Example title="declaring a struct and instance" file="C-struct-declaration-4.c" />
        </DocEntry>

        <DocEntry title="struct initialization">
            <Elements>
                <Element name="decl_stmt" />
                <Subelement name="decl" />
                <Subelement name="init" />
                <Subelement name="block" />
            </Elements>
            <Example file="C-struct-initialization-1.c">
                <XPath path="//src:decl[src:init/src:block]">
                    <Desc>Find all of declaration of structs which also initialize it.</Desc>
                </XPath>
            </Example>
            <Example file="C-struct-initialization-2.c" />
            <Example file="C-struct-initialization-3.c" />
        </DocEntry>

        <DocEntry title="enum definition">
            <Elements>
                <Element name="enum" />
                <Subelement name="name" />
                <Subelement name="block" />
            </Elements>
            <Example file="C-enum-declaration-1.c">
                <XPath path="//src:enum">
                    <Desc>Find all enum definitions.</Desc>
                </XPath>
            </Example>
            <Example file="C-enum-declaration-2.c">
                <XPath path="//src:enum/src:decl/src:name">
                    <Desc>Find the names of all members of all enums.</Desc>
                </XPath>
            </Example>
            <Example file="C-enum-declaration-3.c" />
        </DocEntry>

        <DocEntry title="union declaration">
            <Elements>
                <Element name="union_decl" />
                <Subelement name="name" />
                <Subelement name="block" />
            </Elements>
            <Example file="C-union-declaration-2.c">
                <XPath path="//src:union_decl">
                    <Desc>Find all of the forward declarations for all unions.</Desc>
                </XPath>
            </Example>
        </DocEntry>

        <DocEntry title="union definition">
            <Elements>
                <Element name="union" />
                <Subelement name="name" />
                <Subelement name="block" />
            </Elements>
            <Example file="C-union-declaration-1.c">
                <XPath path="//src:union">
                    <Desc>Find all definitions of all unions.</Desc>
                </XPath>
            </Example>
        </DocEntry>

    </Category>

    <Category title="Expression">
        <DocEntry title="Function Call">
            <Elements>
                <Element name="call" />
                <Subelement name="name" />
                <Subelement name="argument_list" />
                <Subelement name="argument" />
            </Elements>
            <Example file="C-function-call.c">
                <XPath path="//src:call">
                    <Desc>Find all function calls.</Desc>
                </XPath>
            </Example>
        </DocEntry>

        <DocEntry title="array indexing">
            <Elements>
                <Element name="name"/>
                <Subelement name="name" />
                <Subelement name="index" />
            </Elements>
            <Example file="C-array-access.c">
                <XPath path="//src:expr/src:name[src:name/src:index/node()]">
                    <Desc>Find all array indexings.</Desc>
                </XPath>
            </Example>
        </DocEntry>

        <DocEntry title="dereference member access">
            <Elements>
                <Element name="expr"/>
                <Subelement name="name" />
                <Subelement ns="op" name="operator">
                    <RequiredMarkup srcMLOption="--operator"/>
                </Subelement>
            </Elements>
            <Example file="C-deref-member-access.c">
                <XPath path="//op:operator[.='-&gt;']">
                    <Desc>Find all uses of the `-&gt;` operator.</Desc>
                </XPath>
            </Example>
        </DocEntry>

        <DocEntry title="member access">
            <Elements>
                <Element name="expr"/>
                <Subelement name="name" />
                <Subelement ns="op" name="operator" >
                    <RequiredMarkup srcMLOption="--operator"/>
                </Subelement>
            </Elements>
            <Example file="C-member-access.c">
                <XPath path="//op:operator[.='.']">
                    <Desc>Find all uses of the `.` operator.</Desc>
                </XPath>
            </Example>
        </DocEntry>
    </Category>



    <Category title="Other">
        <DocEntry title="cast">
            <Elements>
                <Element ns="op" name="operator">
                    <RequiredMarkup srcMLOption="--operator"/>
                </Element>
                <Subelement name="name" />
            </Elements>
            <Example file="C-c-style-cast.c" />
        </DocEntry>

        <DocEntry title="sizeof">
            <Elements>
                <Element name="sizeof"/>
                <Subelement name="argument_list" />
                <Subelement name="argument"/>
            </Elements>
            <Example file="C-sizeof.c">
                <XPath path="//src:sizeof">
                    <Desc>Find all uses of sizeof.</Desc>
                </XPath>
            </Example>
        </DocEntry>

        <DocEntry title="_Alignas">
            <Elements>
                <Element name="alignas" />
                <Subelement name="argument_list" />
                <Subelement name="argument" />
            </Elements>
            <Example file="C-_Alignas-1.c">
                <XPath path="//src:alignas">
                    <Desc>Find all uses of _Alignas.</Desc>
                </XPath>
            </Example>

            <Example file="C-_Alignas-2.c" />
        </DocEntry>

        <DocEntry title="_Alignof">
            <Elements>
                <Element name="alignof"/>
                <Subelement name="argument_list" />
                <Subelement name="argument"/>
            </Elements>
            <Example file="C-_Alignof.c" >
                <XPath path="//src:alignof">
                    <Desc>Find all uses of _Alignof.</Desc>
                </XPath>
            </Example>
        </DocEntry>

        <DocEntry title="_Atomic">
            <Elements>
                <Element name="atomic" />
                <Subelement name="argument_list" />
                <Subelement name="argument" />
            </Elements>
            <Example file="C-_Atomic-1.c">
                <!--
                <XPath path="TODO: Fixme!">
                    <Desc>BUG.</Desc>
                </XPath>
                -->
            </Example>
            <Example file="C-_Atomic-2.c">
                <XPath path="//src:atomic">
                    <Desc>Find all uses of _Atomic.</Desc>
                </XPath>
            </Example>
            <Example file="C-_Atomic-3.c" />
        </DocEntry>
        
        <DocEntry title="_Generic">
            <Desc>The only use case for this keyword is within a macro, in which case srcML will not mark it up.</Desc>
            <Elements>
                <Element name="generic_selection"/>
                <Subelement name="selector" />
                <Subelement name="association_list" />
                <Subelement name="association" />
            </Elements>
            <Example file="C-_Generic.c">
                <XPath path="//src:generic_selection">
                    <Desc>Find all uses of _Generic.</Desc>
                </XPath>
            </Example>
        </DocEntry>
        
        <DocEntry title="_Noreturn">
            <Elements>
                <Element name="specifier" />
            </Elements>
            <Example file="C-_Noreturn.c">
                <XPath path="//src:specifier[.='_Noreturn']">
                    <Desc>Find all uses of _Noreturn.</Desc>
                </XPath>
            </Example>
        </DocEntry>

        <DocEntry title="_Static_assert">
            <Elements>
                <Element name="assert">
                    <AttribStr>type="static"</AttribStr>
                </Element>
                <Subelement name="argument_list" />
                <Subelement name="argument"/>
            </Elements>
            <Example file="C-_Static_assert.c">
                <XPath path="//src:assert[@type ='static']">
                    <Desc>Find all uses of _Static_assert.</Desc>
                </XPath>
            </Example>
        </DocEntry>

        <DocEntry title="_Thread_local">
            <Elements>
                <Element name="specifier" />
            </Elements>
            <Example file="C-_Thread_local.c">
                <XPath path="//src:specifier[.='_Thread_local']">
                    <Desc>Find all uses of _Thread_local.</Desc>
                </XPath>
                
            </Example>
        </DocEntry>

    </Category>

	<OperatorEntry title="Pre Increment" op="++" example="C-Operator-pre_increment.c" />
	<OperatorEntry title="Post Increment" op="++" example="C-Operator-post_increment.c" />
	<OperatorEntry title="Pre Decrement" op="--" example="C-Operator-pre_decrement.c" />
	<OperatorEntry title="Post Decrement" op="--" example="C-Operator-post_decrement.c" />
	<OperatorEntry title="Address Of" op="&amp;" example="C-Operator-address_of.c" />
	<OperatorEntry title="Dereference" op="*" example="C-Operator-deref.c" />
	<OperatorEntry title="Unary Minus" op="-" example="C-Operator-unary-minus.c" />
	<OperatorEntry title="Bitwise Not" op="~" example="C-Operator-bitwise-not.c" />
	<OperatorEntry title="Logical Not" op="!" example="C-Operator-logical-not.c" />
	<OperatorEntry title="Multiplication" op="*" example="C-Operator-multiplication.c" />
	<OperatorEntry title="Division" op="/" example="C-Operator-divide.c" />
	<OperatorEntry title="Modulus" op="%" example="C-Operator-modulus.c" />
	<OperatorEntry title="Addition" op="+" example="C-Operator-addition.c" />
	<OperatorEntry title="Subtraction" op="-" example="C-Operator-subtraction.c" />
	<OperatorEntry title="Left Shift" op="&lt;&lt;" example="C-Operator-left-shift.c" />
	<OperatorEntry title="Right Shift" op="&gt;&gt;" example="C-Operator-right-shift.c" />
	<OperatorEntry title="Less Then" op="&lt;" example="C-Operator-less-then.c" />
	<OperatorEntry title="Greater Then" op="&gt;" example="C-Operator-greater-then.c" />
	<OperatorEntry title="Less Then or Equal To" op="&lt;=" example="C-Operator-less-equal.c" />
	<OperatorEntry title="Greater Then or Equal To" op="&gt;=" example="C-Operator-greater-equal.c" />
	<OperatorEntry title="Equals" op="==" example="C-Operator-equal.c" />
	<OperatorEntry title="Not Equal" op="!=" example="C-Operator-not-equal.c" />
	<OperatorEntry title="Bitwise And" op="&amp;" example="C-Operator-bitwise-and.c" />
	<OperatorEntry title="Bitwise XOr" op="^" example="C-Operator-bitwise-xor.c" />
	<OperatorEntry title="Bitwise Or" op="|" example="C-Operator-bitwise-or.c" />
	<OperatorEntry title="Logical And" op="&amp;&amp;" example="C-Operator-logical-and.c" />
	<OperatorEntry title="Logical Or" op="||" example="C-Operator-logical-or.c" />
	<OperatorEntry title="Assignment" op="=" example="C-Operator-assignment.c" />
	<OperatorEntry title="Multiply Assign" op="*=" example="C-Operator-multiply-assign.c" />
	<OperatorEntry title="Divide Assign" op="/=" example="C-Operator-divide-assign.c" />
	<OperatorEntry title="Modulus Assign" op="%=" example="C-Operator-modulus-assign.c" />
	<OperatorEntry title="Add Assign" op="+=" example="C-Operator-addition-assign.c" />
	<OperatorEntry title="Subtract Assign" op="-=" example="C-Operator-sub-assign.c" />
	<OperatorEntry title="Left Shift Assign" op="&lt;&lt;=" example="C-Operator-left-shift-assign.c" />
	<OperatorEntry title="Right Shift Assign" op="&gt;&gt;=" example="C-Operator-right-shift-assign.c" />
	<OperatorEntry title="Bitwise And Assign" op="&amp;=" example="C-Operator-bitwise-and-assign.c" />
	<OperatorEntry title="Bitwise XOr Assign" op="^=" example="C-Operator-bitwise-xor-assign.c" />
	<OperatorEntry title="Bitwise Or Assign" op="|=" example="C-Operator-bitwise-or-assign.c" />
	<OperatorEntry title="Comma" op="," example="C-Operator-comma.c" />
    <OperatorEntry title="Conditional" op="?  :" example="C-Operator-turnary.c" />
    <OperatorEntry title="Dot" op="." example="C-member-access.c" />
    <OperatorEntry title="Arrow" op="-&gt;" example="C-deref-member-access.c" />
</DocConfig>
