<XPathExtensionFunctions outputFile="XPathExtFunc.html">    
    <ExtFunc>
        <Name>bool has_return()</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>
Checks all children and all subsequent children for a return
statement. This is scope respecting, in that it doesn't search within
closures functions or local classes.
&lt;br/&gt;
&lt;br/&gt;
&lt;code&gt;has_return&lt;/code&gt; can be called on almost anything, but the typical case 
is using it on statements or functions. The behavior it has
when called on non-complex statements (those that don't combine multiple
statements using a block such as return, throw, expr_stmt and decl_stmt)
is to search those statements for a return including the sub elements 
excluding lambdas and delegates, This means that because only the sub
elements are searched that a return doesn't have a return (because it is one).
        </Desc>
        <Examples>
            <Example desc="Find all constructors that have a return" xpath="//src:constructor[src:has_return()]"/>
            <Example desc="Find all classes that have a constructor that calls return (C#)" xpath="//src:class[src:constructor[src:has_return()]]"/>
        </Examples>
        <Tags>
            <Tag name="block"/>
            <Tag name="function"/>
            <Tag name="constructor"/>
            <Tag name="destructor"/>
            <Tag name="while"/>
            <Tag name="if"/>
            <Tag name="then"/>
            <Tag name="elseif"/>
            <Tag name="else"/>
            <Tag name="try"/>
            <Tag name="catch"/>
            <Tag name="finally"/>
            <Tag name="do"/>
            <Tag name="for"/>
            <Tag name="foreach"/>
            <Tag name="switch"/>
            <Tag name="lambda"/>
            <Tag name="delegate"/>
            <Tag name="using_stmt"/>
            <Tag name="fixed"/>
            <Tag name="lock"/>
            <Tag name="synchronized"/>
            <Tag name="unsafe"/>
            <Tag name="static"/>
            <Tag name="checked"/>
            <Tag name="unchecked"/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool has_throw()</Name>
        <Langs>C++, C#, Java</Langs>
        <Desc>
Checks all children and all subsequent children for a throw statement
statement. This is scope respecting, in that it doesn't search within
closures functions, local classes, catches or finallies.
&lt;br/&gt;
&lt;br/&gt;
&lt;code&gt;has_throw&lt;/code&gt; behaves in a similar manner to &lt;code&gt;has_return&lt;/code&gt;
accept that it searches for throw statements instead of return statements, and
it the scope it follows omits catch and finally. The &lt;code&gt;has_throw&lt;/code&gt;
extension function can be called directly on either a catch or finally and it will
search all children in the same scope respecting manner looking for a throw statement.
        </Desc>
        <Examples>
            <Example desc="Find all constructors that have a throw" xpath="//src:constructor[src:has_throw()]"/>
            <Example desc="Find all classes that have a destructor that contains a throw statement (C++)" xpath="//src:class[node()/src:destructor[src:has_throw()]]"/>
        </Examples>
        <Tags>
            <Tag name="block"/>
            <Tag name="function"/>
            <Tag name="constructor"/>
            <Tag name="destructor"/>
            <Tag name="while"/>
            <Tag name="if"/>
            <Tag name="then"/>
            <Tag name="elseif"/>
            <Tag name="else"/>
            <Tag name="try"/>
            <Tag name="catch"/>
            <Tag name="finally"/>
            <Tag name="do"/>
            <Tag name="for"/>
            <Tag name="foreach"/>
            <Tag name="switch"/>
            <Tag name="lambda"/>
            <Tag name="delegate"/>
            <Tag name="using_stmt"/>
            <Tag name="fixed"/>
            <Tag name="lock"/>
            <Tag name="synchronized"/>
            <Tag name="unsafe"/>
            <Tag name="static"/>
            <Tag name="checked"/>
            <Tag name="unchecked"/>
        </Tags>
    </ExtFunc>
    
    
    <ExtFunc>
        <Name>bool is_nested()</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>
Checks to see if a class or type declaration is nested within another
scope. This function only works for parts of the language which
can occur at a global scope.
&lt;br/&gt;
&lt;br/&gt;
asm is handled specially it checks to see of the current ASM statement is within another ASM statement.
        </Desc>
        <Examples>
            <Example desc="Find all typedefs nested within a namespace, class, struct union or function" xpath="//src:typedef[src:is_nested()]"/>
        </Examples>
        <Tags>
            <Tag name="asm"/>
            <Tag name="typedef"/>
            <Tag name="using"/>
            <Tag name="function"/>
            <Tag name="function_decl"/>
            <Tag name="constructor"/>
            <Tag name="constructor_decl"/>
            <Tag name="destructor"/>
            <Tag name="destructor_decl"/>
            <Tag name="property"/>
            <Tag name="event"/>
            <Tag name="union"/>
            <Tag name="union_decl"/>
            <Tag name="class"/>
            <Tag name="class_decl"/>
            <Tag name="struct"/>
            <Tag name="struct_decl"/>
            <Tag name="enum"/>
            <Tag name="namespace"/>
        </Tags>
    </ExtFunc>

    <ExtFunc>
        <Name>bool is_class_template_partial_specialization()</Name>
        <Langs>C++</Langs>
        <Desc>
Checks to see if a class template is a partial specialization. This is done
by checking for a template arguments and a template within the name of the
class, struct or union.
        </Desc>
        <Examples>
            <Example desc="Find all partial class template specializations" xpath="//src:class[src:is_class_template_partial_specialization()]"/>
        </Examples>
        <Tags>
            <Tag name="struct"/>
            <Tag name="struct_decl"/>
            <Tag name="class"/>
            <Tag name="class_decl"/>
            <Tag name="union"/>
            <Tag name="union_decl"/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool has_init()</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>
Checks for an initialization within a declaration statement or the init
that's part of other statements such as a for, using_stmt, or synchronize.
        </Desc>
        <Examples>
            <Example desc="Find all declaration statements with an initialization" xpath="//src:decl_stmt[src:has_init()]"/>
        </Examples>
        <Tags>
            <Tag name="decl"/>
            <Tag name="decl_stmt"/>
            <Tag name="param"/>
            <Tag name="argument"/>
            <Tag name="using_stmt"/>
            <Tag name="using"/>
            <Tag name="try"/>
            <Tag name="synchronized"/>
            <Tag name="fixed"/>
            <Tag name="lock"/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool has_break()</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>
Checks using scope rules and attempts to locate a break statement within
a loop construct or switch statement. This respects the scope of other loops
by not searching their children when they are not the contexts of the
predicate.
        </Desc>
        <Examples>
            <Example desc="Find all for loops with break statements" xpath="//src:for[src:has_break()]"/>
        </Examples>
        <Tags>
            <Tag name="switch"/>
            <Tag name="do"/>
            <Tag name="while"/>
            <Tag name="foreach"/>
            <Tag name="for"/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool is_unsafe()</Name>
        <Langs>C#</Langs>
        <Desc>
Checks to see if the current statement, declaration or other element is within
an unsafe block.
        </Desc>
        <Examples>
            <Example desc="Find all unsafe declaration statements" xpath="//src:decl_stmt[src:is_unsafe()]"/>
        </Examples>
        <Tags>
            <Tag name="Any Statement"/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool is_mutually_exclusive()</Name>
        <Langs>C#, Java</Langs>
        <Desc>
Checks to see if a declaration is within a lock or synchronized function or block.
        </Desc>
        <Examples>
            <Example desc="Find all if statements that are within a mutually exclusive section of code" xpath="//src:if[src:is_mutually_exclusive()]"/>
        </Examples>
        <Tags>
            <Tag name="Any Statement"/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool is_static()</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>Checks if something was declared static.</Desc>
        <Examples>
            <Example desc="Find all static variable declaration" xpath="//src:decl_stmt[src:is_static()]"/>
        </Examples>
        <Tags>
            <Tag name="src:decl_stmt" />
            <Tag name="src:function_decl" />
            <Tag name="src:function" />
            <Tag name="src:event" />
            <Tag name="src:property" />
            <Tag name="src:class" />
            <Tag name="src:struct" />
            <Tag name="src:constructor" />
            <Tag name="src:constructor_decl" />
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool block_is_static()</Name>
        <Langs>Java</Langs>
        <Desc>Checks if a block is a static constructor block.</Desc>
        <Examples>
            <Example desc="Find all static constructor block" xpath="//src:block[src:block_is_static()]"/>
        </Examples>
        <Tags>
            <Tag name="src:block" />
        </Tags>
    </ExtFunc>
    
    
    <ExtFunc>
        <Name>bool is_abstract() or bool is_pure_virtual()</Name>
        <Langs>C++, C#, Java</Langs>
        <Desc>
Tests to see if a function or class is abstract or not.
        </Desc>
        <Examples>
            <Example desc="Find all abstract classes" xpath="//src:class[src:is_pure_virtual()]"/>
        </Examples>
        <Tags>
            <Tag name="src:function_decl" />
            <Tag name="src:class" />
            <Tag name="src:struct" />
            <Tag name="src:destructor_decl" />
            <Tag name="src:property" />
            <Tag name="src:event" />
            <Tag name="src:function" />
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool has_default_impl()</Name>
        <Langs>C++, Java</Langs>
        <Desc>
In C++, this function checks if the function was specified as = default.
&lt;br/&gt;
&lt;br/&gt;
In Java, this function checks to see if a default implementation was given to a function
that is part of an interface.

        </Desc>
        <Examples>
            <Example desc="Find all default functions and constructors in C++" xpath="(//src:constructor_decl | //src:function_decl)[src:has_default_impl()]"/>
            <Example desc="Find all default functions in Java" xpath="//src:function[src:has_default_impl()]"/>
        </Examples>
        <Tags>
            <Tag name="src:function_decl" />
            <Tag name="src:constructor_decl" />
            <Tag name="src:destructor_decl" />
            <Tag name="src:function" />
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool has_default_property_value()</Name>
        <Langs>Java</Langs>
        <Desc>
Used within the definition of a Java annotation. This function checks to see if
the annotation's property has a default value.
        </Desc>
        <Examples>
            <Example desc="Find all of the annotation properties with default values" xpath="//src:annotation_defn/src:block/src:function_decl[src:has_default_property_value()]"/>
        </Examples>
        <Tags>
            <Tag name="src:function_decl" />
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool is_synchronized()</Name>
        <Langs>Java</Langs>
        <Desc>
Checks to see if a function or function_declaration is specified as synchronized.
        </Desc>
        <Examples>
            <Example desc="Find all synchronized functions" xpath="//src:function[src:is_synchronized()]"/>
        </Examples>
        <Tags>
            <Tag name="src:function_decl" />
            <Tag name="src:function" />
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool is_transient()</Name>
        <Langs>Java</Langs>
        <Desc>
Checks to see if a declaration was declared transient.
        </Desc>
        <Examples>
            <Example desc="Find all transient member variables" xpath="//src:class/src:block/src:decl_stmt[src:is_transient()]"/>
        </Examples>
        <Tags>
            <Tag name="src:decl_stmt" />
            <Tag name="src:decl" />
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool is_native()</Name>
        <Langs>C#, Java</Langs>
        <Desc>
In C#, this function returns true if the function declaration contains an attribute
that contains a DLLImport.
&lt;br/&gt;
&lt;br/&gt;
In Java, this function indicates that a function was specified using the native
specifier.
        </Desc>
        <Examples>
            <Example desc="Find all native functions" xpath="//src:function[src:is_native()]"/>
        </Examples>
        <Tags>
            <Tag name="src:function_decl" />
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool is_private()</Name>
        <Langs>C++, C#, Java</Langs>
        <Desc>
Checks if a declaration of any type is within a private scope. This function also
follows default accessibility rules that are not explicit within the source code.  
Doesn't work with inheritance.
        </Desc>
        <Examples>
            <Example desc="Find all private member variables of a class (C# and Java)" xpath="//src:class/src:block/src:decl_stmt[src:is_private()]"/>
            <Example desc="Find all private member classes (C++)" xpath="//src:class[src:is_private()]"/>
        </Examples>
        <Tags>
            <Tag name="src:function_decl" />
            <Tag name="src:function" />
            <Tag name="src:constructor" />
            <Tag name="src:constructor_decl" />
            <Tag name="src:destructor" />
            <Tag name="src:destructor_decl" />
            <Tag name="src:decl_stmt" />
            <Tag name="src:class" />
            <Tag name="src:class_decl" />
            <Tag name="src:struct" />
            <Tag name="src:struct_decl" />
            <Tag name="src:enum" />
            <Tag name="src:property" />
            <Tag name="src:event" />
            <Tag name="src:using" />
            <Tag name="src:typedef" />
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool is_protected()</Name>
        <Langs>C++, C#, Java</Langs>
        <Desc>
Checks if a declaration of any type is within a protected scope. Doesn't work with
inheritance.
        </Desc>
        <Examples>
            <Example desc="Find all protected member variables of a class (C# and Java)" xpath="//src:class/src:block/src:decl_stmt[src:is_protected()]"/>
            <Example desc="Find all protected member classes (C++)" xpath="//src:class[src:is_protected()]"/>
        </Examples>
        <Tags>
            <Tag name="src:function_decl" />
            <Tag name="src:function" />
            <Tag name="src:constructor" />
            <Tag name="src:constructor_decl" />
            <Tag name="src:destructor" />
            <Tag name="src:destructor_decl" />
            <Tag name="src:decl_stmt" />
            <Tag name="src:class" />
            <Tag name="src:class_decl" />
            <Tag name="src:struct" />
            <Tag name="src:struct_decl" />
            <Tag name="src:enum" />
            <Tag name="src:property" />
            <Tag name="src:event" />
            <Tag name="src:using" />
            <Tag name="src:typedef" />
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool is_public()</Name>
        <Langs>C++, C#, Java</Langs>
        <Desc>
Checks if a declaration of any type is within a public scope. This function also
follows default accessibility rules that are not explicit within the source code.
Doesn't work with inheritance.
        </Desc>
        <Examples>
            <Example desc="Find all public member variables of a class (C# and Java)" xpath="//src:class/src:block/src:decl_stmt[src:is_public()]"/>
            <Example desc="Find all public member classes (C++)" xpath="//src:class[src:is_public()]"/>
        </Examples>
        <Tags>
            <Tag name="src:function_decl" />
            <Tag name="src:function" />
            <Tag name="src:constructor" />
            <Tag name="src:constructor_decl" />
            <Tag name="src:destructor" />
            <Tag name="src:destructor_decl" />
            <Tag name="src:decl_stmt" />
            <Tag name="src:class" />
            <Tag name="src:class_decl" />
            <Tag name="src:struct" />
            <Tag name="src:struct_decl" />
            <Tag name="src:enum" />
            <Tag name="src:property" />
            <Tag name="src:event" />
            <Tag name="src:using" />
            <Tag name="src:typedef" />
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool is_internal()</Name>
        <Langs>C#</Langs>
        <Desc>
Checks to see if something was declared to be internal or is internal by default.
Doesn't work with inheritance.
        </Desc>
        <Examples>
            <Example desc="Find all internal classes" xpath="//src:class[src:is_internal()]"/>
        </Examples>
        <Tags>
            <Tag name="src:function_decl" />
            <Tag name="src:function" />
            <Tag name="src:constructor" />
            <Tag name="src:constructor_decl" />
            <Tag name="src:destructor" />
            <Tag name="src:destructor_decl" />
            <Tag name="src:decl_stmt" />
            <Tag name="src:class" />
            <Tag name="src:class_decl" />
            <Tag name="src:struct" />
            <Tag name="src:struct_decl" />
            <Tag name="src:enum" />
            <Tag name="src:property" />
            <Tag name="src:event" />
            <Tag name="src:using" />
            <Tag name="src:typedef" />
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool is_volatile()</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>
Check to see if a function or variable is declared volatile.
        </Desc>
        <Examples>
            <Example desc="Find all volatile functions" xpath="//src:function[src:is_volatile()]"/>
        </Examples>
        <Tags>
            <Tag name="function_decl" />
            <Tag name="function" />
            <Tag name="decl_stmt" />
            <Tag name="decl" />
            <Tag name="typedef" />
            <Tag name="type" />
            <Tag name="using" />
            <Tag name="asm"/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool is_const()</Name>
        <Langs>C, C++, C#</Langs>
        <Desc>
Checks to see if a function or variable was declared const.
        </Desc>
        <Examples>
            <Example desc="Find all const formal parameters" xpath="//src:param[src:is_const()]"/>
        </Examples>
        <Tags>
            <Tag name="function_decl" />
            <Tag name="function" />
            <Tag name="decl_stmt" />
            <Tag name="decl" />
            <Tag name="typedef" />
            <Tag name="type"/>
            <Tag name="param"/>
            <Tag name="using"/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool is_inline()</Name>
        <Langs>C, C++</Langs>
        <Desc>
Checks to see if a function or namespace was declared inline.
        </Desc>
        <Examples>
            <Example desc="Find all inline functions" xpath="//src:function[src:is_inline()]"/>
        </Examples>
        <Tags>
            <Tag name="src:function_decl" />
            <Tag name="src:function" />
            <Tag name="src:namespace" />
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool is_restrict()</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>
Checks to see if a variable or parameter was declared with the restrict specifier.
        </Desc>
        <Examples>
            <Example desc="Find all restrict parameters" xpath="//src:param[src:is_restrict()]"/>
        </Examples>
        <Tags>
            <Tag name="src:decl_stmt" />
            <Tag name="src:decl" />
            <Tag name="src:param" />
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool is_register()</Name>
        <Langs>C, C++</Langs>
        <Desc>
Checks to see if a variable was declared with the register specifier.
        </Desc>
        <Examples>
            <Example desc="Find all variables declared with the register specifier" xpath="//src:decl_stmt[src:is_register()]"/>
        </Examples>
        <Tags>
            <Tag name="src:decl_stmt" />
            <Tag name="src:decl" />
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool is_mutable()</Name>
        <Langs>C++</Langs>
        <Desc>
Checks to see if a variable or lambda was declared mutable.
        </Desc>
        <Examples>
            <Example desc="Find all mutable variables" xpath=".//src:decl_stmt[src:is_mutable()]"/>
        </Examples>
        <Tags>
            <Tag name="src:decl_stmt" />
            <Tag name="src:decl" />
            <Tag name="src:lambda" />
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool is_thread_local()</Name>
        <Langs>C, C++</Langs>
        <Desc>
Checks to see if a variable was declared thread_local or _Thread_local.
        </Desc>
        <Examples>
            <Example desc="" xpath=""/>
        </Examples>
        <Tags>
            <Tag name="src:decl_stmt" />
            <Tag name="src:decl" />
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool is_constexpr()</Name>
        <Langs>C++</Langs>
        <Desc>
Checks to see if a function was declared to be constexpr
        </Desc>
        <Examples>
            <Example desc="Find all constexpr functions" xpath="//src:function[src:is_constexpr()]"/>
        </Examples>
        <Tags>
            <Tag name="src:function" />
            <Tag name="src:function_decl" />
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool is_override()</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>
Checks to see if a function is specified as being override, this means is declared
as override.
        </Desc>
        <Examples>
            <Example desc="" xpath=""/>
        </Examples>
        <Tags>
            <Tag name="src:function" />
            <Tag name="src:function_decl" />
            <Tag name="src:event" />
            <Tag name="src:property" />
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool is_virtual()</Name>
        <Langs>C++, C#, Java</Langs>
        <Desc>
Checks to see if the function was specified as virtual in any way, that means
that it specifies override, sealed or final.
        </Desc>
        <Examples>
            <Example desc="Find all virtual functions." xpath="//src:function_decl[src:is_virtual()]"/>
        </Examples>
        <Tags>
            <Tag name="src:function" />
            <Tag name="src:function_decl" />
            <Tag name="src:destructor_decl" />
            <Tag name="src:destructor" />
            <Tag name="src:event" />
            <Tag name="src:property" />
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool is_overridable()</Name>
        <Langs>C++, C#, Java</Langs>
        <Desc>
This checks to see if a function is specified virtual or override but not final or sealed
and also checks to make sure that the function is not within a sealed or final class.
        </Desc>
        <Examples>
            <Example desc="Find all overridable functions." xpath="//src:function[src:is_overridable()]"/>
        </Examples>
        <Tags>
            <Tag name="src:function" />
            <Tag name="src:function_decl" />
            <Tag name="src:event" />
            <Tag name="src:property" />
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool has_auto_specifier()</Name>
        <Langs>C, C++</Langs>
        <Desc>
Checks to see if a variable declaration uses the auto specifier (that doesn't
mean the auto type in C++).
        </Desc>
        <Examples>
            <Example desc="Find all variables declared auto" xpath="//src:decl_stmt]src:has_auto_specifier()]"/>
        </Examples>
        <Tags>
            <Tag name="src:decl_stmt" />
            <Tag name="src:decl" />
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool is_extern()</Name>
        <Langs>C, C++</Langs>
        <Desc>
Checks to see if the current block,function or variable is declared extern.
        </Desc>
        <Examples>
            <Example desc="Find all blocks that are extern blocks" xpath="//src:block[src:is_extern_block()]"/>
        </Examples>
        <Tags>
            <Tag name="src:block" />
            <Tag name="src:decl_stmt" />
            <Tag name="src:function_decl" />
            <Tag name="src:function" />
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool has_deduced_type()</Name>
        <Langs>C++, C#</Langs>
        <Desc>
Checks if the type used for a declaration or in C++ also a function is auto.
        </Desc>
        <Examples>
            <Example desc="Find all variable declarations that have a deduced type" xpath="//src:decl_stmt[src:has_deduced_type()]"/>
        </Examples>
        <Tags>
            <Tag name="src:decl_stmt" />
            <Tag name="src:decl" />
            <Tag name="src:function_decl" />
            <Tag name="src:function" />
            <Tag name="src:lambda" />
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool is_deleted()</Name>
        <Langs>C++</Langs>
        <Desc>
Checks if a function, constructor or destructor was marked as deleted.
        </Desc>
        <Examples>
            <Example desc="Find all deleted functions" xpath="//src:function[src:is_deleted()]"/>
        </Examples>
        <Tags>
            <Tag name="src:constructor_decl" />
            <Tag name="src:destructor_decl" />
            <Tag name="src:function_decl" />
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool is_explicit()</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>
C++&lt;br/&gt;
    - works on constructors and operator declarations&lt;br/&gt;
    - checks for the use of the explicit specifier.&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
C#&lt;br/&gt;
    - works on operator declarations&lt;br/&gt;
    - this checks for the use of the explicit specifier.
        </Desc>
        <Examples>
            <Example desc="" xpath=""/>
        </Examples>
        <Tags>
            <Tag name="src:constructor_decl" />
            <Tag name="src:constructor" />
            <Tag name="src:function_decl" />
            <Tag name="src:function" />
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>is_bitfield</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>

        </Desc>
        <Examples>
            <Example desc="" xpath=""/>
        </Examples>
        <Tags>
            <Tag name=""/>
        </Tags>
    </ExtFunc>

    <ExtFunc>
        <Name>is_member</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>

        </Desc>
        <Examples>
            <Example desc="" xpath=""/>
        </Examples>
        <Tags>
            <Tag name=""/>
        </Tags>
    </ExtFunc>

    <ExtFunc>
        <Name>is_default</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>

        </Desc>
        <Examples>
            <Example desc="" xpath=""/>
        </Examples>
        <Tags>
            <Tag name=""/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>is_pointer</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>

        </Desc>
        <Examples>
            <Example desc="" xpath=""/>
        </Examples>
        <Tags>
            <Tag name=""/>
        </Tags>
    </ExtFunc>

    <ExtFunc>
        <Name>is_parameter_pack</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>

        </Desc>
        <Examples>
            <Example desc="" xpath=""/>
        </Examples>
        <Tags>
            <Tag name=""/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>is_generic</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>

        </Desc>
        <Examples>
            <Example desc="" xpath=""/>
        </Examples>
        <Tags>
            <Tag name=""/>
        </Tags>
    </ExtFunc>

    <ExtFunc>
        <Name>is_aligned</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>

        </Desc>
        <Examples>
            <Example desc="" xpath=""/>
        </Examples>
        <Tags>
            <Tag name=""/>
        </Tags>
    </ExtFunc>

    <ExtFunc>
        <Name>is_noexcept</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>

        </Desc>
        <Examples>
            <Example desc="" xpath=""/>
        </Examples>
        <Tags>
            <Tag name=""/>
        </Tags>
    </ExtFunc>

    <ExtFunc>
        <Name>is_reference</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>

        </Desc>
        <Examples>
            <Example desc="" xpath=""/>
        </Examples>
        <Tags>
            <Tag name=""/>
        </Tags>
    </ExtFunc>

    <ExtFunc>
        <Name>is_rvalue_reference</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>

        </Desc>
        <Examples>
            <Example desc="" xpath=""/>
        </Examples>
        <Tags>
            <Tag name=""/>
        </Tags>
    </ExtFunc>

    <ExtFunc>
        <Name>is_noreturn</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>

        </Desc>
        <Examples>
            <Example desc="" xpath=""/>
        </Examples>
        <Tags>
            <Tag name=""/>
        </Tags>
    </ExtFunc>

    <ExtFunc>
        <Name>is_readonly</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>

        </Desc>
        <Examples>
            <Example desc="" xpath=""/>
        </Examples>
        <Tags>
            <Tag name=""/>
        </Tags>
    </ExtFunc>

    <ExtFunc>
        <Name>is_protected_internal</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>

        </Desc>
        <Examples>
            <Example desc="" xpath=""/>
        </Examples>
        <Tags>
            <Tag name=""/>
        </Tags>
    </ExtFunc>

    <ExtFunc>
        <Name>bool is_out_param() OR bool is_out_argument()</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>

        </Desc>
        <Examples>
            <Example desc="" xpath=""/>
        </Examples>
        <Tags>
            <Tag name=""/>
        </Tags>
    </ExtFunc>

    <ExtFunc>
        <Name>is_variadic</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>

        </Desc>
        <Examples>
            <Example desc="" xpath=""/>
        </Examples>
        <Tags>
            <Tag name=""/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>is_new_override</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>

        </Desc>
        <Examples>
            <Example desc="" xpath=""/>
        </Examples>
        <Tags>
            <Tag name=""/>
        </Tags>
    </ExtFunc>

    <ExtFunc>
        <Name>is_sealed</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>

        </Desc>
        <Examples>
            <Example desc="" xpath=""/>
        </Examples>
        <Tags>
            <Tag name=""/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>is_async</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>

        </Desc>
        <Examples>
            <Example desc="" xpath=""/>
        </Examples>
        <Tags>
            <Tag name=""/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>is_implicit</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>

        </Desc>
        <Examples>
            <Example desc="" xpath=""/>
        </Examples>
        <Tags>
            <Tag name=""/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>is_yield</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>

        </Desc>
        <Examples>
            <Example desc="" xpath=""/>
        </Examples>
        <Tags>
            <Tag name=""/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>is_extension_method</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>

        </Desc>
        <Examples>
            <Example desc="" xpath=""/>
        </Examples>
        <Tags>
            <Tag name=""/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>is_main</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>

        </Desc>
        <Examples>
            <Example desc="" xpath=""/>
        </Examples>
        <Tags>
            <Tag name=""/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>is_extern_c</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>

        </Desc>
        <Examples>
            <Example desc="" xpath=""/>
        </Examples>
        <Tags>
            <Tag name=""/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>is_global</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>

        </Desc>
        <Examples>
            <Example desc="" xpath=""/>
        </Examples>
        <Tags>
            <Tag name=""/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>is_operator</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>

        </Desc>
        <Examples>
            <Example desc="" xpath=""/>
        </Examples>
        <Tags>
            <Tag name=""/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>has_ref_qualifier</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>

        </Desc>
        <Examples>
            <Example desc="" xpath=""/>
        </Examples>
        <Tags>
            <Tag name=""/>
        </Tags>
    </ExtFunc>

    <ExtFunc>
        <Name>has_trailing_return_type</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>

        </Desc>
        <Examples>
            <Example desc="" xpath=""/>
        </Examples>
        <Tags>
            <Tag name=""/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>is_empty_return</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>

        </Desc>
        <Examples>
            <Example desc="" xpath=""/>
        </Examples>
        <Tags>
            <Tag name=""/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool has_attributes() OR bool has_annotations()</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>

        </Desc>
        <Examples>
            <Example desc="" xpath=""/>
        </Examples>
        <Tags>
            <Tag name=""/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>has_function_try</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>

        </Desc>
        <Examples>
            <Example desc="" xpath=""/>
        </Examples>
        <Tags>
            <Tag name=""/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>is_KnR_C</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>

        </Desc>
        <Examples>
            <Example desc="" xpath=""/>
        </Examples>
        <Tags>
            <Tag name=""/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool is_template_parameter() OR bool is_generic_parameter()</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>

        </Desc>
        <Examples>
            <Example desc="" xpath=""/>
        </Examples>
        <Tags>
            <Tag name=""/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>is_template_parameter_pack</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>

        </Desc>
        <Examples>
            <Example desc="" xpath=""/>
        </Examples>
        <Tags>
            <Tag name=""/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>is_template_template_parameter</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>

        </Desc>
        <Examples>
            <Example desc="" xpath=""/>
        </Examples>
        <Tags>
            <Tag name=""/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>is_template</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>

        </Desc>
        <Examples>
            <Example desc="" xpath=""/>
        </Examples>
        <Tags>
            <Tag name=""/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>is_default_parameter</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>

        </Desc>
        <Examples>
            <Example desc="" xpath=""/>
        </Examples>
        <Tags>
            <Tag name=""/>
        </Tags>
    </ExtFunc>

    <ExtFunc>
        <Name>is_in_param</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>

        </Desc>
        <Examples>
            <Example desc="" xpath=""/>
        </Examples>
        <Tags>
            <Tag name=""/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>is_constrained</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>

        </Desc>
        <Examples>
            <Example desc="" xpath=""/>
        </Examples>
        <Tags>
            <Tag name=""/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>is_bound</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>

        </Desc>
        <Examples>
            <Example desc="" xpath=""/>
        </Examples>
        <Tags>
            <Tag name=""/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>is_unbound</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>

        </Desc>
        <Examples>
            <Example desc="" xpath=""/>
        </Examples>
        <Tags>
            <Tag name=""/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>is_upper_bound</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>

        </Desc>
        <Examples>
            <Example desc="" xpath=""/>
        </Examples>
        <Tags>
            <Tag name=""/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>is_wildcard</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>

        </Desc>
        <Examples>
            <Example desc="" xpath=""/>
        </Examples>
        <Tags>
            <Tag name=""/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>is_lower_bound</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>

        </Desc>
        <Examples>
            <Example desc="" xpath=""/>
        </Examples>
        <Tags>
            <Tag name=""/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>is_anonymous</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>

        </Desc>
        <Examples>
            <Example desc="" xpath=""/>
        </Examples>
        <Tags>
            <Tag name=""/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>enum_specifies_integer_type</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>

        </Desc>
        <Examples>
            <Example desc="" xpath=""/>
        </Examples>
        <Tags>
            <Tag name=""/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>is_complete</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>

        </Desc>
        <Examples>
            <Example desc="" xpath=""/>
        </Examples>
        <Tags>
            <Tag name=""/>
        </Tags>
    </ExtFunc>

    <ExtFunc>
        <Name>enum_is_scoped</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>

        </Desc>
        <Examples>
            <Example desc="" xpath=""/>
        </Examples>
        <Tags>
            <Tag name=""/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>is_using_access_decl</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>

        </Desc>
        <Examples>
            <Example desc="" xpath=""/>
        </Examples>
        <Tags>
            <Tag name=""/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>is_type_alias</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>

        </Desc>
        <Examples>
            <Example desc="" xpath=""/>
        </Examples>
        <Tags>
            <Tag name=""/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>is_using_namespace</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>

        </Desc>
        <Examples>
            <Example desc="" xpath=""/>
        </Examples>
        <Tags>
            <Tag name=""/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>has_initializers</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>

        </Desc>
        <Examples>
            <Example desc="" xpath=""/>
        </Examples>
        <Tags>
            <Tag name=""/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>is_converting_constructor</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>

        </Desc>
        <Examples>
            <Example desc="" xpath=""/>
        </Examples>
        <Tags>
            <Tag name=""/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>has_local_storage</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>

        </Desc>
        <Examples>
            <Example desc="" xpath=""/>
        </Examples>
        <Tags>
            <Tag name=""/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>is_scoped_to_file</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>

        </Desc>
        <Examples>
            <Example desc="" xpath=""/>
        </Examples>
        <Tags>
            <Tag name=""/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>is_single_decl</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>

        </Desc>
        <Examples>
            <Example desc="" xpath=""/>
        </Examples>
        <Tags>
            <Tag name=""/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>is_multi_decl</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>

        </Desc>
        <Examples>
            <Example desc="" xpath=""/>
        </Examples>
        <Tags>
            <Tag name=""/>
        </Tags>
    </ExtFunc>

    <ExtFunc>
        <Name>is_array</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>

        </Desc>
        <Examples>
            <Example desc="" xpath=""/>
        </Examples>
        <Tags>
            <Tag name=""/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>is_event_function</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>

        </Desc>
        <Examples>
            <Example desc="" xpath=""/>
        </Examples>
        <Tags>
            <Tag name=""/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>is_property_function</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>

        </Desc>
        <Examples>
            <Example desc="" xpath=""/>
        </Examples>
        <Tags>
            <Tag name=""/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>defined_event_function</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>

        </Desc>
        <Examples>
            <Example desc="" xpath=""/>
        </Examples>
        <Tags>
            <Tag name=""/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>has_add</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>

        </Desc>
        <Examples>
            <Example desc="" xpath=""/>
        </Examples>
        <Tags>
            <Tag name=""/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>has_remove</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>

        </Desc>
        <Examples>
            <Example desc="" xpath=""/>
        </Examples>
        <Tags>
            <Tag name=""/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>defined_property_function</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>

        </Desc>
        <Examples>
            <Example desc="" xpath=""/>
        </Examples>
        <Tags>
            <Tag name=""/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>has_get</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>

        </Desc>
        <Examples>
            <Example desc="" xpath=""/>
        </Examples>
        <Tags>
            <Tag name=""/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>has_set</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>

        </Desc>
        <Examples>
            <Example desc="" xpath=""/>
        </Examples>
        <Tags>
            <Tag name=""/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>is_indexer</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>

        </Desc>
        <Examples>
            <Example desc="" xpath=""/>
        </Examples>
        <Tags>
            <Tag name=""/>
        </Tags>
    </ExtFunc>

    <ExtFunc>
        <Name>is_closure</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>

        </Desc>
        <Examples>
            <Example desc="" xpath=""/>
        </Examples>
        <Tags>
            <Tag name=""/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>is_capture_all_by_value</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>

        </Desc>
        <Examples>
            <Example desc="" xpath=""/>
        </Examples>
        <Tags>
            <Tag name=""/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>is_capture_all_by_reference</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>

        </Desc>
        <Examples>
            <Example desc="" xpath=""/>
        </Examples>
        <Tags>
            <Tag name=""/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>captures_named_variable</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>

        </Desc>
        <Examples>
            <Example desc="" xpath=""/>
        </Examples>
        <Tags>
            <Tag name=""/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>is_function_try</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>

        </Desc>
        <Examples>
            <Example desc="" xpath=""/>
        </Examples>
        <Tags>
            <Tag name=""/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>has_finally</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>

        </Desc>
        <Examples>
            <Example desc="" xpath=""/>
        </Examples>
        <Tags>
            <Tag name=""/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>is_resource_try</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>

        </Desc>
        <Examples>
            <Example desc="" xpath=""/>
        </Examples>
        <Tags>
            <Tag name=""/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>has_indexing_expr</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>

        </Desc>
        <Examples>
            <Example desc="" xpath=""/>
        </Examples>
        <Tags>
            <Tag name=""/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>has_call</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>

        </Desc>
        <Examples>
            <Example desc="" xpath=""/>
        </Examples>
        <Tags>
            <Tag name=""/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>is_member_operator</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>

        </Desc>
        <Examples>
            <Example desc="" xpath=""/>
        </Examples>
        <Tags>
            <Tag name=""/>
        </Tags>
    </ExtFunc>

    <ExtFunc>
        <Name>is_global_scope_operator</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>

        </Desc>
        <Examples>
            <Example desc="" xpath=""/>
        </Examples>
        <Tags>
            <Tag name=""/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>is_pointer_member_operator</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>

        </Desc>
        <Examples>
            <Example desc="" xpath=""/>
        </Examples>
        <Tags>
            <Tag name=""/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>is_bitwise_operator</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>

        </Desc>
        <Examples>
            <Example desc="" xpath=""/>
        </Examples>
        <Tags>
            <Tag name=""/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>is_arithmetic_operator</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>

        </Desc>
        <Examples>
            <Example desc="" xpath=""/>
        </Examples>
        <Tags>
            <Tag name=""/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>is_multiplicative_operator</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>

        </Desc>
        <Examples>
            <Example desc="" xpath=""/>
        </Examples>
        <Tags>
            <Tag name=""/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>is_divisible_operator</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>

        </Desc>
        <Examples>
            <Example desc="" xpath=""/>
        </Examples>
        <Tags>
            <Tag name=""/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>is_additive_operator</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>

        </Desc>
        <Examples>
            <Example desc="" xpath=""/>
        </Examples>
        <Tags>
            <Tag name=""/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>is_subtraction_operator</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>

        </Desc>
        <Examples>
            <Example desc="" xpath=""/>
        </Examples>
        <Tags>
            <Tag name=""/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>is_shift_operator</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>

        </Desc>
        <Examples>
            <Example desc="" xpath=""/>
        </Examples>
        <Tags>
            <Tag name=""/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>is_relational_operator</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>

        </Desc>
        <Examples>
            <Example desc="" xpath=""/>
        </Examples>
        <Tags>
            <Tag name=""/>
        </Tags>
    </ExtFunc>

    <ExtFunc>
        <Name>is_equality_operator</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>

        </Desc>
        <Examples>
            <Example desc="" xpath=""/>
        </Examples>
        <Tags>
            <Tag name=""/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>is_logical_operator</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>

        </Desc>
        <Examples>
            <Example desc="" xpath=""/>
        </Examples>
        <Tags>
            <Tag name=""/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>is_assignment_operator</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>

        </Desc>
        <Examples>
            <Example desc="" xpath=""/>
        </Examples>
        <Tags>
            <Tag name=""/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>is_compound_assignment</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>

        </Desc>
        <Examples>
            <Example desc="" xpath=""/>
        </Examples>
        <Tags>
            <Tag name=""/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>is_shift_assign_operator</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>

        </Desc>
        <Examples>
            <Example desc="" xpath=""/>
        </Examples>
        <Tags>
            <Tag name=""/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>is_unsigned_shift_operator</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>

        </Desc>
        <Examples>
            <Example desc="" xpath=""/>
        </Examples>
        <Tags>
            <Tag name=""/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>is_ranged_for</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>

        </Desc>
        <Examples>
            <Example desc="" xpath=""/>
        </Examples>
        <Tags>
            <Tag name=""/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>has_default_case</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>

        </Desc>
        <Examples>
            <Example desc="" xpath=""/>
        </Examples>
        <Tags>
            <Tag name=""/>
        </Tags>
    </ExtFunc>

    <ExtFunc>
        <Name>is_continue_to_label</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>

        </Desc>
        <Examples>
            <Example desc="" xpath=""/>
        </Examples>
        <Tags>
            <Tag name=""/>
        </Tags>
    </ExtFunc>

    <ExtFunc>
        <Name>is_break_to_label</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>

        </Desc>
        <Examples>
            <Example desc="" xpath=""/>
        </Examples>
        <Tags>
            <Tag name=""/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>is_goto_case</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>

        </Desc>
        <Examples>
            <Example desc="" xpath=""/>
        </Examples>
        <Tags>
            <Tag name=""/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>is_rethrow</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>

        </Desc>
        <Examples>
            <Example desc="" xpath=""/>
        </Examples>
        <Tags>
            <Tag name=""/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>is_nullable</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>

        </Desc>
        <Examples>
            <Example desc="" xpath=""/>
        </Examples>
        <Tags>
            <Tag name=""/>
        </Tags>
    </ExtFunc>

    <ExtFunc>
        <Name>is_type_definition</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>

        </Desc>
        <Examples>
            <Example desc="" xpath=""/>
        </Examples>
        <Tags>
            <Tag name=""/>
        </Tags>
    </ExtFunc>

    <ExtFunc>
        <Name>is_class</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>

        </Desc>
        <Examples>
            <Example desc="" xpath=""/>
        </Examples>
        <Tags>
            <Tag name=""/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>is_enum</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>

        </Desc>
        <Examples>
            <Example desc="" xpath=""/>
        </Examples>
        <Tags>
            <Tag name=""/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>is_enum_class</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>

        </Desc>
        <Examples>
            <Example desc="" xpath=""/>
        </Examples>
        <Tags>
            <Tag name=""/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>is_struct</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>

        </Desc>
        <Examples>
            <Example desc="" xpath=""/>
        </Examples>
        <Tags>
            <Tag name=""/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>is_union</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>

        </Desc>
        <Examples>
            <Example desc="" xpath=""/>
        </Examples>
        <Tags>
            <Tag name=""/>
        </Tags>
    </ExtFunc>

    <ExtFunc>
        <Name>is_partial</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>

        </Desc>
        <Examples>
            <Example desc="" xpath=""/>
        </Examples>
        <Tags>
            <Tag name=""/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>is_delegate_type</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>

        </Desc>
        <Examples>
            <Example desc="" xpath=""/>
        </Examples>
        <Tags>
            <Tag name=""/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>is_interface</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>

        </Desc>
        <Examples>
            <Example desc="" xpath=""/>
        </Examples>
        <Tags>
            <Tag name=""/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>is_annotation</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>

        </Desc>
        <Examples>
            <Example desc="" xpath=""/>
        </Examples>
        <Tags>
            <Tag name=""/>
        </Tags>
    </ExtFunc>

</XPathExtensionFunctions>
