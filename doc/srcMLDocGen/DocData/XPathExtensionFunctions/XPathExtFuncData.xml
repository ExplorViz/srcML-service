<XPathExtensionFunctions outputFile="XPathExtFunc.html">
    <ExtFunc>
        <Name>bool is_static()</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>Checks if something was declared static.</Desc>
        <Examples>
            <Example desc="Find all static variable declaration" xpath="//src:decl_stmt[src:is_static()]"/>
        </Examples>
        <Tags>
            <Tag name="src:decl_stmt" />
            <Tag name="src:function_decl" />
            <Tag name="src:function" />
            <Tag name="src:event" />
            <Tag name="src:property" />
            <Tag name="src:class" />
            <Tag name="src:struct" />
            <Tag name="src:constructor" />
            <Tag name="src:constructor_decl" />
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool has_return()</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>
Checks all children and all subsequent children for a return
statement. This is scope respecting, in that it doesn't search within
closures functions or local classes.
&lt;br/&gt;
&lt;br/&gt;
&lt;code&gt;has_return&lt;/code&gt; can be called on almost anything, but the typical case 
is using it on statements or functions. The behavior it has
when called on non-complex statements (those that don't combine multiple
statements using a block such as return, throw, expr_stmt and decl_stmt)
is to search those statements for a return including the sub elements 
excluding lambdas and delegates, This means that because only the sub
elements are searched that a return doesn't have a return (because it is one).
        </Desc>
        <Examples>
            <Example desc="Find all constructors that have a return" xpath="//src:constructor[src:has_return()]"/>
            <Example desc="Find all classes that have a constructor that calls return (C#)" xpath="//src:class[src:constructor[src:has_return()]]"/>
        </Examples>
        <Tags>
            <Tag name="block"/>
            <Tag name="function"/>
            <Tag name="constructor"/>
            <Tag name="destructor"/>
            <Tag name="while"/>
            <Tag name="if"/>
            <Tag name="then"/>
            <Tag name="elseif"/>
            <Tag name="else"/>
            <Tag name="try"/>
            <Tag name="catch"/>
            <Tag name="finally"/>
            <Tag name="do"/>
            <Tag name="for"/>
            <Tag name="foreach"/>
            <Tag name="switch"/>
            <Tag name="lambda"/>
            <Tag name="delegate"/>
            <Tag name="using_stmt"/>
            <Tag name="fixed"/>
            <Tag name="lock"/>
            <Tag name="synchronized"/>
            <Tag name="unsafe"/>
            <Tag name="static"/>
            <Tag name="checked"/>
            <Tag name="unchecked"/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool has_throw()</Name>
        <Langs>C++, C#, Java</Langs>
        <Desc>
Checks all children and all subsequent children for a throw statement
statement. This is scope respecting, in that it doesn't search within
closures functions, local classes, catches or finallies.
&lt;br/&gt;
&lt;br/&gt;
&lt;code&gt;has_throw&lt;/code&gt; behaves in a similar manner to &lt;code&gt;has_return&lt;/code&gt;
accept that it searches for throw statements instead of return statements, and
it the scope it follows omits catch and finally. The &lt;code&gt;has_throw&lt;/code&gt;
extension function can be called directly on either a catch or finally and it will
search all children in the same scope respecting manner looking for a throw statement.
        </Desc>
        <Examples>
            <Example desc="Find all constructors that have a throw" xpath="//src:constructor[src:has_throw()]"/>
            <Example desc="Find all classes that have a destructor that contains a throw statement (C++)" xpath="//src:class[node()/src:destructor[src:has_throw()]]"/>
        </Examples>
        <Tags>
            <Tag name="block"/>
            <Tag name="function"/>
            <Tag name="constructor"/>
            <Tag name="destructor"/>
            <Tag name="while"/>
            <Tag name="if"/>
            <Tag name="then"/>
            <Tag name="elseif"/>
            <Tag name="else"/>
            <Tag name="try"/>
            <Tag name="catch"/>
            <Tag name="finally"/>
            <Tag name="do"/>
            <Tag name="for"/>
            <Tag name="foreach"/>
            <Tag name="switch"/>
            <Tag name="lambda"/>
            <Tag name="delegate"/>
            <Tag name="using_stmt"/>
            <Tag name="fixed"/>
            <Tag name="lock"/>
            <Tag name="synchronized"/>
            <Tag name="unsafe"/>
            <Tag name="static"/>
            <Tag name="checked"/>
            <Tag name="unchecked"/>
        </Tags>
    </ExtFunc>

</XPathExtensionFunctions>
