<DocConfig title="C# srcML" lang="C#" outputFile="cs_srcML.html">

    <Category title="Statements">
        <DocEntry title="if statement" shortTitle="if">
            <Elements>
                <Element name="if" />
                <Subelement name="condition" />
                <Subelement name="then" />
                <Subelement name="else" />
                <Subelement name="elseif" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:if">
                    <Desc>Find all if statements</Desc>
                </XPath>
                <XPath path="//src:if/src:condition">
                    <Desc>Find all conditions of all if statements</Desc>
                </XPath>
                <XPath path="//src:if/src:then">
                    <Desc>Find all then statements</Desc>
                </XPath>
                <XPath path="//src:if/src:else">
                    <Desc>Find all else statements</Desc>
                </XPath>
                <XPath path="//src:if[count(src:else) = 0]">
                    <Desc>Find all if statements without an else statement</Desc>
                </XPath>
                <XPath path="//src:if//src:if">
                    <Desc>Find all nested if statements</Desc>
                </XPath>
                <XPath path="//src:elseif">
                    <Desc>Find all else-if statements</Desc>
                </XPath>
            </XPathQueries>
            <Example file="../C/C-if-1.c" />
            <Example file="../C/C-if-2.c" />
            <Example file="../C/C-if-3.c" />
            <Example file="../C/C-if-4.c" />
            <Example file="../C/C-if-5.c" />
            <Example file="../C/C-if-6.c" />
        </DocEntry>

        <DocEntry title="while statement" shortTitle="while">
            <Elements>
                <Element name="while" />
                <Subelement name="condition" />
                <Subelement name="block" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:while">
                    <Desc>Find all while loops</Desc>
                </XPath>
                <XPath path="//src:while/src:condition">
                    <Desc>Find the conditions of all while loops</Desc>
                </XPath>
                <XPath path="//src:while[src:condition//src:name = 'i']">
                    <Desc>Find all while loops which have a condition containing the variable <code class="inline">i</code></Desc>
                </XPath>
            </XPathQueries>
            <Example file="../C/C-while-1.c" />
        </DocEntry>

        <DocEntry title="for statement" shortTitle="for">
            <Elements>
                <Element name="for" />
                <Subelement name="control" />
                <Subelement name="block" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:for">
                    <Desc>Find all for loops</Desc>
                </XPath>
                <XPath path="//src:for/src:init">
                    <Desc>Find all initialization statements from within the control of all for loops</Desc>
                </XPath>
                <XPath path="//src:for[string-length(src:control/src:init/src:decl/src:name) = 1]">
                    <Desc>Find all for loops which declare a variable with a single character name (e.g. <code class="inline">x</code>, <code class="inline">i</code> or <code class="inline">y</code>)</Desc>
                </XPath>
                <XPath path="//src:for[src:control/src:incr/src:expr//node()/following-sibling::src:operator[.= '++']]">
                    <Desc>Find all for loops which use post decrement as part of the increment expression</Desc>
                </XPath>
                <XPath path="//src:for/src:control/src:incr">
                    <Desc>Find the increment expressions from every for loops</Desc>
                </XPath>
                <XPath path="//src:for/src:control/src:condition">
                    <Desc>Find the conditions of all for loops</Desc>
                </XPath>
                <!-- <XPath path="//src:for[src:control/src:range]">
                    <Desc>Find all range based for loops</Desc>
                </XPath>-->
            </XPathQueries>
            <Example file="../C/C-for-1.c" />
            <Example file="../C/C-for-2.c" />
            <Example file="../C/C-for-3.c" />
            <!--<Example file="CPP-range-for-1.cpp" />-->
        </DocEntry>

        <DocEntry title="foreach statement" shortTitle="foreach">
            <Elements>
                <Element name="for" />
                <Subelement name="control" />
                <Subelement name="block" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:foreach">
                    <Desc>Find all foreach loops</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-foreach-1.cs" />
        </DocEntry>

        <DocEntry title="do statement" shortTitle="do">
            <Elements>
                <Element name="do" />
                <Subelement name="block" />
                <Subelement name="condition" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:do">
                    <Desc>Find all do-while loops</Desc>
                </XPath>
                <XPath path="//src:do[src:condition//src:name = 'counter']">
                    <Desc>Find all do-while loops which have a condition containing the variable <code class="inline">counter</code></Desc>
                </XPath>
            </XPathQueries>
            <Example file="../C/C-do-while-1.c" />
            <Example file="../C/C-do-while-2.c" />
        </DocEntry>

        <DocEntry title="break statement" shortTitle="break">
            <Elements>
                <Element name="break" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:break">
                    <Desc>Find all break statements</Desc>
                </XPath>
                <XPath path="//src:break[ancestor::src:for]">
                    <Desc>Find all break statements within for loops</Desc>
                </XPath>
            </XPathQueries>
            <Example file="../C/C-break.c" />
        </DocEntry>

        <DocEntry title="continue statement" shortTitle="continue">
            <Elements>
                <Element name="continue" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:continue">
                    <Desc>Find all continue statements</Desc>
                </XPath>
            </XPathQueries>
            <Example file="../C/C-continue.c" />
        </DocEntry>

        <DocEntry shortTitle="return" title="return statement">
            <Elements>
                <Element name="return" />
                <Subelement name="expr" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:return">
                    <Desc>Find all return statements</Desc>
                </XPath>
                <XPath path="//src:function[ count(.//src:return) &gt; 1]">
                    <Desc>Find all functions with more then one return</Desc>
                </XPath>
            </XPathQueries>
            <Example file="../C/C-return-1.c" />
            <Example file="../C/C-return-2.c" />
        </DocEntry>

        <DocEntry title="switch statement" shortTitle="switch">
            <Elements>
                <Element name="switch" />
                <Subelement name="condition" />
                <Subelement name="case" />
                <Subelement name="block" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:switch">
                    <Desc>Find all switch statements</Desc>
                </XPath>
                <XPath path="//src:switch/src:condition">
                    <Desc>Find all of the conditions of all switch statements</Desc>
                </XPath>
            </XPathQueries>
            <Example file="../C/C-switch-1.c" />
            <Example file="../C/C-switch-2.c" />
        </DocEntry>

        <DocEntry shortTitle="case" title="case statement">
            <Elements>
                <Element name="case" />
                <Subelement name="expr" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:case">
                    <Desc>Find all case labels</Desc>
                </XPath>
                <XPath path="//src:case[.//src:name = 'SATURDAY']">
                    <Desc>Find all case labels which use <code class="inline">SATURDAY</code></Desc>
                </XPath>
                <XPath path="//src:switch[src:block/src:case[.//src:name = 'SATURDAY']]">
                    <Desc>Find all switch statements that have a case that uses <code class="inline">SATURDAY</code></Desc>
                </XPath>
            </XPathQueries>
            <Example file="../C/C-case-1.c" />
        </DocEntry>

        <DocEntry shortTitle="default" title="default statement">
            <Elements>
                <Element name="default" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:default">
                    <Desc>Find all default labels</Desc>
                </XPath>
                <XPath path="//src:switch[src:block/src:default]">
                    <Desc>Find all switch statements which have a default label</Desc>
                </XPath>
            </XPathQueries>
            <Example file="../C/C-default-1.c"/>
        </DocEntry>

        <DocEntry title="block">
            <Elements>
                <Element name="block" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:block">
                    <Desc>Find all blocks</Desc>
                </XPath>
                <XPath path="//src:block/src:decl_stmt">
                    <Desc>Find all variable declaration within a block</Desc>
                </XPath>
            </XPathQueries>	
            <Example file="../C/C-compound-block.c" />
        </DocEntry>

        <DocEntry title="label">
            <Elements>
                <Element name="label" />
                <Subelement name="name" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:label">
                    <Desc>Find all labels</Desc>
                </XPath>
                <XPath path="//src:label[src:name[. != //src:goto/src:name]]">
                    <Desc>Find all labels without a goto statement</Desc>
                </XPath>
            </XPathQueries>
            <Example file="../C/C-label.c" />
        </DocEntry>

        <DocEntry shortTitle="goto" title="goto statement">
            <Elements>
                <Element name="goto" />
                <Subelement name="name" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:goto">
                    <Desc>Find all goto statements</Desc>
                </XPath>
            </XPathQueries>
            <Example file="../C/C-goto.c" />
        </DocEntry>

        <DocEntry title="empty statement">
            <Elements>
                <Element name="empty_stmt" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:empty_stmt">
                    <Desc>Find all empty statements</Desc>
                </XPath>
            </XPathQueries>
            <Example file="../C/C-empty-stmt.c" />
        </DocEntry>

        <DocEntry title="fixed statement" shortTitle="fixed">
            <Elements>
                <Element name="fixed" />
                <Subelement name="parameter_list" />
                <Subelement name="block" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:fixed">
                    <Desc>Find all fixed statements</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-fixed-1.cs" />
        </DocEntry>

        <DocEntry title="lock statement" shortTitle="lock">
            <Elements>
                <Element name="lock" />
                <Subelement name="init" />
                <Subelement name="block" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:lock">
                    <Desc>Find all lock statements</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-lock-1.cs" />
        </DocEntry>

        <DocEntry title="using statement" shortTitle="using">
            <Elements>
                <Element name="using" />
                <Subelement name="init" />
                <Subelement name="block" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:using[src:init]">
                    <Desc>Find all using statements</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-using-1.cs" />
        </DocEntry>

    </Category>


    <Category title="Specifiers">
        <DocEntry title="const">
            <Elements>
                <Element name="specifier" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:decl[src:type/src:specifier [.='const']]">
                    <Desc>Find all const variables</Desc>
                </XPath>
                <XPath path="//src:function_decl[src:specifier [.='const']]">
                    <Desc>Find all const function declarations</Desc>
                </XPath>
                <XPath path="//src:function_decl[src:type/src:specifier [.='const']]">
                    <Desc>Find all function declarations with a const return type</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-const-1.cs" />
        </DocEntry>
        <!--

        <DocEntry title="static">
            <Elements>
                <Element name="specifier" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:function_decl[src:type/src:specifier [.='static']]">
                    <Desc>Find all static function declarations</Desc>
                </XPath>
                <XPath path="//src:decl[src:type/src:specifier [.='static']]">
                    <Desc>Find all static variables</Desc>
                </XPath>
            </XPathQueries>
            <Example file="../C/C-static-1.c" />
            <Example file="../C/C-static-2.c" />
        </DocEntry>

        <DocEntry title="inline">
            <Elements>
                <Element name="specifier" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:function_decl[src:type/src:specifier [.='inline']]">
                    <Desc>Find all inline function declarations</Desc>
                </XPath>
                <XPath path="//src:namespace[src:specifier [.='inline']]">
                    <Desc>Find all inline namespace declarations</Desc>
                </XPath>
            </XPathQueries>
            <Example file="../C/C-inline.c" />
            <Example file="CPP-inline-1.cpp" />
        </DocEntry>



        <DocEntry title="volatile">
            <Elements>
                <Element name="specifier" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:decl[src:type/src:specifier [.='volatile']]">
                    <Desc>Find all volatile variables</Desc>
                </XPath>
            </XPathQueries>
            <Example file="../C/C-volatile.c" />
        </DocEntry>

        <DocEntry title="restrict">
            <Elements>
                <Element name="specifier" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:decl[src:type/src:specifier [.='restrict']]">
                    <Desc>Find all variables declared with the restrict specifier</Desc>
                </XPath>
            </XPathQueries>
            <Example file="../C/C-restrict.c" />
        </DocEntry>

        <DocEntry title="auto specifier">
            <Elements>
                <Element name="specifier" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:decl[src:type/src:specifier [.='auto']]">
                    <Desc>Find all auto variables</Desc>
                </XPath>
            </XPathQueries>
            <Example file="../C/C-auto.c" />
        </DocEntry>

        <DocEntry title="auto type">
            <Elements>
                <Element name="name" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:decl[src:type/src:name [.='auto']]">
                    <Desc>Find all variables declared with auto as their type</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CPP-auto-1.cpp" />
            <Example file="CPP-auto-2.cpp" />
        </DocEntry>

        <DocEntry title="register">
            <Elements>
                <Element name="specifier" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:decl[src:type/src:specifier [.='register']]">
                    <Desc>Find all variables declared with the register specifier</Desc>
                </XPath>
            </XPathQueries>
            <Example file="../C/C-register.c" />
        </DocEntry>

        <DocEntry title="extern block">
            <Elements>
                <Element name="extern" />
                <Subelement name="literal"/>
                <Subelement name="function_decl"/>
                <Subelement name="decl_stmt"/>
                <Subelement name="block" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:extern">
                    <Desc>Find all extern blocks</Desc>
                </XPath>
            </XPathQueries>
            <Example title="external function with linkage specifier" file="../C/C-extern-linkage-1.c" />
            <Example title="extern structure with linkage specifier" file="../C/C-extern-linkage-2.c" />
            <Example title="extern variable with linkage specifier" file="../C/C-extern-linkage-3.c" />
            <Example title="extern block with linkage specifier" file="../C/C-extern-linkage-block.c" />
        </DocEntry>

        <DocEntry title="extern specifier">
            <Elements>
                <Element name="specifier" />
            </Elements>
            <XPathQueries>
                    <XPath path="//src:decl[src:type/src:specifier [.='extern']]">
                    <Desc>Find all extern variables</Desc>
                </XPath>
                <XPath path="//src:function_decl[src:type/src:specifier [.='extern']]">
                    <Desc>Find all extern functions declarations</Desc>
                </XPath>
            </XPathQueries>
            <Example title="external variable" file="../C/C-extern-1.c" />
            <Example title="external structure" file="../C/C-extern-2.c" />
            <Example title="external function" file="../C/C-extern-3.c" />
        </DocEntry>

        <DocEntry title="mutable">
            <Elements>
                <Element name="specifier" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:decl[src:type/src:specifier [.='mutable']]">
                    <Desc>Find all mutable variables declarations</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CPP-mutable-1.cpp" />
        </DocEntry>

        <DocEntry title="thread_local">
            <Elements>
                <Element name="specifier" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:function_decl[src:type/src:specifier [.='thread_local']]">
                    <Desc>Find all thread_local variables declarations</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CPP-thread_local-1.cpp" />
        </DocEntry>

        <DocEntry title="constexpr">
            <Elements>
                <Element name="specifier" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:decl[src:type/src:specifier [.='constexpr']]">
                    <Desc>Find all constexpr variables</Desc>
                </XPath>
                <XPath path="//src:function[src:type/src:specifier [.='constexpr']]">
                    <Desc>Find all constexpr functions</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CPP-constexpr-1.cpp" />
            <Example file="CPP-constexpr-2.cpp" />
        </DocEntry>

        <DocEntry title="final">
            <Elements>
                <Element name="specifier" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:function_decl[src:specifier [.='final']]">
                    <Desc>Find all final function declarations</Desc>
                </XPath>
                <XPath path="//src:class[src:specifier [.='final']]">
                    <Desc>Find all final class definitions</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CPP-final-1.cpp" />
            <Example file="CPP-final-2.cpp" />
        </DocEntry>

        <DocEntry title="override">
            <Elements>
                <Element name="specifier" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:function_decl[src:specifier [.='override']]">
                    <Desc>Find all overridden function declarations</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CPP-override-1.cpp" />
        </DocEntry>

        <DocEntry title="friend">
            <Elements>
                <Element name="specifier" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:function_decl[src:type/src:specifier [.='friend']]">
                    <Desc>Find all friend function declarations</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CPP-friend-1.cpp" />
        </DocEntry>

        <DocEntry title="virtual">
            <Elements>
                <Element name="specifier" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:function_decl[src:type/src:specifier [.='virtual']]">
                    <Desc>Find all friend function declarations</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CPP-virtual-1.cpp" />
        </DocEntry>

        <DocEntry title="delete specifier">
            <Elements>
                <Element name="specifier" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:function_decl[src:specifier [.='delete']]">
                    <Desc>Find all deleted function declarations</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CPP-deleted-func.cpp" />
        </DocEntry>

        <DocEntry title="default specifier">
            <Elements>
                <Element name="specifier" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:constructor[src:specifier [.='default']]">
                    <Desc>Find all constructors which explicitly use the compilers provided implementation</Desc>
                </XPath>
                <XPath path="//src:function_decl[src:specifier [.='default']]">
                    <Desc>Find all function which explicitly use the compilers provided implementation</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CPP-default-func.cpp" />
        </DocEntry>

        <DocEntry title="explicit">
            <Elements>
                <Element name="specifier" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:constructor_decl[src:specifier [.='explicit']]">
                    <Desc>Find all explicit constructor declarations</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CPP-explicit-1.cpp" />
        </DocEntry>

        <DocEntry title="template specifier">
            <Elements>
                <Element name="specifier" />
                <Subelement name="parameter_list" />
                <Subelement name="parameter" />
                <Subelement name="typename" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:type[src:specifier[.='template']]">
                    <Desc>Find all types which contain a template specifier</Desc>
                </XPath>
            </XPathQueries>
            <Example title="template used as a specifier" file="CPP-template-3.cpp" />
        </DocEntry>
        -->
        <DocEntry title="yield">
            <Elements>
                <Element name="specifier" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:specifier[.='yeild']">
                    <Desc>Find all yield statements</Desc>
                </XPath>
                <XPath path="//src:return[//src:specifier[.='yeild']]">
                    <Desc>Find all yield-return statements</Desc>
                </XPath>
                <XPath path="//src:break[//src:specifier[.='yeild']]">
                    <Desc>Find all yield-break statements</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-yield-1.cs" />
            <Example file="CS-yield-2.cs" />
        </DocEntry>
    </Category>

    <Category title="Declarations, Definitions and Initializations">
        <DocEntry title="variable declaration statement">
            <Elements>
                <Element name="decl_stmt" />
                <Subelement name="decl" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:decl_stmt">
                    <Desc>Find all declaration statements</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-decl_stmt-1.cs" />
            <Example file="CS-decl_stmt-2.cs" />
        </DocEntry>


        <DocEntry title="variable declaration">
            <Elements>
                <Element name="decl" />
                <Subelement name="name" />
                <Subelement name="init"/>
            </Elements>
            <XPathQueries>
                <XPath path="//src:decl">
                    <Desc>Find all variable declarations</Desc>
                </XPath>
                <XPath path="//src:decl[src:init]">
                    <Desc>Find all variable declarations which also initialize the variable</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-decl_stmt-1.cs" />
            <Example file="CS-decl_stmt-2.cs" />
        </DocEntry>

        <DocEntry title="array declaration">
            <Elements>
                <Element name="decl" />
                <Subelement name="name" />
                <Subelement name="index" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:decl[src:name/src:name/src:index]">
                    <Desc>Find all array declarations</Desc>
                </XPath>
                <XPath path="//src:decl[src:name/src:name/src:index/src:literal[number(.) &lt; 50]]">
                    <Desc>Find all array declarations where the number of elements is less then 50</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-array-decl-1.cs" />
            <Example file="CS-array-decl-2.cs" />
            <Example file="CS-array-decl-3.cs" />
            <Example file="CS-array-decl-4.cs" />
            <Example file="CS-array-decl-5.cs" />
        </DocEntry>

        <DocEntry title="function declaration">
            <Elements>
                <Element name="function_decl" />
                <Subelement name="type" />
                <Subelement name="name" />
                <Subelement name="parameter_list" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:function_decl">
                    <Desc>Find all function declarations</Desc>
                </XPath>
                <XPath path="//src:function_decl/src:type">
                    <Desc>Find all return types from all function declarations</Desc>
                </XPath>
                <XPath path="//src:function_decl/src:parameter_list/src:param">
                    <Desc>Find all parameters from all function declarations</Desc>
                </XPath>
                <XPath path="//src:function_decl[src:parameter_list[count(src:param) = 2]]">
                    <Desc>Find all function declarations with only two parameters</Desc>
                </XPath>
                <XPath path="//src:function_decl/src:name">
                    <Desc>Find the names of all function declarations</Desc>
                </XPath>
            </XPathQueries>
            <!--
            <Example file="CPP-function-decl-1.cpp" />
            -->
        </DocEntry>

        <DocEntry title="function definition">
            <Elements>
                <Element name="function" />
                <Subelement name="type" />
                <Subelement name="name" />
                <Subelement name="parameter_list" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:function">
                    <Desc>Find all function definitions</Desc>
                </XPath>
                <XPath path="//src:function/src:type">
                    <Desc>Find all return types from all function definitions</Desc>
                </XPath>
                <XPath path="//src:function/src:parameter_list/src:param">
                    <Desc>Find all parameters from all function definitions</Desc>
                </XPath>
                <XPath path="//src:function[src:parameter_list[count(src:param) = 2]]">
                    <Desc>Find all function definitions with only two parameters</Desc>
                </XPath>
            </XPathQueries>
            <!--
            <Example file="CPP-function-decl-1.cpp" />
            -->
        </DocEntry>

        <DocEntry title="default arguments">
            <Elements>
                <Element name="init" />
                <Subelement name="expr" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:function_decl[src:parameter_list/src:param/src:decl/src:init]">
                    <Desc>Find all function declarations with default parameters</Desc>
                </XPath>
            </XPathQueries>
            <!--
            <Example file="CPP-function-decl-1.cpp" />
            -->
        </DocEntry>

        <DocEntry title="delegate type definition">
            <Elements>
                <Element name="N"/>
                <Subelement name="A" />
            </Elements>
            <XPathQueries>
                <XPath path="NONE">
                    <Desc>Find all</Desc>
                </XPath>
            </XPathQueries>
            <!-- <Example file="CS- -1.cs" /> -->
        </DocEntry>

        <DocEntry title="delegate definition">
            <Elements>
                <Element name="N"/>
                <Subelement name="A" />
            </Elements>
            <XPathQueries>
                <XPath path="NONE">
                    <Desc>Find all</Desc>
                </XPath>
            </XPathQueries>
            <!-- <Example file="CS- -1.cs" /> -->
        </DocEntry>

        <DocEntry title="anonymous delegates">
            <Elements>
                <Element name="N"/>
                <Subelement name="A" />
            </Elements>
            <XPathQueries>
                <XPath path="NONE">
                    <Desc>Find all</Desc>
                </XPath>
            </XPathQueries>
            <!-- <Example file="CS- -1.cs" /> -->
        </DocEntry>

        <DocEntry title="lambda">
            <Elements>
                <Element name="lambda" />
                <Subelement name="parameter_list" />
                <Subelement name="name_list" />
                <Subelement name="operator" />
                <Subelement name="block" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:lambda">
                    <Desc>Find all lambdas</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-lambda-1.cs" />
            <Example file="CS-lambda-2.cs" />
            <Example file="CS-lambda-3.cs" />
        </DocEntry>



        <DocEntry title="namespace">
            <Elements>
                <Element name="namespace" />
                <Subelement name="name" />
                <Subelement name="block" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:namespace">
                    <Desc>Find all namespaces</Desc>
                </XPath>

            </XPathQueries>
            <!-- <Example file="CS- -1.cs" /> -->
        </DocEntry>

        <DocEntry title="using directive">
            <Elements>
                <Element name="using" />
                <Subelement name="name" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:using">
                    <Desc>Find all using directives</Desc>
                </XPath>
            </XPathQueries>
            <!-- <Example file="CS-using-directive-1.cs" /> -->
            <!-- <Example file="CS-using-directive-2.cs" /> this should be the version that uses the = to make the name shorter.-->
        </DocEntry>


        <DocEntry title="pointer declaration">
            <Elements>
                <Element name="modifier"/>
            </Elements>
            <XPathQueries>
                <XPath path="//src:decl[src:modifier[.='*']]">
                    <Desc>Find all of the declarations of pointers</Desc>
                </XPath>
                <XPath path="//src:function_decl[contains(., ')')]">
                    <Desc>Find all function pointers</Desc>
                </XPath>
            </XPathQueries>
            <!-- <Example file="CS-ptr-decl-1.cs" /> -->
            <!-- <Example file="CS-ptr-decl-2.cs" /> -->
        </DocEntry>

        <DocEntry title="operator overloading declaration">
            <Elements>
                <Element name="function_decl" />
                <Subelement name="type" />
                <Subelement name="name" />
                <Subelement name="parameter_list" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:function_decl[src:name[substring(.,0, 8) = 'operator']] ">
                    <Desc>Find all operator declarations</Desc>
                </XPath>
            </XPathQueries>
            <!-- <Example file="CS-operator-overload-decl-1.cs" /> -->
            <!-- <Example file="CS-operator-overload-decl-2.cs" /> -->
        </DocEntry>
        <DocEntry title="operator overload definition">
            <Elements>
                <Element name="function" />
                <Subelement name="type" />
                <Subelement name="name" />
                <Subelement name="parameter_list" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:function[src:name[substring(.,0, 8) = 'operator']]">
                    <Desc>Find all operator overload definitions</Desc>
                </XPath>
            </XPathQueries>
            <!-- <Example file="CS-operator-overload-def-1.cs" /> -->
        </DocEntry>

        <DocEntry title="implicit conversion operator declaration">
            <Elements>
                <Element name="function_decl" />
                <Subelement name="name" />
                <Subelement name="parameter_list" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:function_decl[not(src:type)]">
                    <Desc>Find all implicit conversion operator overload declarations</Desc>
                </XPath>
            </XPathQueries>
            <!-- <Example file="CS-implicit-conv-operator-decl-1.cs" /> -->
        </DocEntry>

        <DocEntry title="implicit conversion operator definition">
            <Elements>
                <Element name="function" />
                <Subelement name="name" />
                <Subelement name="parameter_list" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:function[not(src:type)]">
                    <Desc>Find all implicit conversion operator definition overloads</Desc>
                </XPath>
            </XPathQueries>
            <!-- <Example file="CS-implicit-conv-operator-def-1.cs" /> -->
        </DocEntry>

        <DocEntry title="explicit conversion operator declaration">
            <Elements>
                <Element name="function_decl" />
                <Subelement name="type" />
                <Subelement name="name" />
                <Subelement name="parameter_list" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:function_decl[src:type/src:specifier[.='explicit']][src:name[substring(.,0, 8) = 'operator']]">
                    <Desc>Find all explicit conversion operator declarations</Desc>
                </XPath>
            </XPathQueries>
            <!-- <Example file="CS-explicit-conv-operator-decl-1.cs" /> -->
        </DocEntry>

        <DocEntry title="explicit conversion operator definition">
            <Elements>
                <Element name="function" />
                <Subelement name="type" />
                <Subelement name="name" />
                <Subelement name="parameter_list" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:function[src:type/src:specifier[.='explicit']][src:name[substring(.,0, 8) = 'operator']]">
                    <Desc>Find all explicit conversion operator overloads</Desc>
                </XPath>
            </XPathQueries>
            <!-- <Example file="CS-explicit-conv-operator-def-1.cs" /> -->
        </DocEntry>
    </Category>

    <Category title="Classes, Structs, Interfaces and Enums">
        <DocEntry title="class">
            <Elements>
                <Element name="class" />
                <Subelement name="suepr" />
                <Subelement name="name" />
                <Subelement name="block" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:class">
                    <Desc>Find all class definitions</Desc>
                </XPath>
                <XPath path="//src:class[src:name[.='foo']]">
                    <Desc>Find all classes with the name <code class="inline">foo</code></Desc>
                </XPath>
                <XPath path="//src:function[ancestor::src:class]">
                    <Desc>Find all functions within classes</Desc>
                </XPath>
                <XPath path="//src:function_decl[ancestor::src:class]">
                    <Desc>Find all function declarations within classes</Desc>
                </XPath>
            </XPathQueries>
            <!--<Example file="CS- -1.cs" />-->
        </DocEntry>

        <DocEntry title="properies">
            <Elements>
                <Element name="N"/>
                <Subelement name="A" />
            </Elements>
            <XPathQueries>
                <XPath path="NONE">
                    <Desc>Find all</Desc>
                </XPath>
            </XPathQueries>
            <!--<Example file="CS- -1.cs" />-->
        </DocEntry>

        <DocEntry title="get">
            <Elements>
                <Element name="N"/>
                <Subelement name="A" />
            </Elements>
            <XPathQueries>
                <XPath path="NONE">
                    <Desc>Find all</Desc>
                </XPath>
            </XPathQueries>
            <!--<Example file="CS- -1.cs" />-->
        </DocEntry>

        <DocEntry title="set">
            <Elements>
                <Element name="N"/>
                <Subelement name="A" />
            </Elements>
            <XPathQueries>
                <XPath path="NONE">
                    <Desc>Find all</Desc>
                </XPath>
            </XPathQueries>
            <!--<Example file="CS- -1.cs" />-->
        </DocEntry>

        <DocEntry title="events">
            <Elements>
                <Element name="N"/>
                <Subelement name="A" />
            </Elements>
            <XPathQueries>
                <XPath path="NONE">
                    <Desc>Find all</Desc>
                </XPath>
            </XPathQueries>
            <!--<Example file="CS-envent-1.cs" />-->
        </DocEntry>

        <DocEntry title="inheritance list">
            <Elements>
                <Element name="super" />
                <Subelement name="specifier" />
                <Subelement name="name" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:class[src:super]">
                    <Desc>Find all classes with at least one super class</Desc>
                </XPath>
                <XPath path="//src:class[src:super/src:name[. = 'bar']]">
                    <Desc>Find all classes that inherit from <code class="inline">bar</code></Desc>
                </XPath>
            </XPathQueries>
            <!--<Example file="CS- -1.cs" />-->
        </DocEntry>

        <DocEntry title="constructor">
            <Elements>
                <Element name="constructor" />
                <Subelement name="name" />
                <Subelement name="parameter_list" />
                <Subelement name="member_list" />
                <Subelement name="block" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:constuctor">
                    <Desc>Find all constructors</Desc>
                </XPath>
                <XPath path="//src:constuctor[src:parameter_list[not(src:param)]]">
                    <Desc>Find all default constructors</Desc>
                </XPath>
                <XPath path="//src:constructor[src:parameter_list[not(src:param)] or (count(src:parameter_list/src:param) = count(src:parameter_list/src:param/src:decl/src:init))]">
                    <Desc>Find all possible default constructors, including constructors with all default parameters</Desc>
                </XPath>
                <XPath path="//src:constructor[ (src:name | src:name/src:name[last()]) = (src:parameter_list/src:param[1]/src:decl/src:type/src:name | src:parameter_list/src:param[1]/src:decl/src:type/src:name[last()])] [( (count(src:parameter_list/src:param) - 1) = count(src:parameter_list/src:param/src:decl/src:init))]">
                    <Desc>Find all possible copy constructors, including those which are not defined with the body of class and those with default parameters</Desc>
                </XPath>
            </XPathQueries>
            <!--<Example file="CS- -1.cs" />-->
        </DocEntry>

        <DocEntry title="constructor declaration">
            <Elements>
                <Element name="constructor_decl" />
                <Subelement name="name" />
                <Subelement name="parameter_list" />
                <Subelement name="member_list" />
                <Subelement name="block" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:constructor_decl">
                    <Desc>Find all constructor declarations</Desc>
                </XPath>
            </XPathQueries>
            <!--<Example file="CS- -1.cs" />-->
        </DocEntry>

        <DocEntry title="destructor">
            <Elements>
                <Element name="destructor" />
                <Subelement name="name" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:destructor">
                    <Desc>Find all destructors</Desc>
                </XPath>
            </XPathQueries>
            <!--<Example file="CS- -1.cs" />-->
        </DocEntry>

        <DocEntry title="destructor declaration">
            <Elements>
                <Element name="destructor_decl" />
                <Subelement name="name" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:destructor_decl">
                    <Desc>Find all destructor declarations</Desc>
                </XPath>
            </XPathQueries>
            <!--<Example file="CS- -1.cs" />-->
        </DocEntry>

        <DocEntry title="struct definition">
        	<Desc>See class for more examples.</Desc>
            <Elements>
                <Element name="struct" />
                <Subelement name="name" />
                <Subelement name="super" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:struct">
                    <Desc>Find the definition of all structs</Desc>
                </XPath>
                <XPath path="//src:struct/src:block/src:decl_stmt">
                    <Desc>Find the members from all structs</Desc>
                </XPath>
            </XPathQueries>
            <!--<Example file="CS- -1.cs" />-->
        </DocEntry>

        <DocEntry title="property-wise initialization">
            <Elements>
                <Element name="decl_stmt" />
                <Subelement name="decl" />
                <Subelement name="init" />
                <Subelement name="block" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:decl[src:init/src:block]">
                    <Desc>Find all of declaration of structs which also initialize it</Desc>
                </XPath>
            </XPathQueries>
            <!--<Example file="CS- -1.cs" />-->
        </DocEntry>

        <DocEntry title="enum definition">
            <Elements>
                <Element name="enum" />
                <Subelement name="name" />
                <Subelement name="block" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:enum">
                    <Desc>Find all enum definitions</Desc>
                </XPath>
                <XPath path="//src:enum/src:decl/src:name">
                    <Desc>Find the names of all members of all enums</Desc>
                </XPath>
            </XPathQueries>
            <!--<Example file="CS- -1.cs" />-->
        </DocEntry>
    </Category>


    <Category title="Expressions">
        <!--
        <DocEntry title="function call">
            <Elements>
                <Element name="call"/>
                <Subelement name="name" />
                <Subelement name="argument_list" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:call">
                    <Desc>Find all function calls</Desc>
                </XPath>
            </XPathQueries>
            <Example title="typical function call" file="../C/C-call.c" />
            <Example title="explicit operator call" file="CPP-new-6.cpp" />
        </DocEntry>

         <DocEntry title="new">
            <Elements>
                <Element name="operator"/>
            </Elements>
            <XPathQueries>
                <XPath path="//src:expr[src:operator[.='new']]">
                    <Desc>Find all expressions which call new</Desc>
                </XPath>
                <XPath path="//src:expr[src:operator[.='new']/following-sibling::src:name/src:name/src:index]">
                    <Desc>Find all expressions which call array new</Desc>
                </XPath>
                <XPath path="//src:expr[src:operator[.='new']/following-sibling::src:name[src:name[.='nothrow']]]">
                    <Desc>Find all expressions which call no throw new</Desc>
                </XPath>
                <XPath path="//src:expr[src:operator[.='new']/following-sibling::node()[2]/self::src:operator[.='(']/following-sibling::node()[not(self::src:name[src:name[ .!= 'nothrow']])]]">
                    <Desc>Find all expressions which call placement new</Desc>
                </XPath>
            </XPathQueries>
            <Example title="regular new" file="CPP-new-1.cpp" />
            <Example title="array new 1" file="CPP-new-2.cpp" />
            <Example title="array new 2" file="CPP-new-3.cpp" />
            <Example title="std::nothrow new" file="CPP-new-4.cpp" />
            <Example title="placement new" file="CPP-new-5.cpp" />
        </DocEntry>

        <DocEntry title="array indexing">
            <Elements>
                <Element name="name"/>
                <Subelement name="name" />
                <Subelement name="index" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:expr/src:name[src:name/src:index/node()]">
                    <Desc>Find all array indexings</Desc>
                </XPath>
            </XPathQueries>
            <Example file="../C/C-array-access.c" />
        </DocEntry>

        <DocEntry title="dereference member access">
            <Elements>
                <Element name="expr"/>
                <Subelement name="name" />
                <Subelement name="operator" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:operator[.='-&gt;']">
                    <Desc>Find all uses of the `-&gt;` operator</Desc>
                </XPath>
            </XPathQueries>
            <Example file="../C/C-deref-member-access.c" />
        </DocEntry>

        <DocEntry title="member and scpope access">
            <Elements>
                <Element name="expr"/>
                <Subelement name="name" />
                <Subelement name="operator" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:operator[.='.']">
                    <Desc>Find all uses of the `.` operator</Desc>
                </XPath>
            </XPathQueries>
            <Example file="../C/C-member-access.c" />
        </DocEntry>
        -->

        <DocEntry title="this">
            <Elements>
                <Element name="name" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:name[.='this']">
                    <Desc>Find all uses of this</Desc>
                </XPath>
            </XPathQueries>
            <!--<Example file="CS-this-1.cs" />-->
        </DocEntry>

        <DocEntry title="base">
            <Elements>
                <Element name="name" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:name[.='base']">
                    <Desc>Find all uses of base</Desc>
                </XPath>
            </XPathQueries>
            <!--<Example file="CS-base-1.cs" />-->
        </DocEntry>

	    <OperatorEntry title="pre/post increment" op="++" example="../C/C-Operator-pre_increment.c" />
	    <OperatorEntry title="pre/post decrement" op="--" example="../C/C-Operator-pre_decrement.c" />
	    <OperatorEntry title="address of" op="&amp;" example="../C/C-Operator-address_of.c" />
	    <OperatorEntry title="dereference" op="*" example="../C/C-Operator-deref.c" />
	    <OperatorEntry title="unary minus" op="-" example="../C/C-Operator-unary-minus.c" />
	    <OperatorEntry title="unary plus" op="-" example="../C/C-Operator-unary-plus.c" />
	    <OperatorEntry title="logical not" op="!" example="../C/C-Operator-logical-not.c" />
	    <OperatorEntry title="multiplication" op="*" example="../C/C-Operator-multiplication.c" />
	    <OperatorEntry title="division" op="/" example="../C/C-Operator-divide.c" />
	    <OperatorEntry title="modulus" op="%" example="../C/C-Operator-modulus.c" />
	    <OperatorEntry title="addition" op="+" example="../C/C-Operator-addition.c" />
	    <OperatorEntry title="subtraction" op="-" example="../C/C-Operator-subtraction.c" />
	    <OperatorEntry title="left shift" op="&lt;&lt;" example="../C/C-Operator-left-shift.c" />
	    <OperatorEntry title="right shift" op="&gt;&gt;" example="../C/C-Operator-right-shift.c" />
	    <OperatorEntry title="less then" op="&lt;" example="../C/C-Operator-less-then.c" />
	    <OperatorEntry title="greater then" op="&gt;" example="../C/C-Operator-greater-then.c" />
	    <OperatorEntry title="less then or equal to" op="&lt;=" example="../C/C-Operator-less-equal.c" />
	    <OperatorEntry title="greater then or equal to" op="&gt;=" example="../C/C-Operator-greater-equal.c" />
	    <OperatorEntry title="equals" op="==" example="../C/C-Operator-equal.c" />
	    <OperatorEntry title="not equal" op="!=" example="../C/C-Operator-not-equal.c" />
	    <OperatorEntry title="bitwise not" op="~" example="../C/C-Operator-bitwise-not.c" />
	    <OperatorEntry title="bitwise and" op="&amp;" example="../C/C-Operator-bitwise-and.c" />
	    <OperatorEntry title="bitwise xor" op="^" example="../C/C-Operator-bitwise-xor.c" />
	    <OperatorEntry title="bitwise or" op="|" example="../C/C-Operator-bitwise-or.c" />
	    <OperatorEntry title="logical and" op="&amp;&amp;" example="../C/C-Operator-logical-and.c" />
	    <OperatorEntry title="logical or" op="||" example="../C/C-Operator-logical-or.c" />
	    <OperatorEntry title="assignment" op="=" example="../C/C-Operator-assignment.c" />
	    <OperatorEntry title="multiply assign" op="*=" example="../C/C-Operator-multiply-assign.c" />
	    <OperatorEntry title="divide assign" op="/=" example="../C/C-Operator-divide-assign.c" />
	    <OperatorEntry title="modulus assign" op="%=" example="../C/C-Operator-modulus-assign.c" />
	    <OperatorEntry title="add assign" op="+=" example="../C/C-Operator-addition-assign.c" />
	    <OperatorEntry title="subtract assign" op="-=" example="../C/C-Operator-sub-assign.c" />
	    <OperatorEntry title="left shift assign" op="&lt;&lt;=" example="../C/C-Operator-left-shift-assign.c" />
	    <OperatorEntry title="right shift assign" op="&gt;&gt;=" example="../C/C-Operator-right-shift-assign.c" />
	    <OperatorEntry title="bitwise and assign" op="&amp;=" example="../C/C-Operator-bitwise-and-assign.c" />
	    <OperatorEntry title="bitwise xor assign" op="^=" example="../C/C-Operator-bitwise-xor-assign.c" />
	    <OperatorEntry title="bitwise or assign" op="|=" example="../C/C-Operator-bitwise-or-assign.c" />
	    <OperatorEntry title="sceope" op="::" example="../CPlusPlus/CPP-Operator-scope.cpp" />
        <OperatorEntry title="null coalescing" op="??" example="CS-Operator-null-coalescing-1.cs" />
	    <OperatorEntry title="comma" op="," example="../C/C-Operator-comma.c" />
        <OperatorEntry title="conditional" op="?  :" example="../C/C-Operator-turnary.c" />
        <OperatorEntry title="dot" op="." example="../C/C-member-access.c" />
        <OperatorEntry title="arrow" op="-&gt;" example="../C/C-deref-member-access.c" />
        <OperatorEntry title="lambda" op="=&gt;" example="CS-lambda-1.cs" />
        <OperatorEntry title="await" op="await" example="CS-Operator-await-1.cs" />
        <OperatorEntry title="as" op="as" example="CS-Operator-as-1.cs" />
        <OperatorEntry title="is" op="is" example="CS-Operator-is-1.cs" />
    </Category>

    <Category title="Other">

        <DocEntry title="typeof">
            <Elements>
                <Element name="typeof"/>
                <Subelement name="argument_list" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:typeof">
                    <Desc>Find all uses of typeof</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-typeof-1.cs" />
        </DocEntry>

        <DocEntry title="default">
            <Elements>
                <Element name="default"/>
                <Subelement name="argument_list" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:default">
                    <Desc>Find all uses of default</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-Operator-default-1.cs" />
        </DocEntry>

        <DocEntry title="checked">
            <Elements>
                <Element name="checked"/>
                <Subelement name="block" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:checked">
                    <Desc>Find all uses of checked</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-Operator-checked-1.cs" />
        </DocEntry>

        <DocEntry title="unchecked">
            <Elements>
                <Element name="unchecked"/>
                <Subelement name="block" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:unchecked">
                    <Desc>Find all uses of unchecked</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-Operator-unchecked-1.cs" />
        </DocEntry>

        <DocEntry title="sizeof">
            <Elements>
                <Element name="sizeof"/>
                <Subelement name="argument_list" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:sizeof">
                    <Desc>Find all uses of sizeof</Desc>
                </XPath>
            </XPathQueries>
            <Example file="../C/C-sizeof.c" />
        </DocEntry>

     	<DocEntry title="var">
            <Elements>
                <Element name="name" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:type[src:name[.='var']]">
                    <Desc>Find all uses var</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-var-1.cs" />
        </DocEntry>

     	<DocEntry title="object">
            <Elements>
                <Element name="name" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:type[src:name[.='object']]">
                    <Desc>Find all uses object</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-object-1.cs" />
        </DocEntry>

     	<DocEntry title="dynamic">
            <Elements>
                <Element name="name" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:type[src:name[.='dynamic']]">
                    <Desc>Find all uses dynamic</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-dynamic-1.cs" />
        </DocEntry>

     	<DocEntry title="string keyword">
            <Elements>
                <Element name="name" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:type[src:name[.='string']]">
                    <Desc>Find all uses of the string keyword</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-string-1.cs" />
        </DocEntry>

        <!--

        <DocEntry title="c-style cast">
            <Elements>
                <Element name="operator"/>
                <Subelement name="name" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:operator[.='(']">
                    <Desc>Find all casts</Desc>
                </XPath>
            </XPathQueries>
            <Example file="../C/C-c-style-cast.c" />
        </DocEntry>

        <DocEntry title="attributes">
            <Elements>
                <Element name="attribute" />
                <Subelement name="expr" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:attribute">
                    <Desc>Find all attributes</Desc>
                </XPath>
                <XPath path="//src:function[src:attribute/src:expr/src:name[.='noreturn']]">
                    <Desc>Find all noreturn functions</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CPP-attribute-1.cpp" />
        </DocEntry>
        -->
    </Category>

    <Category title="Generics">
    </Category>

    <Category title="Exceptions">
        <DocEntry title="throw">
            <Elements>
                <Element name="throw" />
                <Subelement name="expr" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:throw">
                    <Desc>Find all uses of throw</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-throw-1.cs" />
            <Example file="CS-throw-2.cs" />
        </DocEntry>

        <DocEntry title="try">
            <Elements>
                <Element name="try" />
                <Subelement name="block" />
                <Subelement name="catch" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:try">
                    <Desc>Find all try block</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-try-1.cs" />
        </DocEntry>

        <DocEntry title="catch">
            <Elements>
                <Element name="catch" />
                <Subelement name="parameter_list" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:catch">
                    <Desc>Find all catch blocks</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-catch-1.cs" />
            <Example file="CS-catch-2.cs" />
        </DocEntry>

        <DocEntry title="finally">
            <Elements>
                <Element name="finally" />
                <Subelement name="block" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:finally">
                    <Desc>Find all finally blocks.</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-finally-1.cs" />
        </DocEntry>

    </Category>

</DocConfig>
