<Grammar languageOrdering="C,C++,C#,Java">
    <Documentation>
        
        <!-- This determines overall ordering for rules within the grammar class. -->
        <Rule rule="start">
            <Desc>The start rule is the starting rule for the srcML grammar.</Desc>
        </Rule>

        <Tag elem="unit">
            <Desc>Stuff about unit.</Desc>
            <Refs>
                <See title="Main Documentation Page" url="http://www.cs.kent.edu/~bbartman/srcML/" />
            </Refs>
        </Tag>

        <AttrRule rule="dirAttr" />
        <AttrRule rule="filenameAttr" />
        <AttrRule rule="languageAttr" />
        <AttrRule rule="hashAttr" />
        <AttrRule rule="optionsAttr" />
        
        <Tag elem="macro-list" />
        <AttrRule rule="macroTokenAttr" />
        <AttrRule rule="macroTypeAttr" />

        <Tag elem="comment" />
        <AttrRule rule="commentTypeAttr" />
        <AttrRule rule="commentFormatAttr" />

        <Tag elem="escape" />
        <AttrRule rule="charAttr" />

        <Rule rule="topLevelElements"/>
        <Rule rule="anyCPPOrCommentOrText">
            <Desc>
                Any of the C preprocessor directives, any specially marked up
                text or a comment. Any of the child rules contained within this
                rule occur almost anywhere within a compilation unit.
            </Desc>
        </Rule>

        <!-- C preprocessor -->
        <Rule rule="cppDefine"/>
        <Tag ns="cpp" elem="define"/>
        <Tag ns="cpp" elem="directive" />
        <Tag ns="cpp" elem="macro" />
        <Tag ns="cpp" elem="number" />
        <Tag ns="cpp" elem="value" />
        <Tag ns="cpp" elem="if" />
        <Tag ns="cpp" elem="ifdef" />
        <Tag ns="cpp" elem="ifndef" />
        <Tag ns="cpp" elem="elif" />
        <Tag ns="cpp" elem="else" />
        <Tag ns="cpp" elem="endif" />
        <Tag ns="cpp" elem="region" />
        <Tag ns="cpp" elem="endregion" />
        <Tag ns="cpp" elem="error" />
        <Tag ns="cpp" elem="warning" />
        <Tag ns="cpp" elem="literal" />
        <Tag ns="cpp" elem="include" />
        <Rule rule="cppFile" />
        <Tag ns="cpp" elem="file" />
        <Rule rule="cppLine"/>
        <Tag ns="cpp" elem="line" />
        <Tag ns="cpp" elem="pragma" />
        <Tag ns="cpp" elem="undef" />
        <Tag ns="cpp" elem="empty" />

        <Tag elem="if"/>
        <Tag elem="condition" />
        <Tag elem="then"/>
        <Tag elem="elseif"/>
        <Tag elem="else"/>
        <Tag elem="while"/>
        <Tag elem="do"/>
        <Tag elem="for"/>
        <Tag elem="foreach"/>
        <Tag elem="control" />
        <Tag elem="init" />
        <Tag elem="incr"/>

        <Tag elem="switch"/>
        <Tag elem="case" />
        <Tag elem="default"/>
        <Tag elem="continue" />
        <Tag elem="return"/>
        <Tag elem="break"/>
        <Tag elem="decl_stmt"/>
        <Tag elem="expr_stmt"/>
        <Tag elem="empty_stmt"/>
        <Tag elem="goto"/>
        <Tag elem="label"/>
        <Tag elem="block" />
        <AttrRule rule="typePseudoAttr" />
        <Tag elem="typedef"/>
        <Tag elem="assert" />
        <AttrRule rule="typeStaticAttr"/>
        <Tag elem="using_stmt"/>
        <Tag elem="lock"/>
        <Tag elem="synchronized"/>
        <Tag elem="unsafe"/>
        <Tag elem="fixed"/>
        <Tag elem="asm" />
        
        <!-- Namespace & directives -->
        <Tag elem="namespace"/>
        <Tag elem="using"/>
        <Tag elem="extern"/>
        <Tag elem="import"/>
        <Tag elem="package"/>
        
        <!-- Not sure where to put this! -->
        <Tag elem="template"/>
        <Tag elem="typename"/>
                
        <!-- Function Related stuff-->
        <Tag elem="function"/>
        <Tag elem="function_decl"/>
        <Tag elem="ref_qualifier"/>
        <Tag elem="throws"/>
        <Tag elem="lambda"/>
        <Tag elem="capture"/>
        <Tag elem="delegate"/>
        <Tag elem="property"/>
        <Tag elem="event"/>


        <!-- Class Stuff -->
        <Rule rule="classInterfaceOrAnnotation" />
        <Tag elem="class"/>
        <AttrRule rule="classTypeAttr"/>
        <Tag elem="enum"/>
        <Tag elem="struct"/>
        <Tag elem="struct_decl"/>
        <Tag elem="union"/>
        <Tag elem="union_decl"/>
        <Tag elem="private"/>
        <AttrRule rule="accessSpecifierTypeAttr"/>
        <Tag elem="protected"/>
        <Tag elem="public"/>
        <Tag elem="super"/>
        <Tag elem="extends"/>
        <Tag elem="implements"/>
        <Tag elem="constructor"/>
        <Tag elem="constructor_decl" />
        <Tag elem="static"/>
        <Tag elem="destructor"/>
        <Tag elem="destructor_decl"/>        
        
        <!-- Expression/Statement Stuff! -->
        <Tag elem="cast"/>
        <Tag elem="checked" />
        <Tag elem="unchecked"/>
        <Tag elem="decltype"/>
        <Tag elem="noexcept"/>
        <Tag elem="sizeof"/>
        <Tag elem="typeid"/>
        <Tag elem="typeof"/>
        <Tag elem="atomic"/>
        <Tag elem="alignof" />
        <Tag elem="alignas" />
        <Tag elem="generic_selection"/>
        <Tag elem="selector"/>
        <Tag elem="association_list"/>
        <Tag elem="association"/>
        
        
        <!-- LINQ -->
        <Tag elem="linq"/>
        <Tag elem="from"/>
        <Tag elem="by"/>
        <Tag elem="equals"/>
        <Tag elem="group"/>
        <Tag elem="in"/>
        <Tag elem="into"/>
        <Tag elem="join"/>
        <Tag elem="let"/>
        <Tag elem="on"/>
        <Tag elem="orderby"/>
        <Tag elem="select"/>
        <Tag elem="where"/>

        
        <!-- Exception Stuff -->
        <Tag elem="try"/>
        <Tag elem="throw"/>
        <Rule rule="catchStmt" />
        <Tag elem="catch" />
        <Tag elem="finally"/>

        <!-- Attribute & annotations -->
        <Tag elem="attribute"/>
        <Tag elem="annotation"/>

        <!-- Stuff that's everywhere AGAIN!-->
        <Tag elem="argument_list" />
        <AttrRule rule="agrumentListTypeAttr"/>
        <Tag elem="argument" />
        <Tag elem="parameter_list" />
        <Tag elem="param" />
        
        
        <Tag elem="decl" />
        <Tag elem="range"/>
        <Tag elem="expr"/>
        <Tag elem="type" />
        <AttrRule rule="typeTypeAttr" />                
        <Tag elem="call" />
        <Rule rule="name"/>
        <Tag elem="name" />
        <Tag elem="index"/>
        <Tag elem="member_list"/>
        <Tag elem="specifier"/>
        <Tag elem="operator"/>
        <Tag elem="literal"/>
        <AttrRule rule="literalTypeAttr"/>
        <Tag elem="macro"/>
        <Tag elem="modifier"/>

    </Documentation>

    <!-- Grammar Rules -->
    <Rule name="start" lang="C,C++,C#,Java">
        <Def>
            <Choice>
                <Ref name="archiveUnit"/>
                <Ref name="compilationUnit"/>
            </Choice>
        </Def>
    </Rule>

    <!-- src:unit -->
    <TagRule name="archiveUnit" lang="C,C++,C#,Java" title="archive unit">
        <Desc>An archive is a collection of compilation units.</Desc>
        <Tag elem="unit">
            <Attrs>
                <Attr rule="dirAttr" isOptional="true"/>
                <Attr rule="filenameAttr" isOptional="true" />
                <Attr rule="languageAttr" isOptional="true" />
                <Attr rule="hashAttr" isOptional="true" />
                <Attr rule="optionsAttr" isOptional="true" />
            </Attrs>
        </Tag>
        <Def>
            <ZeroOrMore><Ref name="macroList"/></ZeroOrMore>
            <ZeroOrMore><Ref name="compilationUnit"/></ZeroOrMore>
        </Def>
    </TagRule>

    <TagRule name="compilationUnit" lang="C,C++,C#,Java" title="compilation unit">
        <Desc>
        </Desc>
        <Tag elem="unit">
            <Attrs>
                <Attr rule="dirAttr" isOptional="true"/>
                <Attr rule="filenameAttr" isOptional="true" />
                <Attr rule="languageAttr" isOptional="true" />
                <Attr rule="hashAttr" isOptional="true" />
                <Attr rule="optionsAttr" isOptional="true" />
            </Attrs>
        </Tag>
        <Def>
            <ZeroOrMore><Ref name="macroList"/></ZeroOrMore>
            <ZeroOrMore><Ref name="topLevelElements"/></ZeroOrMore>
        </Def>
    </TagRule>

    <AttrRule name="dirAttr" lang="C,C++,C#,Java">
        <Attr name="dir" />
        <Desc>
        The directory attribute for a unit.
        </Desc>
        <Def>
            <Text/>
        </Def>
    </AttrRule>

    <AttrRule name="languageAttr" lang="C,C++,C#,Java">
        <Attr name="language" />
        <Desc>
        The language used by srcML to create the current unit.
        </Desc>
        <Def>
            <Choice>
                <Literal value="C"/>
                <Literal value="C++"/>
                <Literal value="C#"/>
                <Literal value="Java"/>
            </Choice>
        </Def>
    </AttrRule>

    <AttrRule name="filenameAttr" lang="C,C++,C#,Java">
        <Attr name="filename" />
        <Desc>The file that was used to create the current unit.</Desc>
        <Def>
            <Text/>
        </Def>
    </AttrRule>

    <AttrRule name="hashAttr" lang="C,C++,C#,Java">
        <Attr name="hash" />
        <Desc>Not Sure.</Desc>
        <Def>
            <Text/>
        </Def>
    </AttrRule>

    <AttrRule name="optionsAttr" lang="C,C++,C#,Java">
        <Attr name="options" />
        <Desc>Not Sure.</Desc>
        <Def>
            <Text/>
        </Def>
    </AttrRule>

    
    <!-- src:macro-list -->
    <TagRule name="macroList" lang="C,C++,C#" title="macro list">
        <Desc>

        </Desc>
        <Tag elem="macro-list">
            <Attrs>
                <Attr rule="macroTokenAttr" isOptional="False"/>
                <Attr rule="macroTypeAttr" isOptional="False" />
            </Attrs>
        </Tag>
        <Def>
            <Empty />
        </Def>
    </TagRule>

    <AttrRule name="macroTokenAttr" lang="C,C++,C#">
        <Attr name="token" />
        <Desc>The element QName to mark as a macro.</Desc>
        <Def>
            <Text/>
        </Def>
    </AttrRule>

    <AttrRule name="macroTypeAttr" lang="C,C++,C#">
        <Attr name="type" />
        <Desc>The value for the token.</Desc>
        <Def>
            <Text/>
        </Def>
    </AttrRule>

    <!-- src:comment-->
    <TagRule name="comment" lang="C,C++,C#,Java" title="">
        <Tag elem="comment">
            <Attrs>
                <Attr rule="commentTypeAttr" isOptional="false" />
                <Attr rule="commentFormatAttr" isOptional="true" />
            </Attrs>
        </Tag>
        <Def>
            <Text />
        </Def>
    </TagRule>

    <AttrRule name="commentTypeAttr" lang="C,C++,C#,Java">
        <Attr name="type" />
        <Desc>The type of comment either a line comment or a block comment.</Desc>
        <Def>
            <Choice>
                <Literal value="line"/>
                <Literal value="block"/>
            </Choice>
        </Def>
    </AttrRule>

    <AttrRule name="commentFormatAttr" lang="C,C++,C#,Java">
        <Attr name="format" />
        <Desc>Indicates a possible format of a comment.</Desc>
        <Def>
            <Choice>
                <Literal value="doxygen"/>
                <Literal value="javadoc"/>
            </Choice>
        </Def>
    </AttrRule>
    
    <!-- src:escape -->
    <TagRule name="escape" lang="C,C++,C#,Java">
        <Tag elem="escape">
            <Attrs>
                <Attr rule="charAttr" isOptional="false" />
            </Attrs>
        </Tag>
        <Def>
            <Empty />
        </Def>
    </TagRule>

    <AttrRule name="charAttr" lang="C,C++,C#,Java">
        <Attr name="char" />
        <Desc>Escaped character code.</Desc>
        <Def>
            <Text />
        </Def>
    </AttrRule>
    
    
    <Rule name="topLevelElements" lang="C,C++,C#,Java">
        <Desc>All of the elements which can occur at the top level of a compilation unit.</Desc>
        <Def>
            <Choice>
                <Ref name="anyCPPOrCommentOrText"/>
                <Ref name="ASM" />
                <Ref name="staticAssert" />
                <Ref name="assertStmt" />
                <Ref name="block" />
                <Ref name="break"/>
                <Ref name="yieldBreak" />
                <Ref name="breakTo"/>
                <Ref name="case" />
                <Ref name="catchStmt" />
                <Ref name="checkedBlock" />
                <Ref name="classInterfaceOrAnnotation"/>
                <Ref name="classDecl" />
                <Ref name="constructorQualified" />
                <Ref name="continue" />
                <Ref name="continueTo" />
                <Ref name="declStmt" />
                <Ref name="defaultCase" />
                <Ref name="destructor" />
                <Ref name="destructorDecl" />
                <Ref name="destructorQualified" />
                <Ref name="do" />
                <Ref name="else" />
                <Ref name="elseif" />
                <Ref name="emptyStmt" />
                <Ref name="exprStmt" />
                <Ref name="enum" />
                <Ref name="event" />
                <Ref name="externBlock" />
                <Ref name="finallyBlock" />
                <Ref name="fixed" />
                <Ref name="for" />
                <Ref name="foreach" />
                <Ref name="function" />
                <Ref name="functionOperator" />
                <Ref name="functionDecl" />
                <Ref name="functionDeclOperator" />
                <Ref name="genericSelection" />
                <Ref name="goto" />
                <Ref name="gotoCaseOrDefault" />
                <Ref name="if" />
                <Ref name="import" />
                <Ref name="label" />
                <Ref name="linq" />
                <Ref name="lock" />
                <Ref name="namespace" />
                <Ref name="package" />
                <Ref name="private" />
                <Ref name="property" />
                <Ref name="protected" />
                <Ref name="public" />
                <Ref name="return" />
                <Ref name="yieldReturn" />
                <Ref name="staticInitializationBlock" />
                <Ref name="struct" />
                <Ref name="structDecl" />
                <Ref name="switch" />
                <Ref name="synchronized" />
                <Ref name="throw" />
                <Ref name="try" />
                <Ref name="typedef" />
                <Ref name="unchecked" />
                <Ref name="union" />
                <Ref name="unionDecl" />
                <Ref name="unsafe" />
                <Ref name="usingStmt" />
                <Ref name="usingDirectiveCPlusPlus" />
                <Ref name="usingDirectiveCSharp" />
                <Ref name="usingNamespace" />
                <Ref name="while" />
            </Choice>
        </Def>
    </Rule>
    
    <Rule name="anyCPPOrCommentOrText" lang="C,C++,C#,Java" title="any C preprocessor, comment or text">
        <Desc>A listing of all elements which can occur anywhere.</Desc>
        <Def>
            <Choice>
                <Ref name="cppDefine" />
                <Ref name="cppIf" />
                <Ref name="cppIfDef" />
                <Ref name="cppIfNDef" />
                <Ref name="cppElIf" />
                <Ref name="cppElse" />
                <Ref name="cppEndIf" />
                <Ref name="cppRegion" />
                <Ref name="cppEndRegion" />
                <Ref name="cppError" />
                <Ref name="cppWarning" />
                <Ref name="cppInclude" />
                <Ref name="cppLine" />
                <Ref name="cppPragma" />
                <Ref name="cppUndef" />
                <Ref name="cppEmpty" />
                <Ref name="comment" />
                <Ref name="escape" />
            </Choice>
        </Def>
    </Rule>

    <!-- cpp:directive -->
    <TagRule name="cppDirective" lang="C,C++,C#">
        <Tag ns="cpp" elem="directive"/>
        <Params>
            <Param name="value" />
        </Params>
        <Def>
            <ParamUse name="value" />
        </Def>
    </TagRule>

    <!-- cpp:define -->
    <Rule name="cppDefine" lang="C,C++,C#">
        <Def>
            <Choice>
                <Ref name="cppDefineName"/>
                <Ref name="cppDefineFunction"/>
            </Choice>
        </Def>
    </Rule>

    <TagRule name="cppDefineName" lang="C,C++,C#">
        <Tag ns="cpp" elem="define"/>
        <Def>
            <Literal value="#" />
            <Ref name="cppDirective">
                <Args>
                    <Arg><Literal value="define" /></Arg>
                </Args>
            </Ref>
            <Optional>
                <Ref name="cppMacro"/>
                <Optional>
                    <Choice>
                        <Ref name="cppValue" />
                        <Ref name="cppNumber" />
                    </Choice>
                </Optional>
            </Optional>
        </Def>
    </TagRule>

    <TagRule name="cppDefineFunction" lang="C,C++">
        <Tag ns="cpp" elem="define"/>
        <Def>
            <Literal value="#" />
            <Ref name="cppDirective">
                <Args>
                    <Arg><Literal value="define" /></Arg>
                </Args>
            </Ref>
                <Ref name="cppMacroFunction"/>
                <Optional>
                    <Choice>
                        <Ref name="cppValue" />
                        <Ref name="cppNumber" />
                    </Choice>
            </Optional>
        </Def>
    </TagRule>

    <!-- cpp:macro -->
    <TagRule name="cppMacro" lang="C,C++,C#">
        <Tag ns="cpp" elem="macro"/>
        <Def>
            <Ref name="simpleName" />
        </Def>
    </TagRule>

    <TagRule name="cppMacroFunction" lang="C,C++">
        <Tag ns="cpp" elem="macro" />
        <Def>
            <Ref name="simpleName" />
            <Ref name="parameterList" />
        </Def>
    </TagRule>

    <!-- cpp:number -->
    <TagRule name="cppNumber" lang="C,C++,C#">
        <Tag ns="cpp" elem="number" />
        <Def>
            <Number />
        </Def>
    </TagRule>

    <!-- cpp:value -->
    <TagRule name="cppValue" lang="C,C++,C#">
        <Tag ns="cpp" elem="value" />
        <Def>
            <Text/>
        </Def>
    </TagRule>

    <!-- cpp:if -->
    <TagRule name="cppIf" lang="C,C++,C#">
        <Tag ns="cpp" elem="if" />
        <Def>
            <Literal value="#"/>
            <Ref name="cppDirective">
                <Args>
                    <Arg>
                        <Literal value="if" />
                    </Arg>
                </Args>
            </Ref>
            <Optional>
                <Ref name="expr" />
            </Optional>
        </Def>
    </TagRule>

    <!-- cpp:ifdef -->
    <TagRule name="cppIfDef" lang="C,C++,C#">
        <Tag ns="cpp" elem="ifdef" />
        <Def>
            <Literal value="#"/>
            <Ref name="cppDirective">
                <Args>
                    <Arg>
                        <Literal value="ifdef" />
                    </Arg>
                </Args>
            </Ref>
            <Optional>
                <Ref name="cppMacro" />
            </Optional>
        </Def>
    </TagRule>

    <!-- cpp:ifndef -->
    <TagRule name="cppIfNDef" lang="C,C++,C#">
        <Tag ns="cpp" elem="ifndef" />
        <Def>
            <Literal value="#"/>
            <Ref name="cppDirective">
                <Args>
                    <Arg>
                        <Literal value="ifndef" />
                    </Arg>
                </Args>
            </Ref>
            <Optional>
                <Ref name="cppMacro" />
            </Optional>
        </Def>
    </TagRule>

    <!-- cpp:elif -->
    <TagRule name="cppElIf" lang="C,C++,C#">
        <Tag ns="cpp" elem="elif" />
        <Def>
            <Literal value="#"/>
            <Ref name="cppDirective">
                <Args>
                    <Arg>
                        <Literal value="elif" />
                    </Arg>
                </Args>
            </Ref>
            <Optional>
                <Ref name="cppMacro" />
            </Optional>
        </Def>
    </TagRule>

    <!-- cpp:else -->
    <TagRule name="cppElse" lang="C,C++,C#">
        <Tag ns="cpp" elem="else" />
        <Def>
            <Literal value="#"/>
            <Ref name="cppDirective">
                <Args>
                    <Arg>
                        <Literal value="else" />
                    </Arg>
                </Args>
            </Ref>
        </Def>
    </TagRule>

    <!-- cpp:endif -->
    <TagRule name="cppEndIf" lang="C,C++,C#">
        <Tag ns="cpp" elem="endif" />
        <Def>
            <Literal value="#"/>
            <Ref name="cppDirective">
                <Args>
                    <Arg>
                        <Literal value="endif" />
                    </Arg>
                </Args>
            </Ref>
        </Def>
    </TagRule>

    <!-- cpp:region -->
    <TagRule name="cppRegion" lang="C#">
        <Tag ns="cpp" elem="region" />
        <Def>
            <Literal value="#"/>
            <Ref name="cppDirective">
                <Args>
                    <Arg>
                        <Literal value="region" />
                    </Arg>
                </Args>
            </Ref>
            <ZeroOrMore>
                <Choice>
                    <Ref name="simpleName" /> 
                    <Ref name="cppLiteral" />
                    <Text />
                </Choice>
            </ZeroOrMore>
        </Def>
    </TagRule>

    <!-- cpp:endregion -->
    <TagRule name="cppEndRegion" lang="C#">
        <Tag ns="cpp" elem="endregion" />
        <Def>
            <Literal value="#"/>
            <Ref name="cppDirective">
                <Args>
                    <Arg>
                        <Literal value="endregion" />
                    </Arg>
                </Args>
            </Ref>
        </Def>
    </TagRule>

    <!-- cpp:error -->
    <TagRule name="cppError" lang="C,C++,C#">
        <Tag ns="cpp" elem="error" />
        <Def>
            <Literal value="#"/>
            <Ref name="cppDirective">
                <Args>
                    <Arg>
                        <Literal value="error" />
                    </Arg>
                </Args>
            </Ref>
            <ZeroOrMore>
                <Choice>
                    <Ref name="simpleName" /> 
                    <Ref name="cppLiteral" />
                    <Text />
                </Choice>
            </ZeroOrMore>
        </Def>
    </TagRule>

    <!-- cpp:literal -->
    <TagRule name="cppLiteral" lang="C,C++,C#">
        <Tag ns="cpp" elem="literal" />
        <Def>
            <Text/>
        </Def>
    </TagRule>

    <!-- cpp:warning -->
    <TagRule name="cppWarning" lang="C,C++,C#">
        <Tag ns="cpp" elem="warning" />
        <Def>
            <Literal value="#"/>
            <Ref name="cppDirective">
                <Args>
                    <Arg>
                        <Literal value="warning" />
                    </Arg>
                </Args>
            </Ref>
            <ZeroOrMore>
                <Choice>
                    <Ref name="simpleName" /> 
                    <Ref name="cppLiteral" />
                    <Text />
                </Choice>
            </ZeroOrMore>
        </Def>
    </TagRule>

    <!-- cpp:include -->
    <TagRule name="cppInclude" lang="C,C++">
        <Tag ns="cpp" elem="include" />
        <Def>
            <Literal value="#"/>
            <Ref name="cppDirective">
                <Args>
                    <Arg>
                        <Literal value="include" />
                    </Arg>
                </Args>
            </Ref>
            <Optional>
                <Ref name="cppFile" />
            </Optional>
        </Def>
    </TagRule>
    
    <!-- cpp:file -->
    <Rule name="cppFile" lang="C,C++">
        <Def>
            <Choice>
                <Ref name="cppFileSearch" />
                <Ref name="cppFileRelative" />
            </Choice>
        </Def>
    </Rule>

    <TagRule name="cppFileRelative" lang="C,C++">
        <Tag ns="cpp" elem="file"/>
        <Def>
            <Literal value="&lt;"/>
            <Text />
            <Literal value="&gt;"/>
        </Def>
    </TagRule>

    <TagRule name="cppFileSearch" lang="C,C++,C#">
        <Tag ns="cpp" elem="file"/>
        <Def>
            <Literal value="\&quot;"/>
            <Text />
            <Literal value="\&quot;"/>
        </Def>
    </TagRule>

    <!-- cpp:line -->
    <Rule name="cppLine" lang="C,C++,C#">
        <Def>
            <Choice>
                <Ref name="lineNumberAndFile" />
                <Ref name="lineHiddenOrDefault" />
            </Choice>
        </Def>
    </Rule>
    
    <TagRule name="lineNumberAndFile" lang="C,C++,C#">
        <Tag ns="cpp" elem="line"/>
        <Def>
            <Literal value="#"/>
            <Ref name="cppDirective">
                <Args>
                    <Arg>
                        <Literal value="line" />
                    </Arg>
                </Args>
            </Ref>
            <Optional>
                <Ref name="cppNumber" />
            </Optional>
            <Optional>
                <Ref name="cppFileRelative" />
            </Optional>
        </Def>
    </TagRule>
    
    <TagRule name="lineHiddenOrDefault" lang="C#">
        <Tag ns="cpp" elem="line"/>
        <Def>
            <Literal value="#"/>
            <Ref name="cppDirective">
                <Args>
                    <Arg>
                        <Literal value="line" />
                    </Arg>
                </Args>
            </Ref>
            <Tag elem="name">
                <Choice>
                    <Literal value="hidden"/>
                    <Literal value="default"/>
                </Choice>
            </Tag>
        </Def>
    </TagRule>

    <!-- cpp:pragma -->    
    <TagRule name="cppPragma" lang="C,C++,C#">
        <Tag ns="cpp" elem="pragma"/>
        <Def>
            <Literal value="#"/>
            <Ref name="cppDirective">
                <Args>
                    <Arg>
                        <Literal value="pragma" />
                    </Arg>
                </Args>
            </Ref>
            <ZeroOrMore>
                <Choice>
                    <Ref name="simpleName" /> 
                    <Ref name="cppLiteral" />
                    <Text />
                </Choice>
            </ZeroOrMore>
        </Def>
    </TagRule>
    
    <!-- cpp:undef -->    
    <TagRule name="cppUndef" lang="C,C++,C#">
        <Tag ns="cpp" elem="undef"/>
        <Def>
            <Literal value="#"/>
            <Ref name="cppDirective">
                <Args>
                    <Arg>
                        <Literal value="pragma" />
                    </Arg>
                </Args>
            </Ref>
            <Optional>
                <Ref name="simpleName" />
            </Optional>
        </Def>
    </TagRule>
    
    <!-- cpp:empty -->    
    <TagRule name="cppEmpty" lang="C,C++,C#">
        <Tag ns="cpp" elem="empty"/>
        <Def>
            <Literal value="#"/>
        </Def>
    </TagRule>

    <!-- src:if -->
    <TagRule name="if" lang="C,C++,C#,Java">
        <Tag elem="if"/>
        <Def>
            <Literal value="if"/>
            <Optional>
                <Ref name="condition"/>
            </Optional>
            <Ref name="then"/>
            <ZeroOrMore>
                <Choice>
                    <Ref name="else"/>
                    <Ref name="elseif"/>
                </Choice>
            </ZeroOrMore>
        </Def>
    </TagRule>
    
    <!-- src:condition -->
    <TagRule name="condition" lang="C,C++,C#,Java">
        <Tag elem="condition"/>
        <Def>
            <Literal value="("/>
            <Optional>
                <Ref name="expr" />
            </Optional>
            <Literal value=")"/>
        </Def>
    </TagRule>
    
    <TagRule name="forCondition" lang="C,C++,C#,Java">
        <Tag elem="condition"/>
        <Def>
            <Ref name="expr"/>
            <Literal value=";" />
        </Def>
    </TagRule>
    
    <!-- src:then -->
    <TagRule name="then" lang="C,C++,C#,Java">
        <Tag elem="then" />
        <Def>
            <Choice>
                <Ref name="block"/>
                <Ref name="pseudoBlock"/>
            </Choice>
        </Def>
    </TagRule>
    
    <!-- src:elseif -->
    <TagRule name="elseif" lang="C,C++,C#,Java">
        <Tag elem="elseif" />
        <Def>
            <Literal value="else"/>
            <Ref name="if"/>
        </Def>
    </TagRule>
    
    <!-- src:else -->
    <TagRule name="else" lang="C,C++,C#,Java">
        <Tag elem="else" />
        <Def>
            <Literal value="else"/>
            <Choice>
                <Ref name="block"/>
                <Ref name="pseudoBlock"/>
            </Choice>
        </Def>
    </TagRule>
    
    <!-- src:while -->
    <TagRule name="while" lang="C,C++,C#,Java">
        <Tag elem="while" />
        <Def>
            <Literal value="while"/>            
            <Optional>
                <Ref name="condition" />
            </Optional>
            <Choice>
                <Ref name="block"/>
                <Ref name="pseudoBlock"/>
            </Choice>
        </Def>
    </TagRule>
    
    <!-- src:do -->
    <TagRule name="do" lang="C,C++,C#,Java">
        <Tag elem="do" />
        <Def>
            <Literal value="do"/>
            <Choice>
                <Ref name="block"/>
                <Ref name="pseudoBlock"/>
            </Choice>            
            <Optional>
                <Literal value="while" />
            </Optional>
            <Optional>
                <Ref name="condition"/>
            </Optional>
            <Optional>
                <Literal value=";" />
            </Optional>
        </Def>
    </TagRule>    

    <!-- src:for -->
    <TagRule name="for" lang="C,C++,C#,Java">
        <Tag elem="for" />
        <Def>
            <Literal value="for"/>
            <Optional>
                <Ref name="forControl" />
            </Optional>
            <Choice>
                <Ref name="block"/>
                <Ref name="pseudoBlock"/>
            </Choice>
        </Def>
    </TagRule>
    
    <!-- src:foreach -->
    <TagRule name="foreach" lang="C#">
        <Tag elem="foreach" />
        <Def>
            <Literal value="for"/>
            <Optional>
                <Ref name="foreachControl" />
            </Optional>
            <Choice>
                <Ref name="block"/>
                <Ref name="pseudoBlock"/>
            </Choice>
        </Def>
    </TagRule>

    <!-- src:control -->
    <TagRule name="forControl" lang="C,C++,C#,Java">
        <Tag elem="control"/>
        <Desc>This is for a traditional for loop's control.</Desc>
        <Def>
            <Literal value="("/>
            <Optional>
                <Ref name="forInit" />
                <Optional>
                    <Ref name="forCondition"/>
                    <Optional>
                        <Ref name="forIncr" />
                    </Optional>
                </Optional>
            </Optional>
            <Literal value=")"/>
        </Def>
    </TagRule>
    
    <TagRule name="foreachControl" lang="C#">
        <Tag elem="control"/>
        <Def>
            <Literal value="("/>
            <Ref name="controlInit" />
            <Literal value=")"/>
        </Def>
    </TagRule>

    <!-- src:init -->
    <TagRule name="forInit" lang="C,C++,C#,Java">
        <Tag elem="init"/>
        <Def>
            <Choice>
                <Ref name="expr"/>
                <Ref name="decl"/>
            </Choice>
            <Optional>
                <Literal value=";"/>
            </Optional>
        </Def>
    </TagRule>
    
    <TagRule name="controlInit" lang="C,C++,C#,Java">
        <Tag elem="init"/>
        <Def>
            <Choice>
                <Ref name="decl"/>
                <Ref name="expr"/>
            </Choice>
            <ZeroOrMore>
                <Literal value=","/>
                <Choice>
                    <Ref name="decl"/>
                    <Ref name="expr"/>
                </Choice>
            </ZeroOrMore>
        </Def>
    </TagRule>

    <TagRule name="typeInit" lang="C++">
        <Tag elem="init"/>
        <Def>
            <Literal value="="/>
            <Tag elem="type">
                <Ref name="expr"/>
            </Tag>
        </Def>
    </TagRule>

    <TagRule name="init" lang="C,C++,C#,Java">
        <Tag elem="init"/>
        <Def>
            <Literal value="="/>
            <Ref name="expr"/>
        </Def>
    </TagRule>
    
    <!-- src:incr -->
    <TagRule name="forIncr" lang="C,C++,C#,Java">
        <Tag elem="incr"/>
        <Def>
            <Ref name="expr" />
        </Def>
    </TagRule>

    <!-- src:switch -->
    <TagRule name="switch" lang="C,C++,C#,Java">
        <Tag elem="switch" />
        <Def>
            <Literal value="switch"/>
            <Optional>
                <Ref name="condition"/>
            </Optional>
            <Choice>
                <Ref name="block"/>
                <Ref name="pseudoBlock"/>
            </Choice>
        </Def>
    </TagRule>

    <!-- src:case -->
    <TagRule name="case" lang="C,C++,C#,Java">
        <Tag elem="case" />
        <Def>
            <Literal value="case" />
            <Optional>
                <Choice>
                    <Ref name="name" />
                    <Ref name="literal" />
                </Choice>
            </Optional>
        </Def>
    </TagRule>

    <!-- src:default -->
    <TagRule name="defaultCase" lang="C,C++,C#,Java">
        <Tag elem="default"/>
        <Def>
            <Literal value="default"/>
            <Literal value=":"/>
        </Def>
    </TagRule>
    
    <TagRule name="defaultCall" lang="Java">
        <Tag elem="default"/>
        <Def>
            <NoImpl/>
        </Def>
    </TagRule>

    <!-- src:continue -->
    <TagRule name="continue" lang="C,C++,C#,Java">
        <Tag elem="continue"/>
        <Def>
            <Literal value="continue"/>
            <Optional>
                <Literal value=";"/>
            </Optional>
        </Def>
    </TagRule>
    
    <TagRule name="continueTo" lang="Java">
        <Tag elem="continue"/>
        <Def>
            <Literal value="continue"/>
            <Ref name="name" />
            <Optional>
                <Literal value=";"/>
            </Optional>
        </Def>
    </TagRule>


    <!-- src:return -->
    <TagRule name="return" lang="C,C++,C#,Java">
        <Tag elem="return" />
        <Def>
            <Literal value="return"/>
            <Optional>
                <Ref name="expr"/>
            </Optional>
            <Optional>
                <Literal value=";"/>
            </Optional>
        </Def>
    </TagRule>
    
    <TagRule name="yieldReturn" lang="C#">
        <Tag elem="return" />
        <Def>
            <Tag elem="specifier">
                <Literal value="yield"/>
            </Tag>
            <Literal value="return"/>
            <Optional>
                <Ref name="expr"/>
            </Optional>
            <Optional>
                <Literal value=";"/>
            </Optional>
        </Def>
    </TagRule>

    <!-- src:break -->
    <TagRule name="break" lang="C,C++,C#,Java">
        <Tag elem="break" />
        <Def>
            <Literal value="break" />
            <Optional>
                <Literal value=";" />
            </Optional>
        </Def>
    </TagRule>
    
    <TagRule name="yieldBreak" lang="C#">
        <Tag elem="break" />
        <Def>
            <Tag elem="specifier">
                <Literal value="yield" />
            </Tag>
            <Literal value="break" />
            <Optional>
                <Literal value=";" />
            </Optional>
        </Def>
    </TagRule>
    
    <TagRule name="breakTo" lang="Java">
        <Tag elem="break" />
        <Def>
            <Literal value="break" />
            <Ref name="simpleName" />
            <Optional>
                <Literal value=";" />
            </Optional>
        </Def>
    </TagRule>


    <!-- src:decl_stmt -->
    <TagRule name="declStmt" lang="C,C++,C#,Java">
        <Tag elem="decl_stmt"/>
        <Def>
            <Ref name="decl"/>
            <ZeroOrMore>
                <Literal value=","/>
                <Ref name="decl"/>
            </ZeroOrMore>
            <Optional>
                <Literal value=";"/>
            </Optional>
        </Def>
    </TagRule>
    
    <!-- src:expr_stmt -->
    <TagRule name="exprStmt" lang="C,C++,C#,Java">
        <Tag elem="expr_stmt" />
        <Def>
            <Ref name="expr"/>
            <ZeroOrMore>
                <Tag elem="operator">
                    <Literal value=","/>
                </Tag>
                <Ref name="expr"/>
            </ZeroOrMore>
            <Optional>
                <Literal value=";"/>
            </Optional>
        </Def>
    </TagRule>
    
    <!-- src:empty_stmt -->
    <TagRule name="emptyStmt" lang="C,C++,C#,Java">
        <Tag elem="empty_stmt" />
        <Def>
            <Literal value=";"/>
        </Def>
    </TagRule>
    
    <!-- src:goto -->
    <TagRule name="goto" lang="C,C++,C#">
        <Tag elem="goto"/>
        <Def>
            <Literal value="goto"/>
            <Optional>
                <Choice>
                    <Ref name="name" />
                    <Ref name="literal"/>
                </Choice>
            </Optional>
            <Optional>
                <Literal value=";" />
            </Optional>
        </Def>
    </TagRule>
    
    <TagRule name="gotoCaseOrDefault" lang="C#">
        <Tag elem="goto"/>
        <Def>
            <Literal value="goto"/>
            <Choice>
                <Literal value="default"/>
                <Tag elem="name">
                    <Literal value="case"/>
                    <Choice>
                        <Ref name="name"/>
                        <Ref name="literal"/>
                    </Choice>
                </Tag>
            </Choice>
            <Optional>
                <Literal value=";" />
            </Optional>
        </Def>
    </TagRule>

    <!-- src:label -->
    <TagRule name="label" lang="C,C++,C#,Java">
        <Tag elem="label"/>
        <Def>
            <Optional>
                <Ref name="simpleName"/>
            </Optional>
            <Literal value=":"/>
        </Def>
    </TagRule>

    <!-- src:block -->
    <TagRule name="block" lang="C,C++,C#,Java">
        <Tag elem="block" />
        <Def>
            <Literal value="{"/>
            <ZeroOrMore>
                <Ref name="topLevelElements" />
            </ZeroOrMore>
            <Literal value="}"/>
        </Def>
    </TagRule>

    <TagRule name="CPlusPlusClassBodyBlock" lang="C++">
        <Tag elem="block" />
        <Def>
            <Literal value="{"/>
            <Ref name="privateDefault" />
            <Choice>            
                <ZeroOrMore>
                    <Choice>
                        <Ref name="public" />
                        <Ref name="private" />
                        <Ref name="protected" />
                    </Choice>
                </ZeroOrMore>
            </Choice>
            <Literal value="}"/>
        </Def>
    </TagRule>
    
    <TagRule name="CPlusPlusStructBodyBlock" lang="C++">
        <Tag elem="block" />
        <Def>
            <Literal value="{"/>
            <Ref name="publicDefault" />
            <Choice>            
                <ZeroOrMore>
                    <Choice>
                        <Ref name="public" />
                        <Ref name="private" />
                        <Ref name="protected" />
                    </Choice>
                </ZeroOrMore>
            </Choice>
            <Literal value="}"/>
        </Def>
    </TagRule>
    
    <TagRule name="pseudoBlock" lang="C,C++,C#,Java">
        <Tag elem="block">
            <Attrs>
                <Attr rule="typePseudoAttr" />
            </Attrs>
        </Tag>
        <Def>
            <Optional>
                <Ref name="topLevelElements" />
            </Optional>
        </Def>
    </TagRule>
    
    <AttrRule name="typePseudoAttr" lang="C,C++,C#,Java">
        <Attr name="type" />
        <Def>
            <Literal value="pseudo"/>
        </Def>
    </AttrRule>
    
    <!-- src:typedef -->
    <TagRule name="typedef" lang="C,C++">
        <Tag elem="typedef" />
        <Def>
            <Literal value="typedef" />
            <Optional>
                <Ref name="type"/>
                <Optional>
                    <Ref name="simpleName"/>
                </Optional>
            </Optional>
            <Optional>
                <Literal value=";"/>
            </Optional>
        </Def>
    </TagRule>

    <!-- src:assert -->    
    <TagRule name="assertStmt" lang="Java">
        <Tag elem="assert"/>
        <Def>
            <Literal value="assert" />
            <Optional>
                <Ref name="expr" />
            </Optional>
            <Optional>
                <Tag elem="operator">
                    <Literal value=":" />
                </Tag>
                <Optional>
                    <Ref name="expr" />
                </Optional>
            </Optional>
        </Def>
    </TagRule>
    
    <TagRule name="staticAssert" lang="C">
        <Tag elem="assert">
            <Attrs>
                <Attr rule="typeStaticAttr" />
            </Attrs>
        </Tag>
        <Def>
            <Literal value="_Static_assert" />
            <Optional>
                <Ref name="argumentList" />
            </Optional>
        </Def>
    </TagRule>
    
    <AttrRule name="typeStaticAttr" lang="C">
        <Attr name="type" />
        <Def>
            <Literal value="static"/>
        </Def>
    </AttrRule>

    <!-- src:using_stmt -->
    <TagRule name="usingStmt" lang="C#">
        <Tag elem="using_stmt" />
        <Def>
            <Literal value="using"/>
            <Literal value="("/>
            <Optional>
                <Ref name="controlInit"/>
            </Optional>
            <Literal value=")"/>
            <Choice>
                <Ref name="block"/>
                <Ref name="pseudoBlock"/>
            </Choice>
        </Def>
    </TagRule>

    <!-- src:lock -->
    <TagRule name="lock" lang="C#">
        <Tag elem="lock"/>
        <Def>
            <Literal value="lock"/>
            <Literal value="("/>
            <Optional>
                <Ref name="controlInit"/>
            </Optional>
            <Literal value=")"/>
            <Choice>
                <Ref name="block"/>
                <Ref name="pseudoBlock"/>
            </Choice>
        </Def>
    </TagRule>

    <!-- src:synchronized -->
    <TagRule name="synchronized" lang="Java">
        <Tag elem="synchronized" />
        <Def>
            <Literal value="synchronized"/>
            <Literal value="("/>
            <Optional>
                <Ref name="controlInit"/>
            </Optional>
            <Literal value=")"/>
            <Choice>
                <Ref name="block"/>
                <Ref name="pseudoBlock"/>
            </Choice>
        </Def>
    </TagRule>

    <!-- src:unsafe -->
    <TagRule name="unsafe" lang="C#">
        <Tag elem="unsafe" />
        <Def>
            <Literal value="unsafe"/>
            <Ref name="block"/>
        </Def>
    </TagRule>

    <!-- src:fixed -->
    <TagRule name="fixed" lang="C#">
        <Tag elem="fixed" />
        <Def>
            <Literal value="fixed"/>
            <Literal value="("/>
            <Optional>
                <Ref name="controlInit"/>
            </Optional>
            <Literal value=")"/>
            <Choice>
                <Ref name="block"/>
                <Ref name="pseudoBlock"/>
            </Choice>
        </Def>
    </TagRule>
    
    <TagRule name="fixedCall" lang="C#">
        <Tag elem="fixed" />
        <Def>
            <NoImpl/>
        </Def>
    </TagRule>

    <!-- src:asm -->    
    <TagRule name="ASM" lang="C,C++">
        <Tag elem="asm"/>
        <Def>
            <Choice>
                <Literal value="asm" />
                <Literal value="__asm__"/>
                <Literal value="__asm"/>
            </Choice>
            <ZeroOrMore>            
                <Choice>
                    <Text />
                    <Ref name="ASM" />
                </Choice>
            </ZeroOrMore>
            <Optional>
                <Literal value=";"/>
            </Optional>
        </Def>
    </TagRule>

    <!-- src:namespace -->
    <TagRule name="namespace" lang="C++,C#">
        <Tag elem="namespace"/>
        <Def>
            <Optional>
                <Tag elem="specifier">
                    <Literal value="inline"/>
                </Tag>
            </Optional>
            <Literal value="namespace"/>
            <Optional>
                <Ref name="name"/>
            </Optional>
            <Optional>
                <Choice>
                    <Ref name="block"/>
                    <Group>
                        <Literal value="="/>
                        <Optional>
                            <Ref name="name"/>
                        </Optional>
                    </Group>
                </Choice>
            </Optional>
        </Def>
    </TagRule>
    
    <!-- src:using -->
    <TagRule name="usingDirectiveCPlusPlus" lang="C++">
        <Tag elem="using" />
        <Def>
            <ZeroOrMore>
                <Ref name="template"/>
            </ZeroOrMore>
            <Literal value="using"/>
            <Optional>
                <Ref name="simpleName"/>
                <Optional>
                    <Ref name="typeInit" />
                </Optional>
            </Optional>
            <Optional>
                <Literal value=";"/>
            </Optional>
        </Def>
    </TagRule>
    
    <TagRule name="usingNamespace" lang="C++">
        <Tag elem="using" />
        <Def>
            <Literal value="using"/>
            <Literal value="namespace"/>
            <Optional>
                <Ref name="name"/>
            </Optional>
            <Optional>
                <Literal value=";"/>
            </Optional>
        </Def>
    </TagRule>
    
    <TagRule name="usingDirectiveCSharp" lang="C#">
        <Tag elem="using" />
        <Def>
            <Literal value="using"/>
            <Optional>
                <Ref name="name"/>
            </Optional>
            <Optional>
                <Ref name="init"/>
            </Optional>
            <Optional>
                <Literal value=";"/>
            </Optional>
        </Def>
    </TagRule>
    
    <!-- src:extern -->
    <TagRule name="externBlock" lang="C,C++">
        <Tag elem="extern" />
        <Def>
            <Literal value="extern"/>
            <Ref name="literal"/>
            <Choice>
                <Ref name="block"/>
                <Ref name="declStmt"/>
                <Ref name="functionDecl"/>
            </Choice>
        </Def>
    </TagRule>

    <!-- src:import -->
    <TagRule name="import" lang="Java">
        <Tag elem="import"/>
        <Def>
            <Literal value="import"/>
            <Optional>
                <Ref name="name"/>
            </Optional>
            <Optional>
                <Literal value=";"/>
            </Optional>
        </Def>
    </TagRule>
   
    <!-- src:package -->
    <TagRule name="package" lang="Java">
        <Tag elem="package" />
        <Def>
            <Literal value="package"/>
            <Optional>
                <Ref name="name"/>
            </Optional>
            <Optional>
                <Literal value=";"/>
            </Optional>
        </Def>
    </TagRule>

    <!-- src:template -->
    <TagRule name="template" lang="C++">
        <Tag elem="template" />
        <Def>
            <Literal value="template"/>
            <Optional>
                <Ref name="templateParameterList"/>
            </Optional>
        </Def>
    </TagRule>
    
   <!-- src:typename -->
    <TagRule name="typename" lang="C++">
        <Tag elem="typename" />
        <Def>
            <Literal value="typename"/>
        </Def>
    </TagRule>

    <!-- src:function -->
    <TagRule name="function" lang="C,C++,C#,Java">
        <Tag elem="function"/>
        <Def>
            <NoImpl/>
        </Def>
    </TagRule>
    <!-- add special cases for getters, setters adders and removers C#
        I need to look into other functions which occur within other
        languages.
    -->
    <!-- src:function type="operator" -->
    <TagRule name="functionOperator" lang="C,C++,C#">
        <Tag elem="function">
            <Attrs>
                <Attr rule="functionTypeAttr" />
            </Attrs>
        </Tag>
        <Def>
            <NoImpl/>
        </Def>
    </TagRule>
    
    <!-- src:function_decl type="operator" -->
    <TagRule name="functionDeclOperator" lang="C,C++,C#,Java">
        <Tag elem="function_decl">
            <Attrs>
                <Attr rule="functionTypeAttr" />
            </Attrs>
        </Tag>
        <Def>
            <NoImpl/>
        </Def>
    </TagRule>
    
    <!-- src:function_decl -->
    <TagRule name="functionDecl" lang="C,C++,C#">
        <Tag elem="function_decl"/>
        <Def>
            <NoImpl/>
        </Def>
    </TagRule>
   
   
    <!--
    *****************************************
            Not Sorted yet!
    *****************************************
    -->
    <!-- src:generic_selection -->
    <TagRule name="genericSelction" lang="C">
        <Tag elem="generic_selection"/>
        <Def>
            <NoImpl/>            
        </Def>
    </TagRule>
    
    <!-- src:catch-->
    <Rule name="catchStmt" lang="C++,C#,Java">
        <Def>
            <Choice>
                <Ref name="catch" />
                <Ref name="multiTypeCatch" />
            </Choice>
        </Def>
    </Rule>
    
    <TagRule name="catch" lang="C++,C#,Java">
        <Tag elem="catch"/>
        <Def>
            <Literal value="catch" />
            <Optional>
                <Ref name="parameterList"/>
            </Optional>
            <Optional>
                <Ref name="block" />
            </Optional>
        </Def>
    </TagRule>
    
    <TagRule name="multiTypeCatch" lang="Java">
        <Tag elem="catch" />
        <Def>
            <Literal value="catch" />
            <Tag elem="parameter_list">
                <Tag elem="param">
                    <Ref name="decl"/>
                    <ZeroOrMore>
                        <Literal value="|" />
                        <Ref name="decl" />
                    </ZeroOrMore>
                    <Optional>
                        <Ref name="simpleName" />
                    </Optional>
                </Tag>
            </Tag>
            <Optional>
                <Ref name="block" />
            </Optional>
        </Def>
    </TagRule>

    <!-- src:checked -->
    <TagRule name="checkedBlock" lang="C#">
        <Tag elem="checked"/>
        <Def>
            <Literal value="checked" />
            <Ref name="block" />
        </Def>
    </TagRule>

    <!-- src:class -->
    <Rule name="classInterfaceOrAnnotation" lang="C++,C#,Java">
        <Def>
            <Choice>
                <Ref name="CPlusPlusClass" />
                <Ref name="JavaClassInterfaceAndAnnotation" />
                <Ref name="CSharpClass" />
            </Choice>
        </Def>
    </Rule>
    
    <TagRule name="CPlusPlusClass" lang="C++">
        <Tag elem="class">
            <Attrs>
                <Attr rule="classTypeAttr" isOptional="true"/>
            </Attrs>
        </Tag>
        <Def>
            <ZeroOrMore>
                <Ref name="template" />
            </ZeroOrMore>
            <ZeroOrMore>
                <Ref name="CPlusPlusAttribute"/>
            </ZeroOrMore>
            <Literal value="class" />
            <Optional>
                <Ref name="name" />
            </Optional>
            <Optional>
                <Ref name="super"/>
            </Optional>
            <Ref name="CPlusPlusClassBodyBlock"/>
            <Optional>
                <Literal value=";" />
            </Optional>
        </Def>
    </TagRule>

    <TagRule name="CSharpClass" lang="C#">
        <Tag elem="class">
            <Attrs>
                <Attr rule="classTypeAttr" isOptional="true"/>
            </Attrs>
        </Tag>
        <Def>
            <Literal value="class" />
            <Optional>            
                <Ref name="simpleName" />
            </Optional>
            <Optional>
                <Ref name="super" />
            </Optional>
            <Ref name="block" />
        </Def>
    </TagRule>
    
    <TagRule name="JavaClassInterfaceAndAnnotation" lang="Java">
        <Tag elem="class"/>
        <Def>
            <Literal value="class" />
            <Ref name="simpleName"/>
            <Ref name="block" />
        </Def>
    </TagRule>
    
    <AttrRule name="classTypeAttr" lang="C#,Java">
        <Attr name="type"/>
        <Def>
            <Choice>
                <Literal value="interface" />
            </Choice>
        </Def>
    </AttrRule>

    <!-- src:super -->
    <TagRule name="super" lang="C++,C#">
        <Tag elem="super" />
        <Def>
            <Literal value=":"/>
            <Optional>
                <Ref name="specifier"/>
            </Optional>
            <Ref name="name"/>
            <ZeroOrMore>
                <Literal value=","/>
                <Optional>
                    <Ref name="specifier"/>
                </Optional>
                <Ref name="name"/>                
            </ZeroOrMore>
        </Def>
    </TagRule>

    <!-- src:class_decl -->
    <TagRule name="classDecl" lang="C++,C#,Java">
        <Tag elem="alignas"/>
        <Def><NoImpl/></Def>
    </TagRule>

    <!-- src:alignas -->
    <TagRule name="alignasCPlusPlus" lang="C,C++">
        <Tag elem="alignas"/>
        <Def><NoImpl/></Def>
    </TagRule>
    
    <!-- src:alignof -->
    <TagRule name="alignof" lang="C,C++">
        <Tag elem="alignof"/>
        <Def><NoImpl/></Def>
    </TagRule>

    <!-- src:annotation -->
    <TagRule name="annotation" lang="Java">
        <Tag elem="annotation"/>
        <Def><NoImpl/></Def>
    </TagRule>    
    
    <!-- src:argument -->
    <TagRule name="argument" lang="C,C++,C#,Java">
        <Tag elem="argument"/>
        <Def><NoImpl/></Def>
    </TagRule>
   
    <!-- src:association -->
    <TagRule name="association" lang="C">
        <Tag elem="association"/>
        <Def><NoImpl/></Def>
    </TagRule>
    
    <!-- src:association_list -->
    <TagRule name="associationList" lang="C">
        <Tag elem="association_list"/>
        <Def><NoImpl/></Def>
    </TagRule>
    
    <!-- src:atomic -->
    <TagRule name="atomic" lang="C,C++">
        <Tag elem="atomic"/>
        <Def>
            <NoImpl/>
        </Def>
    </TagRule>
    
    <!-- src:attribute -->
    <TagRule name="CSharpAttribute" lang="C#">
        <Tag elem="attribute"/>
        <Def>
            <NoImpl/>
        </Def>
    </TagRule>
    <TagRule name="CPlusPlusAttribute" lang="C++">
        <Tag elem="attribute"/>
        <Def>
            <NoImpl/>
        </Def>
    </TagRule>

    
    <!-- src:by -->
    <TagRule name="by" lang="C#">
        <Tag elem="by"/>
        <Def>
            <NoImpl/>
        </Def>
    </TagRule>
        
    <!-- src:call -->
    <TagRule name="call" lang="C,C++,C#,Java">
        <Tag elem="call"/>
        <Def>
            <NoImpl/>
        </Def>
    </TagRule>

    <!-- src:capture -->
    <TagRule name="capture" lang="C++">
        <Tag elem="capture"/>
        <Def>
            <NoImpl/>
        </Def>
    </TagRule>
    
    <!-- src:cast type="const" -->
    <TagRule name="constCast" lang="C++">
        <Tag elem="cast"/>
        <Def>
            <NoImpl/>
        </Def>
    </TagRule>

    <!-- src:cast type="dynamic" -->
    <TagRule name="dynamictCast" lang="C++">
        <Tag elem="cast"/>
        <Def>
            <NoImpl/>
        </Def>
    </TagRule>
    
    <!-- src:cast type="reinterpret" -->
    <TagRule name="reinterpretCast" lang="C++">
        <Tag elem="cast"/>
        <Def>
            <NoImpl/>
        </Def>
    </TagRule>
    
    <!-- src:cast type="static" -->
    <TagRule name="staticCast" lang="C++">
        <Tag elem="cast"/>
        <Def>
            <NoImpl/>
        </Def>
    </TagRule>
    
    <!-- src:constructor -->
    <TagRule name="constructor" lang="C,C++,C#,Java">
        <Tag elem="constructor"/>
        <Def>
            <NoImpl/>
        </Def>
    </TagRule>
    
    <!-- src:constructor_decl -->
    <TagRule name="constructorDecl" lang="C,C++,C#,Java">
        <Tag elem="constructor_decl"/>
        <Def>
            <NoImpl/>
        </Def>
    </TagRule>
    
    <!-- src:decltype -->
    <TagRule name="decltype" lang="C++">
        <Tag elem="decltype"/>
        <Def>
            <NoImpl/>
        </Def>
    </TagRule>
   
    
        
    <!-- src:delegate -->
    <TagRule name="delegate" lang="C#">
        <Tag elem="delegate"/>
        <Def>
            <NoImpl/>
        </Def>
    </TagRule>
    
    <!-- src:destructor -->
    <TagRule name="destructor" lang="C,C++,C#,Java">
        <Tag elem="destructor"/>
        <Def>
            <NoImpl/>
        </Def>
    </TagRule>
    
    <!-- src:destructor_decl -->
    <TagRule name="destructor_decl" lang="C,C++,C#,Java">
        <Tag elem="destructor_decl" />
        <Def>
            <NoImpl/>
        </Def>
    </TagRule>
    
    <!-- src:enum type="class" -->
    <TagRule name="enumClass" lang="C++">
        <Tag elem="enum" />
        <Def>
            <NoImpl/>
        </Def>
    </TagRule>
    
    <!-- src:enum -->
    <TagRule name="enum" lang="C,C++,C#,Java">
        <Tag elem="enum" />
        <Def>
            <NoImpl/>
        </Def>
    </TagRule>
    
    <!-- src:equals -->
    <TagRule name="equals" lang="C#">
        <Tag elem="equals" />
        <Def>
            <NoImpl/>
        </Def>
    </TagRule>
    
    <!-- src:event -->
    <TagRule name="event" lang="C#">
        <Tag elem="event" />
        <Def>
            <NoImpl/>
        </Def>
    </TagRule>
    
    <!-- src:extends -->
    <TagRule name="extends" lang="Java">
        <Tag elem="extends" />
        <Def>
            <NoImpl/>
        </Def>
    </TagRule>
    
    <!-- src:finally -->
    <TagRule name="finally" lang="C#,Java">
        <Tag elem="finally" />
        <Def>
            <NoImpl/>
        </Def>
    </TagRule>
    
    <!-- src:from -->
    <TagRule name="from" lang="C#">
        <Tag elem="from" />
        <Def>
            <NoImpl/>
        </Def>
    </TagRule>
    
    <!-- src:group -->
    <TagRule name="group" lang="C#">
        <Tag elem="group"/>
        <Def>
            <NoImpl/>
        </Def>
    </TagRule>
    
    
    <!-- src:implements -->
    <TagRule name="implements" lang="Java">
        <Tag elem="implements"/>
        <Def>
            <NoImpl/>
        </Def>
    </TagRule>
    
    <!-- src:in -->
    <TagRule name="in" lang="C#">
        <Tag elem="in"/>
        <Def>
            <NoImpl/>
        </Def>
    </TagRule>
    

    
    <!-- src:index -->
    <TagRule name="index" lang="C,C++,C#,Java">
        <Tag elem="index"/>
        <Def>
            <NoImpl/>
        </Def>
    </TagRule>
    
    <!-- src:into -->
    <TagRule name="into" lang="C#">
        <Tag elem="into"/>
        <Def>
            <NoImpl/>
        </Def>
    </TagRule>
    
    <!-- src:join -->
    <TagRule name="join" lang="C#">
        <Tag elem="join"/>
        <Def>
            <NoImpl/>
        </Def>
    </TagRule>
    
    <!-- src:lambda -->
    <TagRule name="lambda" lang="C++,C#,Java">
        <Tag elem="lambda"/>
        <Def>
            <NoImpl/>
        </Def>
    </TagRule>
    
    <!-- src:let -->
    <TagRule name="let" lang="C#">
        <Tag elem="let"/>
        <Def>
            <NoImpl/>
        </Def>
    </TagRule>
    
    <!-- src:linq -->
    <TagRule name="linq" lang="C#">
        <Tag elem="linq"/>
        <Def>
            <NoImpl/>
        </Def>
    </TagRule>
    
    <!-- src:macro -->
    <TagRule name="macro" lang="C,C++">
        <Tag elem="macro"/>
        <Def>
            <NoImpl/>
        </Def>
    </TagRule>
    
    <!-- src:member_list -->
    <TagRule name="member_list" lang="C,C++,C#">
        <Tag elem="member_list"/>
        <Def>
            <NoImpl/>
        </Def>
    </TagRule>
    
    <!-- src:modifier -->
    <TagRule name="modifier" lang="C,C++,C#,Java">
        <Tag elem="modifier"/>
        <Def>
            <NoImpl/>
        </Def>
    </TagRule>
    
    <!-- src:noexcept -->
    <TagRule name="noexcept" lang="C++">
        <Tag elem="noexcept"/>
        <Def>
            <NoImpl/>
        </Def>
    </TagRule>
    
    <!-- src:on -->
    <TagRule name="on" lang="C#">
        <Tag elem="on"/>
        <Def>
            <NoImpl/>
        </Def>
    </TagRule>
    
    <!-- src:operator -->
    <TagRule name="operator" lang="C,C++,C#,Java">
        <Tag elem="operator"/>
        <Def>
            <NoImpl/>
        </Def>
    </TagRule>
    
    <!-- src:orderby -->
    <TagRule name="orderby" lang="C#">
        <Tag elem="orderby"/>
        <Def>
            <NoImpl/>
        </Def>
    </TagRule>
    
    <!-- src:private type="default" -->
    <TagRule name="privateDefault" lang="C++">
        <Tag elem="private">
            <Attrs>
                <Attr rule="accessSpecifierTypeAttr" />
            </Attrs>
        </Tag>
        <Def>
            <NoImpl/>
        </Def>
    </TagRule>
    
    <!-- src:private -->
    <TagRule name="private" lang="C++">
        <Tag elem="private" />
        <Def>
            <Literal value="private"/>
            <Literal value=":"/>
            <ZeroOrMore>
                <Ref name="topLevelElements"/>
            </ZeroOrMore>
        </Def>
    </TagRule>
    
    <AttrRule name="accessSpecifierTypeAttr" lang="C++">
        <Attr name="type" />
        <Def>
            <Literal value="default" />
        </Def>
    </AttrRule>
    
    <!-- src:property -->
    <TagRule name="property" lang="C#">
        <Tag elem="property" />
        <Def>
            <NoImpl/>
        </Def>
    </TagRule>
    
    <!-- src:protected -->
    <TagRule name="protected" lang="C++">
        <Tag elem="protected" />
        <Def>
            <Literal value="protected"/>
            <Literal value=":"/>
            <ZeroOrMore>
                <Ref name="topLevelElements"/>
            </ZeroOrMore>
        </Def>
    </TagRule>
    
    <!-- src:public type="default" -->
    <TagRule name="publicDefault" lang="C++">
        <Tag elem="public">
            <Attrs>
                <Attr rule="accessSpecifierTypeAttr"/>
            </Attrs>
        </Tag>
        <Def>
            <ZeroOrMore>
                <Ref name="topLevelElements"/>
            </ZeroOrMore>
        </Def>
    </TagRule>
    
    <!-- src:public -->
    <TagRule name="public" lang="C++">
        <Tag elem="public" />
        <Def>
            <Literal value="public"/>
            <Literal value=":"/>
            <ZeroOrMore>
                <Ref name="topLevelElements"/>
            </ZeroOrMore>
        </Def>
    </TagRule>
    
    <!-- src:ref_qualifier -->
    <TagRule name="ref_qualifier" lang="C,C++,C#,Java">
        <!-- @TODO WAT is this-->
        <Tag elem="ref_qualifier" />
        <Def>
            <NoImpl/>
        </Def>
    </TagRule>
    
    <!-- src:select -->
    <TagRule name="select" lang="C#">
        <Tag elem="select" />
        <Def>
            <NoImpl/>
        </Def>
    </TagRule>
    
    <!-- src:selector -->
    <TagRule name="selector" lang="C">
        <Tag elem="selector" />
        <Def>
            <NoImpl/>
        </Def>
    </TagRule>
    
    <!-- src:sizeof -->
    <TagRule name="sizeof" lang="C,C++,C#">
        <Tag elem="sizeof" />
        <Def>
            <NoImpl/>
        </Def>
    </TagRule>
    
    <TagRule name="sizeofParameterPack" lang="C++">
        <Tag elem="sizeof" />
        <Def>
            <NoImpl/>
        </Def>
    </TagRule>
    
    <!-- src:specifier -->
    <TagRule name="specifier" lang="C,C++,C#,Java">
        <Tag elem="specifier" />
        <Def>
            <NoImpl/>
        </Def>
    </TagRule>
    
    <!-- src:static -->
    <TagRule name="staticBlock" lang="Java">
        <Tag elem="static" />
        <Def>
            <NoImpl/>
        </Def>
    </TagRule>
    
    <!-- src:struct -->
    <TagRule name="struct" lang="C,C++,C#">
        <Tag elem="struct" />
        <Def>
            <NoImpl/>
        </Def>
    </TagRule>
    
    <!-- src:struct_decl -->
    <TagRule name="structDecl" lang="C,C++,C#">
        <Tag elem="struct_decl" />
        <Def>
            <NoImpl/>
        </Def>
    </TagRule>
    
    <!-- src:throw -->
    <TagRule name="throw" lang="C++,C#,Java">
        <Tag elem="throw" />
        <Def>
            <NoImpl/>
        </Def>
    </TagRule>
    
    <!-- src:throws -->
    <TagRule name="throws" lang="Java">
        <Tag elem="throws" />
        <Def>
            <NoImpl/>
        </Def>
    </TagRule>
    
    <!-- src:try -->
    <TagRule name="try" lang="C++,C#,Java">
        <Tag elem="try" />
        <Def>
            <NoImpl/>
        </Def>
    </TagRule>
    
    <!-- src:typeid -->
    <TagRule name="typeid" lang="C++">
        <Tag elem="typeid" />
        <Def>
            <NoImpl/>
        </Def>
    </TagRule>
    
    <!-- src:typeof -->
    <TagRule name="typeof" lang="C#">
        <Tag elem="typeof" />
        <Def>
            <NoImpl/>
        </Def>
    </TagRule>
    
    <!-- src:unchecked -->
    <TagRule name="unchecked" lang="C#">
        <Tag elem="unchecked" />
        <Def>
            <NoImpl/>
        </Def>
    </TagRule>
    
    <!-- src:union -->
    <TagRule name="union" lang="C,C++">
        <Tag elem="union" />
        <Def>
            <NoImpl/>
        </Def>
    </TagRule>
    
    <!-- src:union_decl -->
    <TagRule name="unionDecl" lang="C,C++">
        <Tag elem="union_decl" />
        <Def>
            <NoImpl/>
        </Def>
    </TagRule>
    
    <!-- src:where -->
    <TagRule name="where" lang="C#">
        <Tag elem="where" />
        <Def>
            <NoImpl/>
        </Def>
    </TagRule>
    

    <!--
    // src namespace elements
    expr '<expr>': /* TODO: Add possible expressions here!*/ ;


    -->
    
    <!-- src:argument_list -->
    <TagRule name="argumentList" lang="C,C++,C#,Java">
        <Tag elem="argument_list"/>
        <Def>
            <NoImpl/>
        </Def>
    </TagRule>

    <TagRule name="templateArgumentList" lang="C,C++,C#,Java">
        <Tag elem="argument_list">
            <Attrs>
                <Attr rule="agrumentListTypeAttr" isOptional="true"/>
            </Attrs>
        </Tag>
        <Def><NoImpl/></Def>
    </TagRule>
    
    <AttrRule name="agrumentListTypeAttr" lang="C,C++,C#,Java">
        <Attr name="type"/>
        <Def>
            <Literal value="template"/>
        </Def>
    </AttrRule>

    <!-- src:parameter_list -->
    <TagRule name="parameterList" lang="C,C++,C#,Java">
        <Tag elem="parameter_list"/>
        <Def>
            <Literal value="(" />
            <Optional>
                <Ref name="param"/>
                <ZeroOrMore>
                    <Literal value="," />
                    <Ref name="param"/>
                </ZeroOrMore>
            </Optional>
            <Literal value=")" />
        </Def>
    </TagRule>
    
    <TagRule name="templateParameterList" lang="C++,C#,Java">
        <Tag elem="parameter_list"/>
        <Def>
            <Literal value="&lt;"/>
            <Optional>
                <Ref name="typeParam"/>
                <ZeroOrMore>
                    <Literal value=","/>
                    <Ref name="typeParam"/>
                </ZeroOrMore>
            </Optional>
            <Literal value="&gt;"/>
        </Def>
    </TagRule> 
    <!-- src:parameter_list type="pseudo"  Add me C# only? need to check. -->

    <!-- src:param -->
    <TagRule name="param" lang="C,C++,C#,Java">
        <Tag elem="param"/>
        <Def>
            <Ref name="decl"/>
        </Def>
    </TagRule>
    
    <TagRule name="typeParam" lang="C++">
        <Tag elem="param"/>
        <Def>
            <Ref name="type"/>
            <Optional>
                <Ref name="simpleName"/>
            </Optional>
        </Def>
    </TagRule>
    
    <!-- src:expr -->
    <TagRule name="expr" lang="C,C++,C#,Java">
        <Tag elem="expr" />
        <Def>
            <NoImpl/>
        </Def>
    </TagRule>
    
    <!-- src:decl -->
    <TagRule name="decl" lang="C,C++,C#,Java">
        <Tag elem="decl"/>
        <Def>
            <Ref name="type"/>
            <Optional>
                <Ref name="name" />
            </Optional>
            <Optional>
                <Ref name="range"/>
            </Optional>
            <Optional>
                <Ref name="init" />
            </Optional>
        </Def>
    </TagRule>
    
    <!-- src:range -->
    <TagRule name="range" lang="C,C++,C#,Java">
        <Tag elem="range" />
        <Def>
            <Choice>
                <Literal value=":"/>
                <Literal value="in"/>
            </Choice>
            <Optional>
                <Ref name="expr" />
            </Optional>
        </Def>
    </TagRule>
    
    <!-- src:type -->
    <TagRule name="type" lang="C,C++,C#,Java">
        <Tag elem="type">
            <Attrs>
                <Attr rule="typeTypeAttr" isOptional="True" />
            </Attrs>
        </Tag>
        <Def>
            <ZeroOrMore>
                <Choice>
                    <Ref name="specifier" />
                    <Ref name="modifier"/>
                </Choice>
            </ZeroOrMore>
            <Optional>
                <Choice>
                    <Ref name="name"/>
                    <Ref name="CPlusPlusClass"/>
                    <Ref name="struct"/>
                    <Ref name="union"/>
                    <Ref name="template"/>
                    <Ref name="typename" />
                </Choice>
            </Optional>
            <ZeroOrMore>
                <Choice>
                    <Ref name="specifier" />
                    <Ref name="modifier"/>
                </Choice>
            </ZeroOrMore>
        </Def>
    </TagRule>
    
    <AttrRule name="typeTypeAttr" lang="C,C++,C#,Java">
        <Attr name="type"/>
        <Desc>
            This attribute is only used during the declaration of multiple
            variables of the same type. The element with this attribute may be
            empty.
        </Desc>
        <Def>
            <Literal value="prev"/>
        </Def>
    </AttrRule>

    <!-- src:name -->
    <Rule name="name" lang="C,C++,C#,Java">
        <Def>
            <Choice>
                <Ref name="complexName"/>
                <Ref name="simpleName"/>
            </Choice>
        </Def>
    </Rule>

    <TagRule name="complexName" lang="C,C++,C#,Java">
        <Tag elem="name"/>
        <Desc>TODO:Finish implementing this once I fully understand it.</Desc>
        <Def>
            <Identifier />
        </Def>
    </TagRule>
    
    <TagRule name="simpleName" lang="C,C++,C#,Java">
        <Tag elem="name"/>
        <Def>
            <Identifier />
        </Def>
    </TagRule>
    
    <!-- src:literal -->
    <TagRule name="literal" lang="C,C++,C#,Java">
        <Tag elem="literal">
            <Attrs>
                <Attr rule="literalTypeAttr"/>
            </Attrs>
        </Tag>
        <Def><Text/></Def>
    </TagRule>
    
    

    <!-- src:literal type="boolean" -->
    <!-- src:literal type="char" -->
    <!-- src:literal type="null" -->
    <!-- src:literal type="number" -->
    <!-- src:literal type="string" -->
    <AttrRule name="literalTypeAttr" lang="C,C++,C#,Java">
        <Attr name="type" />
        <Def>
            <Choice>
                <Literal value="boolean"/>
                <Literal value="char"/>
                <Literal value="null"/>
                <Literal value="number"/>
                <Literal value="string"/>
            </Choice>
        </Def>
    </AttrRule>
    
    <!--
        <Literal value=""/>
        <Ref name=""/>
        OR
        <Ref name="">
            <Args>
                <Arg value="Value"/>
            </Args>
        </Ref>

        <Text/>

        <ParamUse name="" />

        <Group>
        </Group>

        Names for grammar elements:
        Params
            Param
        Args
            Arg
        Optional
        ZeroOrMore
        OneOrMore
        Choice
        Ref
            @name
        Text
        Literal
        Tag ? Maybe?! Just not sure how!
    -->
</Grammar>
