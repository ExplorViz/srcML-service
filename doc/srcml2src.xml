<!DOCTYPE refentry SYSTEM "option.dtd">

<refentry>
<refentryinfo>
    <date>&DATE;</date>
</refentryinfo>
<refmeta>
  <refentrytitle><application>srcml2src</application></refentrytitle><manvolnum>1</manvolnum><refmiscinfo>srcml2src 1.0</refmiscinfo>
</refmeta>
<refnamediv>
  <refname><application>srcml2src</application></refname><refpurpose>translates the XML source-code representation srcML into source code and provides utility features for the srcML format</refpurpose>
</refnamediv>
<refsynopsisdiv>
  <refsynopsisdivinfo>
    <date>2001-01-01</date>
  </refsynopsisdivinfo>
  <cmdsynopsis>
    <command>srcml2src</command>
<arg><option>-nizcgv </option></arg>
<arg><option>&LANGUAGE_FLAG; </option></arg>
<arg><option>&FILENAME_FLAG; </option></arg>
<arg><option>&DIRECTORY_FLAG; </option></arg>
<arg><option>&ENCODING_FLAG; </option></arg>
<arg><option>&TEXTENCODING_FLAG; <replaceable class="parameter">encoding</replaceable></option></arg>
<arg><replaceable class="parameter">input-srcML-file</replaceable></arg>
<arg><replaceable class="parameter">output-source-code-file</replaceable></arg>
  </cmdsynopsis>
</refsynopsisdiv>
<refsect1>
  <refsect1info>
    <date>2006-01-04</date>
  </refsect1info>
  <title>DESCRIPTION</title>
  <para>
    The program <command>srcml2src</command> translates from the XML
    source-code representation srcML into source code.  The srcML
    format allows for XML addressing, querying, and transformation of
    source code.  The srcML format for a source-code file is typically
    produced by <command>src2srcml</command>.
  </para>
  <para>
    The combination of <command>src2srcml</command> and
    <command>srcml2src</command> allows for full round-trip
    transformation of source-code files without any loss of comments,
    white space, and preprocessing statements.
  </para>
  <para>
    Conversion from the srcML format to source code is relatively
    straightforward.  All XML tags are removed and escaped characters
    are unescaped.  Special srcML elements for characters not
    permitted in XML, e.g., formfeed, are converted back to their
    original characters.
  </para>
  <para>
    In addition to conversion, <command>srcml2src</command> provides
    various srcML utilities such as extracting metadata, extracting
    individual parts of compound srcML files (as either text or XML),
    and extracting metadata from individual parts of compound srcML
    files.  It can also be used to extract all the individual files in
    a compound srcML file.
  </para>
  <para>
    Further, <command>srcml2src</command> allows for querying srcML
    using XPath expressions and RelaxNG, and transformation using
    XLST.  With compound srcML documents, a
    query/transformation is applied individually to each nested unit
    and the results combined.  This allows the XPath, XSLT, or RelaxNG
    to work efficiently on large srcML documents that contain all of
    the source code in a large project.
  </para>
  <para>
    Using the character - in the place of an input srcML file filename
    uses standard input, and in place of an output source-code file
    uses standard output.
  </para>
</refsect1>
<refsect1>
  <title>OPTIONS</title>
  <variablelist>
    <varlistentry>
      <term><option>&HELP_FLAG_SHORT;, &HELP_FLAG;</option></term>
      <listitem>
	<para>
	  Output the help and exit.
	</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term><option>&VERSION_FLAG_SHORT;, &VERSION_FLAG;</option></term>
      <listitem>
	<para>
	  Output the version of srcml2src and exit.
	</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term><option>&TEXTENCODING_FLAG_SHORT;, &TEXTENCODING_FLAG;=<replaceable class="parameter">encoding</replaceable></option></term>
      <listitem>
	<para>
	  Sets the encoding used for the output text source-code files
	  to <replaceable>encoding</replaceable>.  The default is &DEFAULT_TEXT_ENCODING;.
	</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term><option>&UNIT_FLAG_SHORT;, &UNIT_FLAG;=<replaceable class="parameter">number</replaceable></option></term>
      <listitem>
	<para>
	  Refers to a specific nested unit in a compound srcML file.
	  The numbering starts at 1.  If the number is outside of the
	  range of nested units then the command is ignored.  In
	  combination with the attribute flags, outputs the attribute
	  of that particular unit.  In combination with the <option>&XML_FLAG;</option> option
	  outputs the unit in xml (not as text as is the default).
	</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term><option>&EXPAND_FLAG_SHORT;, &EXPAND_FLAG;</option></term>
      <listitem>
	<para>
	  Extracts all units from a compound srcML file back into
	  source-code files.  The directory and filename used is based
	  on that stored in the directory and filename attributes.
	  Necessary subdirectories are created.  Existing files with
	  the same path are overwritten.
	</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term><option>&XML_FLAG_SHORT;, &XML_FLAG;</option></term>
      <listitem>
	<para>
	  Output is in srcML format.  Used in combination with the
	  <option>&UNIT_FLAG;</option> option to output a particular
	  nested unit in XML.  The output unit has attributes formed
	  by the merger of the attributes of the individual unit and
	  the root unit.
	</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term><option>&COMPRESSED_FLAG_SHORT;, &COMPRESSED_FLAG;</option></term>
      <listitem>
	<para>
	  Output is in compressed gzip format.  Only available in the
	  libxml2-enabled version.
	</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term><option>&NO_XML_DECLARATION_FLAG;</option></term>
      <listitem>
	<para>
	  No output of the default XML declaration.  Only applies to
	  XML output.  Useful when the output is to
	  be placed inside another XML document.
	</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term><option>&NO_NAMESPACE_DECLARATION_FLAG;</option></term>
      <listitem>
	<para>
	  No output of namespace declarations.  Only applies to XML
	  output.  Useful when the output is to be
	  placed inside another XML document.
	</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term><option>&VERBOSE_FLAG_SHORT;, &VERBOSE_FLAG;</option></term>
      <listitem>
	<para>
	  Verbose output to standard error.  Especially useful with
	  the <option>&FILELIST_FLAG;</option> option.
	</para>
      </listitem>
    </varlistentry>
  </variablelist>
</refsect1>
<refsect1>
  <title>Metadata Options</title>
  <para>
    This set of options allows access to the metadata stored in the
    srcML document.  Unless otherwise noted, the metadata is extracted
    from the start root element or the XML declaration and does not
    require traversing the entired document.
  </para>
    <varlistentry>
      <term><option>&LANGUAGE_FLAG_SHORT;, &LANGUAGE_FLAG;</option></term>
      <listitem>
	<para>
	  Output the language of the srcML file as stored in the
	  attribute language in the unit element on standard output.
	  The language is the value of the attribute of the root
	  element unit, unless a particular unit is specified with the
	  <option>&UNIT_FLAG;</option> option.
	</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term><option>&DIRECTORY_FLAG_SHORT;, &DIRECTORY_FLAG;</option></term>
      <listitem>
	<para>
	  Output the directory of the srcML file as stored in the
	  attribute dir in the unit element on standard output.  The
	  directory is the value of the attribute of the root element
	  unit, unless a particular unit is specified with the
	  <option>&UNIT_FLAG;</option> option.
	</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term><option>&FILENAME_FLAG_SHORT;, &FILENAME_FLAG;</option></term>
      <listitem>
	<para>
	  Output the filename of the srcML file as stored in the
	  attribute filename in the unit element on standard output.
	  The filename is the value of the attribute of the root
	  element unit, unless a particular unit is specified with the
	  <option>&UNIT_FLAG;</option> option.
	</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term><option>&SRCVERSION_FLAG_SHORT;, &SRCVERSION_FLAG;</option></term>
      <listitem>
	<para>
	  Output the version of the srcML file as stored attribute
	  version in the unit element on standard output.  The version
	  is the value of the attribute of the root element unit,
	  unless a particular unit is specified with the
	  <option>&UNIT_FLAG;</option> option.
	</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term><option>&NAMESPACE_FLAG_SHORT;, &NAMESPACE_FLAG;=<replaceable class="parameter">uri</replaceable></option></term>
      <listitem>
	<para>
	  Output the prefix of the namespace given by uri.  The name of
	  the prefix is output with a newline character.  The default
	  namespace is a blank line.  If the URI does not match a
	  namespace declaration then no line is output.
	</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term><option>&NESTED_FLAG_SHORT;, &NESTED_FLAG;</option></term>
      <listitem>
	<para>
	  Output the number of nested units in a compound srcML file
	  on standard output.  Result is 0 if the srcML file is not
	  compound.  Requires traversal of the entire document.
	</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term><option>&INFO_FLAG_SHORT;, &INFO_FLAG;</option></term>
      <listitem>
	<para>
	  Output most of the metadata of the srcML file.  Each
	  individual piece of data, i.e., namespaces, encoding,
	  language, directory, filename, and version, is on a separate
	  line.  The form of the information is that same as that of
	  the full flag option to src2srcml to form it, without the
	  leading "--".
	</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term><option>&LONG_INFO_FLAG_SHORT;, &LONG_INFO_FLAG;</option></term>
      <listitem>
	<para>
	  Output the metadata of the <option>&INFO_FLAG;</option>
	  option along with the count of the nested units in a
	  compound srcML document.  This information requires the
	  examination of the entire srcML document.
	</para>
      </listitem>
    </varlistentry>
</refsect1>
<refsect1>
  <title>Querying and Transformation Options</title>
  <para>
    This set of options allows queries and transformation on the
    srcML document.  One problem with standalone XML tools that
    are DOM based (XPath, XSLT) is the memory requirements with large
    srcML files.  The <command>srcml2src</command> options work efficiently with compound srcML
    documents that contain large numbers of files in a project, e.g., tens
    of thousands of files for a project in a single compound 1 GB file.
    This is done by performing the query/transformation on a unit
    by unit basis inside the compound srcML document.
  </para>
    <varlistentry>
      <term><option>&XPATH_FLAG;=<replaceable class="parameter">xpath</replaceable></option></term>
      <listitem>
	<para>
	  Apply the XPath expression <replaceable>xpath</replaceable> to the compound srcML document.
	  The XPath is applied to each individual unit in
	  the compound document separately reducing the largest memory requirements
	  of the query to that of a single, nested file at a time.
	</para>

	<para>
	  XPath expressions use the standard srcML prefixes (see srcml2src).
	  One exception is that prefix "src" is used for srcML elements, e.g., src:unit.
	  Note that these prefixes do not have to match the prefixes used in the document.
	</para>

	<para>
	  For XPath expressions that return anything other then a set of nodes the
	  individual unit results are combined.  For numeric results, e.g., counts,
	  the final result is the sum of the individual accounts.  For boolean values,
	  the result is the logical or of the individual results.
	</para>

	<para>
	  The output is a compound srcML
	  document with each XPath expression result in its own
	  individual unit element.  If the XPath expression does not
	  result in a unit element, one is wrapped around the result.
	  The output is in a format for repeated application.
	</para>

      </listitem>
    </varlistentry>
    <varlistentry>
      <term><option>&XSLT_FLAG;=<replaceable class="parameter">xslt_file</replaceable></option></term>
      <listitem>
	<para>
	  Apply the XSLT program <replaceable>xslt_file</replaceable> to the compound srcML document.
	  The transformation is applied to each individual unit in
	  the compound document separately reducing the largest memory requirements
	  of the query to that of a single, nested file at a time.
	</para>

	<para>
	  The XSLT program can use any part of XSLT 1.0, and many EXSLT extension functions.
	  In addition to any parameters specified in the command, the XSLT program
	  is passed a series of internally generated parameters.  The parameters
	  src:filename, src:directory, src:version, and src:language are the corresponding
	  entries from the root unit element of the srcML document and are provided because
	  the XSLT transformation does not have direct access to them.  The parameter
	  src:position is the position of an individual unit in the root unit, e.g., the
	  position of the file in the larger compound srcML document.
	</para>

	<para>
	  The output is a srcML document with the combined results of the XSLT transformation
	  wrapped in an outer unit element.  Typically, each XSLT transformation may or may
	  not produce a unit element, thereby providing an output format that allows
	  for repeated application of the tool.
	</para>

      </listitem>
    </varlistentry>
    <varlistentry>
      <term><option>&PARAM_FLAG; <replaceable class="parameter">parameter_name</replaceable> <replaceable class="parameter">parameter_value</replaceable></option></term>

      <listitem>
	<para>
	  Pass the parameter <replaceable>parameter_name</replaceable> and its corresponding
	  <replaceable>parameter_value</replaceable> to the XSLT transformation.
	  This is only valid with the <option>&XSLT_FLAG;</option> option.
	  This is analagous to the &PARAM_FLAG; of xsltproc.  The xsltproc limit of 32
	  parameters applies here.
	  Note that the internally generated parameters src:filename, src:directory, src:version,
	  src:language, and src:position are automatically generated and are not part
	  of the 32 parameter limit.
	</para>

      </listitem>
    </varlistentry>
    <varlistentry>
      <term><option>&RELAXNG_FLAG;=<replaceable class="parameter">relaxng_file</replaceable></option></term>
      <listitem>
	<para>
	  Apply the RelaxNG grammar <replaceable>relaxng_file</replaceable> to the compound srcML document.
	  The grammer is applied to each individual unit in
	  the compound document separately reducing the largest memory requirements
	  of the query to that of a single, nested file at a time.
	</para>

	<para>
	  If the RelaxNG gramar is valid for a unit, then that unit is output.
	  This results in a compound srcML document with only the files that
	  are valid based on the given RelaxNG grammar.
	</para>

      </listitem>
    </varlistentry>
</refsect1>
<refsect1>
  <title>USAGE</title>
  <para>
    To translate the srcML file main.cpp.xml into the C++ source-code file main.cpp:
  </para>
  <para>
    <command>srcml2src</command> main.cpp.xml main.cpp
  </para>
  <para>
    To extract the language of the srcML file main.cpp.xml:
  </para>
  <para>
    <command>srcml2src</command> &LANGUAGE_FLAG; main.c.xml
  </para>
  <para>
    To extract the directory of the srcML file main.cpp.xml:
  </para>
  <para>
    <command>srcml2src</command> &DIRECTORY_FLAG; main.c.xml
  </para>
  <para>
    To extract the filename of the srcML file main.cpp.xml:
  </para>
  <para>
    <command>srcml2src</command> &FILENAME_FLAG; main.c.xml
  </para>
  <para>
    To extract the version of the srcML file main.cpp.xml:
  </para>
  <para>
    <command>srcml2src</command> &VERSION_FLAG; main.c.xml
  </para>
  <para>
    To extract the xml encoding of the srcML file main.cpp.xml:
  </para>
  <para>
    <command>srcml2src</command> &ENCODING_FLAG; main.c.xml
  </para>
</refsect1>
<refsect1>
  <title>RETURN STATUS</title>

  <para>&STATUS_SUCCESS;: Normal</para>
  <para>&STATUS_ERROR;: Error </para>
  <para>&STATUS_INPUTFILE_PROBLEM;: Problem with input file</para>
  <para>&STATUS_UNKNOWN_OPTION;: Unknown option</para>
  <para>&STATUS_UNKNOWN_ENCODING;: Unknown encoding</para>
  <para>&STATUS_LIBXML2_FEATURE;: Libxml2-only feature (not libxml2 enabled)</para>
  <para>&STATUS_SRCENCODING_MISSING;: Text encoding option specified, but value missing</para>
  <para>&STATUS_UNIT_MISSING;: Unit option specified, but value missing</para>
  <para>&STATUS_UNIT_INVALID;: Unit option value is not valid</para>
  <para>&STATUS_INVALID_OPTION_COMBINATION;: Invalid combination of options</para>
  <para>&STATUS_TERMINATED;: Incomplete output due to termination</para>

</refsect1>
<refsect1>
  <title>CAVEATS</title>
  <para>
    Line endings are normalized in XML and in the srcML format.
  </para>
</refsect1>
<refsect1>
  <title>BUGS</title>
  <para>
    There may be some parts of XML (e.g., comments) unused in the srcML format (i.e., not generated by src2srcml)
    which are not preserved in the output with the <option>&XML_FLAG;</option> option.
  </para>
</refsect1>
<refsect1>
  <title>SEE ALSO</title>
  <para>
    <command>src2srcml</command>(1)
  </para>
</refsect1>
<refsect1>
  <title>AUTHOR</title>
  <para>Written by 
    <author>
      <firstname>Michael</firstname>
      <othername role="mi">L.</othername>
      <surname>Collard</surname>
      <contrib>Original author</contrib>
    </author> 
    and
    <author>
      <firstname>Huzefa</firstname>
      <surname>Kagdi</surname>
      <contrib>Original author</contrib>
    </author>
  </para>
</refsect1>
</refentry>