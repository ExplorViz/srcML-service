<!DOCTYPE refentry SYSTEM "option.dtd">

<refentry>
<refentryinfo>
    <date>&DATE;</date>
</refentryinfo>
<refmeta>
  <refentrytitle><application>src2srcml</application></refentrytitle><manvolnum>1</manvolnum><refmiscinfo>src2srcml 1.0</refmiscinfo>
</refmeta>
<refnamediv>
  <refname><application>src2srcml</application></refname><refpurpose>translates source code into the XML source-code representation srcML</refpurpose>
</refnamediv>
<refsynopsisdiv>
  <refsynopsisdivinfo>
    <date>2001-01-01</date>
  </refsynopsisdivinfo>
  <cmdsynopsis>
    <command>src2srcml</command>
<arg><option>-hVnizcgv</option></arg>
<arg><option>&LANGUAGE_FLAG_SHORT;     <replaceable class="parameter">language</replaceable></option></arg>
<arg><option>&DIRECTORY_FLAG_SHORT;    <replaceable class="parameter">directory</replaceable></option></arg>
<arg><option>&FILENAME_FLAG_SHORT;     <replaceable class="parameter">filename</replaceable></option></arg>
<arg><option>&SRCVERSION_FLAG_SHORT;   <replaceable class="parameter">version</replaceable></option></arg>
<arg><option>&TEXTENCODING_FLAG_SHORT; <replaceable class="parameter">encoding</replaceable></option></arg>
<arg><option>&ENCODING_FLAG_SHORT;     <replaceable class="parameter">encoding</replaceable></option></arg>
<arg rep="repeat"><replaceable class="parameter">input-source-code-file</replaceable></arg>
<arg><replaceable class="parameter">output-srcML-file</replaceable></arg>
  </cmdsynopsis>
</refsynopsisdiv>
<refsect1>
  <refsect1info>
    <date>2006-01-04</date>
  </refsect1info>
  <title>DESCRIPTION</title>
  <para>
    The program <command>src2srcml</command> translates source-code
    files into the XML source-code representation srcML.  The srcML
    format allows for XML addressing, querying, and transformation of
    source code.  All text from the original source-code file is
    preserved including white-space, comments and preprocessor
    statements.  No preprocessing of the source code is done.  In
    addition it can be applied to invidual source-code files, or code
    fragments.
  </para>
  <para>
    The translation is fast and uses a stream-parsing approach where
    parsing is done top-down and elements are issued as soon as they
    are detected.
  </para>
  <para>
    Some options are only available in the libxml2 version.
  </para>
</refsect1>
<refsect1>
  <title>OPTIONS</title>
  <variablelist>
    <varlistentry>
      <term>&HELP_FLAG_SHORT;, &HELP_FLAG;</term>
      <listitem>
	<para>
	  Output the help and exit.
	</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>&VERSION_FLAG_SHORT;, &VERSION_FLAG;</term>
      <listitem>
	<para>
	  Output the version of src2srcml, including whether libxml2 enabled, then exit.
	</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>&LANGUAGE_FLAG_SHORT;, &LANGUAGE_FLAG;=<replaceable class="parameter">language</replaceable></term>
      <listitem>
	<para>
	  The programming language of the source-code file.  Allowable
	  values are C, C++, or Java.  The language affects parsing,
	  the allowed markup, and what is considered a keyword.  The
	  default is C++.  The value is also stored as an attribute of
	  the root element unit.
	</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>&DIRECTORY_FLAG_SHORT;, &DIRECTORY_FLAG;=<replaceable class="parameter">directory</replaceable></term>
      <listitem>
	<para>
	  The unit element includes an optional, descriptive
	  attribute, directory.  The value is typically obtained from
	  the path of the input filename.  This option allows you to
	  specify a different directory for standard input or where
	  the directory is not contained in the path of the input
	  filename.
	</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>&FILENAME_FLAG_SHORT;, &FILENAME_FLAG;=<replaceable class="parameter">filename</replaceable></term>
      <listitem>
	<para>
	  The unit element includes an optional, descriptive
	  attribute, filename.  The value is typically obtained from
	  the input filename.  This option allows you to specify a
	  different filename for standard input or where a different
	  filename is wanted.
	</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>&SRCVERSION_FLAG_SHORT;, &SRCVERSION_FLAG;=<replaceable class="parameter">version</replaceable></term>
      <listitem>
	<para>
	  The unit element includes the version, an optional,
	  purely-descriptive attribute.  Sets the value of the
	  attribute version to <replaceable>version</replaceable>.
	  The value is a string with no interpretation by the srcML
	  tools.
	</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>&TEXTENCODING_FLAG_SHORT;, &TEXTENCODING_FLAG;=<replaceable class="parameter">encoding</replaceable></term>
      <listitem>
	<para>
	  Sets the input encoding of the source-code file to
	  <replaceable>encoding</replaceable>.  The default is based
	  on the locale.  Not stored, but used for any necessary
	  source-code text translation in the libxml2-enabled version.
	</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>&ENCODING_FLAG_SHORT;, &ENCODING_FLAG;=<replaceable class="parameter">encoding</replaceable></term>
      <listitem>
	<para>
	  Sets the xml encoding of the output srcML file to
	  <replaceable class="parameter">encoding</replaceable>.  The
	  default is UTF-8.  Conversion to the xml encoding from the
	  source encoding is only performed in the libxml2-enabled
	  version.  Possible encodings with the libxml2-enabled
	  version can be obtained by using the command <command>iconv
	  -l</command>.
	</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>&NESTED_FLAG_SHORT;, &NESTED_FLAG;</term>
      <listitem>
	<para>
	  Stores all input source files into one compound srcML
	  document.  Default with &FILELIST_FLAG; mode.
	</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>&FILELIST_FLAG_SHORT;, &FILELIST_FLAG;</term>
      <listitem>
	<para>
	  Treats the input file as a list of source files.  Each file
	  is separately translated and collectively stored into a
	  single compound srcML document.  The list has a single
	  filename on each line starting at the beginning of the line.
	  Blank lines are ignored.  A line with the character '#' at
	  the start of a line is regarded as a comment character and
	  the line is ignored.
	</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>&COMPRESSED_FLAG_SHORT;, &COMPRESSED_FLAG;</term>
      <listitem>
	<para>
	  Output is in compressed gzip format.  Only available in the
	  libxml2-enabled version.
	</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>&INTERACTIVE_FLAG_SHORT;, &INTERACTIVE_FLAG;</term>
      <listitem>
	<para>
	  Default is to use buffered output for speed.  For
	  interactive applications output is issued as soon as parsed.
	</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>&DEBUG_FLAG_SHORT;, &DEBUG_FLAG;</term>
      <listitem>
	<para>
	  When translation errors occur src2srcml preserves all text,
	  but may issue incorrect markup.  In debug mode the text with
	  the translation error is marked with a special set of tags
	  with the prefix srcerr from the namesepace
	  http://www.sdml.info/srcml/srcerr.
	</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>&VERBOSE_FLAG_SHORT;, &VERBOSE_FLAG;</term>
      <listitem>
	<para>
	  Verbose output to standard error in &FILELIST_FLAG; mode.
	</para>
      </listitem>
    </varlistentry>
  </variablelist>
</refsect1>
<refsect1>
  <title>CPP MARKUP OPTIONS</title>
  <para>
    This set of options allows control over how preprocessing regions are handled,
    i.e., whether parsing and markup occur.  In all cases the text is preserved.
  </para>
  <variablelist>
    <varlistentry>
      <term>&CPP_MARKUP_ELSE_FLAG;</term>
      <listitem>
	<para>
	  Place markup in #else and #elif regions.  Default.
	</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>&CPP_TEXTONLY_ELSE_FLAG;</term>
      <listitem>
	<para>
	  Only place text in #else and #elif regions leaving out markup.
	</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>&CPP_MARKUP_IF0_FLAG;</term>
      <listitem>
	<para>
	  Place markup in #if 0 regions.
	</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>&CPP_TEXTONLY_IF0_FLAG;</term>
      <listitem>
	<para>
	  Only place text in #else and #elif regions leaving out markup.
	  Default.
	</para>
      </listitem>
    </varlistentry>
  </variablelist>
</refsect1>
<refsect1>
  <title>USAGE</title>
  <para>
    To translate the C++ source-code file main.cpp into the srcML file
    main.cpp.xml:
  </para>
  <para>
    <command>src2srcml</command> main.cpp main.cpp.xml
  </para>
  <para>
    To translate a C source-code file main.c into the srcML file main.c.xml:
  </para>
  <para>
    <command>src2srcml</command> &LANGUAGE_FLAG;=C main.c main.c.xml
  </para>
  <para>
    To translate a Java source-code file main.java into the srcML file main.java.xml:
  </para>
  <para>
    <command>src2srcml</command> &LANGUAGE_FLAG;=Java main.java main.java.xml
  </para>
  <para>
    To specify the directory, filename, and version for an input file from standard input:
  </para>
  <para>
    <command>src2srcml</command> &DIRECTORY_FLAG;=src &FILENAME_FLAG;=main.cpp &VERSION_FLAG;=1 - main.cpp.xml
  </para>
  <para>
    To translate a source-code file in ISO-8859-1 encoding into a srcML file with UTF-8 encoding:
  </para>
  <para>
    <command>src2srcml</command> &TEXTENCODING_FLAG;=ISO-8859-1 &ENCODING_FLAG;=UTF-8 main.cpp main.cpp.xml
  </para>
</refsect1>
<refsect1>
  <title>RETURN STATUS</title>

  <para>&STATUS_SUCCESS;: Normal</para>
  <para>&STATUS_ERROR;: Error </para>
  <para>&STATUS_INPUTFILE_PROBLEM;: Problem with input file</para>
  <para>&STATUS_UNKNOWN_OPTION;: Unknown option</para>
  <para>&STATUS_UNKNOWN_ENCODING;: Unknown encoding</para>
  <para>&STATUS_LIBXML2_FEATURE;: Libxml2-only feature (not libxml2 enabled)</para>
  <para>&STATUS_INVALID_LANGUAGE;: Invalid language</para>
  <para>&STATUS_LANGUAGE_MISSING;: Language option specified, but value missing</para>
  <para>&STATUS_FILENAME_MISSING;: Filename option specified, but value missing</para>
  <para>&STATUS_DIRECTORY_MISSING;: Directory option specified, but value missing</para>
  <para>&STATUS_VERSION_MISSING;: Version option specified, but value missing</para>
  <para>&STATUS_SRCENCODING_MISSING;: Text encoding option specified, but value missing</para>
  <para>&STATUS_XMLENCODING_MISSING;: XML encoding option specified, but value missing</para>

</refsect1>
<refsect1>
  <title>CAVEATS</title>
  <para>
    Translation is performed based on local information with no symbol
    table.  For non-CFG languages, i.e., C/C++, and with macros this
    may lead to incorrect markup.
  </para>
  <para>
    Line endings are normalized in XML formats including srcML.
  </para>
</refsect1>
<refsect1>
  <title>BUGS</title>
  <para>
    Java language mode does not contain all of Java 1.5 language elements.
  </para>
  <para>
    Libxml2 directly supports many encodings beyond UTF-8, UTF-16, and ISO-8859-1 through iconv.
    However, the BOM (Byte Order Mark) immediately before the XML declaration may not be processed
    correctly by srcml2src by other libxml2-based tools (e.g., xmllint).
    Use the LE or BE version of the encoding, e.g., UTF-32BE, UTF-32LE, instead.
  </para>
</refsect1>
<refsect1>
  <title>SEE ALSO</title>
  <para>
    <command>srcml2src</command>(1)
  </para>
</refsect1>
<refsect1>
  <title>AUTHOR</title>
  <para>Written by 
    <author>
      <firstname>Michael</firstname>
      <othername role="mi">L.</othername>
      <surname>Collard</surname>
      <contrib>Original author</contrib>
    </author> 
    and
    <author>
      <firstname>Huzefa</firstname>
      <surname>Kagdi</surname>
      <contrib>Original author</contrib>
    </author>
  </para>
</refsect1>
</refentry>