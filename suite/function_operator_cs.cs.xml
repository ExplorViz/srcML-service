<?xml version="1.0" encoding="UTF-8"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C#" dir="function_operator" filename="function_operator_cs">

<unit>
<function><type><specifier>public</specifier> <specifier>static</specifier> <name>Integer</name></type> <name>operator +</name><parameter_list>(<param><decl><type><name>Integer</name></type> <name>i</name></decl></param>)</parameter_list> <block>{}</block></function>
</unit>

<unit>
<function><type><specifier>public</specifier> <specifier>static</specifier> <name>Integer</name></type> <name>operator -</name><parameter_list>(<param><decl><type><name>Integer</name></type> <name>i</name></decl></param>)</parameter_list> <block>{}</block></function>
</unit>

<unit>
<function><type><specifier>public</specifier> <specifier>static</specifier> <name>Integer</name></type> <name>operator !</name><parameter_list>(<param><decl><type><name>Integer</name></type> <name>i</name></decl></param>)</parameter_list> <block>{}</block></function>
</unit>

<unit>
<function><type><specifier>public</specifier> <specifier>static</specifier> <name>Integer</name></type> <name>operator ~</name><parameter_list>(<param><decl><type><name>Integer</name></type> <name>i</name></decl></param>)</parameter_list> <block>{}</block></function>
</unit>

<unit>
<function><type><specifier>public</specifier> <specifier>static</specifier> <name>Integer</name></type> <name>operator ++</name><parameter_list>(<param><decl><type><name>Integer</name></type> <name>i</name></decl></param>)</parameter_list> <block>{}</block></function>
</unit>

<unit>
<function><type><specifier>public</specifier> <specifier>static</specifier> <name>Integer</name></type> <name>operator --</name><parameter_list>(<param><decl><type><name>Integer</name></type> <name>i</name></decl></param>)</parameter_list> <block>{}</block></function>
</unit>

<unit>
<function><type><specifier>public</specifier> <specifier>static</specifier> <name>Integer</name></type> <name>operator true</name><parameter_list>(<param><decl><type><name>Integer</name></type> <name>i</name></decl></param>)</parameter_list> <block>{}</block></function>
</unit>

<unit>
<function><type><specifier>public</specifier> <specifier>static</specifier> <name>Integer</name></type> <name>operator false</name><parameter_list>(<param><decl><type><name>Integer</name></type> <name>i</name></decl></param>)</parameter_list> <block>{}</block></function>
</unit>

<unit>
<function><type><specifier>public</specifier> <specifier>static</specifier> <name>Integer</name></type> <name>operator +</name><parameter_list>(<param><decl><type><name>Integer</name></type> <name>i</name></decl></param>, <param><decl><type><name>Integer</name></type> <name>j</name></decl></param>)</parameter_list> <block>{}</block></function>
</unit>

<unit>
<function><type><specifier>public</specifier> <specifier>static</specifier> <name>Integer</name></type> <name>operator -</name><parameter_list>(<param><decl><type><name>Integer</name></type> <name>i</name></decl></param>, <param><decl><type><name>Integer</name></type> <name>j</name></decl></param>)</parameter_list> <block>{}</block></function>
</unit>

<unit>
<function><type><specifier>public</specifier> <specifier>static</specifier> <name>Integer</name></type> <name>operator *</name><parameter_list>(<param><decl><type><name>Integer</name></type> <name>i</name></decl></param>, <param><decl><type><name>Integer</name></type> <name>j</name></decl></param>)</parameter_list> <block>{}</block></function>
</unit>

<unit>
<function><type><specifier>public</specifier> <specifier>static</specifier> <name>Integer</name></type> <name>operator /</name><parameter_list>(<param><decl><type><name>Integer</name></type> <name>i</name></decl></param>, <param><decl><type><name>Integer</name></type> <name>j</name></decl></param>)</parameter_list> <block>{}</block></function>
</unit>

<unit>
<function><type><specifier>public</specifier> <specifier>static</specifier> <name>Integer</name></type> <name>operator %</name><parameter_list>(<param><decl><type><name>Integer</name></type> <name>i</name></decl></param>, <param><decl><type><name>Integer</name></type> <name>j</name></decl></param>)</parameter_list> <block>{}</block></function>
</unit>

<unit>
<function><type><specifier>public</specifier> <specifier>static</specifier> <name>Integer</name></type> <name>operator &amp;</name><parameter_list>(<param><decl><type><name>Integer</name></type> <name>i</name></decl></param>, <param><decl><type><name>Integer</name></type> <name>j</name></decl></param>)</parameter_list> <block>{}</block></function>
</unit>

<unit>
<function><type><specifier>public</specifier> <specifier>static</specifier> <name>Integer</name></type> <name>operator |</name><parameter_list>(<param><decl><type><name>Integer</name></type> <name>i</name></decl></param>, <param><decl><type><name>Integer</name></type> <name>j</name></decl></param>)</parameter_list> <block>{}</block></function>
</unit>

<unit>
<function><type><specifier>public</specifier> <specifier>static</specifier> <name>Integer</name></type> <name>operator ^</name><parameter_list>(<param><decl><type><name>Integer</name></type> <name>i</name></decl></param>, <param><decl><type><name>Integer</name></type> <name>j</name></decl></param>)</parameter_list> <block>{}</block></function>
</unit>

<unit>
<function><type><specifier>public</specifier> <specifier>static</specifier> <name>Integer</name></type> <name>operator &lt;&lt;</name><parameter_list>(<param><decl><type><name>Integer</name></type> <name>i</name></decl></param>, <param><decl><type><name>Integer</name></type> <name>j</name></decl></param>)</parameter_list> <block>{}</block></function>
</unit>

<unit>
<function><type><specifier>public</specifier> <specifier>static</specifier> <name>Integer</name></type> <name>operator &gt;&gt;</name><parameter_list>(<param><decl><type><name>Integer</name></type> <name>i</name></decl></param>, <param><decl><type><name>Integer</name></type> <name>j</name></decl></param>)</parameter_list> <block>{}</block></function>
</unit>

<unit>
<function><type><specifier>public</specifier> <specifier>static</specifier> <name>bool</name></type> <name>operator ==</name><parameter_list>(<param><decl><type><name>Integer</name></type> <name>i</name></decl></param>, <param><decl><type><name>Integer</name></type> <name>j</name></decl></param>)</parameter_list> <block>{}</block></function>
</unit>

<unit>
<function><type><specifier>public</specifier> <specifier>static</specifier> <name>bool</name></type> <name>operator !=</name><parameter_list>(<param><decl><type><name>Integer</name></type> <name>i</name></decl></param>, <param><decl><type><name>Integer</name></type> <name>j</name></decl></param>)</parameter_list> <block>{}</block></function>
</unit>

<unit>
<function><type><specifier>public</specifier> <specifier>static</specifier> <name>bool</name></type> <name>operator &gt;</name><parameter_list>(<param><decl><type><name>Integer</name></type> <name>i</name></decl></param>, <param><decl><type><name>Integer</name></type> <name>j</name></decl></param>)</parameter_list> <block>{}</block></function>
</unit>

<unit>
<function><type><specifier>public</specifier> <specifier>static</specifier> <name>bool</name></type> <name>operator &lt;</name><parameter_list>(<param><decl><type><name>Integer</name></type> <name>i</name></decl></param>, <param><decl><type><name>Integer</name></type> <name>j</name></decl></param>)</parameter_list> <block>{}</block></function>
</unit>

<unit>
<function><type><specifier>public</specifier> <specifier>static</specifier> <name>bool</name></type> <name>operator &gt;=</name><parameter_list>(<param><decl><type><name>Integer</name></type> <name>i</name></decl></param>, <param><decl><type><name>Integer</name></type> <name>j</name></decl></param>)</parameter_list> <block>{}</block></function>
</unit>

<unit>
<function><type><specifier>public</specifier> <specifier>static</specifier> <name>bool</name></type> <name>operator &lt;=</name><parameter_list>(<param><decl><type><name>Integer</name></type> <name>i</name></decl></param>, <param><decl><type><name>Integer</name></type> <name>j</name></decl></param>)</parameter_list> <block>{}</block></function>
</unit>

</unit>
