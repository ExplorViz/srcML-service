<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C#" dir="linq" filename="linq_cs">

<unit>
<decl_stmt><decl><type><name>Query</name></type> <name>query</name> =<init>
    <expr><linq><from>from <expr><name>item</name> in <name>list</name></expr></from></linq></expr></init></decl>;</decl_stmt>
</unit>

<unit>
<decl_stmt><decl><type><name>Query</name></type> <name>query</name> =<init>
    <expr><linq><orderby>orderby <expr><name>item</name> <name>ascending</name></expr></orderby></linq></expr></init></decl>;</decl_stmt>
</unit>

<unit>
<decl_stmt><decl><type><name>Query</name></type> <name>query</name> =<init>
    <expr><linq><select>select <expr><name>item</name></expr></select></linq></expr></init></decl>;</decl_stmt>
</unit>

<unit>
<decl_stmt><decl><type><name>Query</name></type> <name>query</name> =<init>
    <expr><linq><orderby>orderby <expr><name>item</name> <name>descending</name></expr></orderby></linq></expr></init></decl>;</decl_stmt>
</unit>

<unit>
<decl_stmt><decl><type><name>Query</name></type> <name>query</name> =<init>
    <expr><linq><group>group <expr><name>item</name></expr> by <expr><name><name>item</name>.<name>value</name></name></expr></group></linq></expr></init></decl>;</decl_stmt>
</unit>

<unit>
<decl_stmt><decl><type><name>Query</name></type> <name>query</name> =<init>
            <expr><linq><group>group <expr><name>item</name></expr> by <expr><name><name>item</name>.<name>value</name></name> into <name>values</name></expr></group></linq></expr></init></decl>;</decl_stmt>
</unit>

<unit>
<decl_stmt><decl><type><name>Query</name></type> <name>query</name> =<init>
            <expr><linq><where>where <expr><name><name>item</name>.<name>value</name></name> == 0</expr></where></linq></expr></init></decl>;</decl_stmt>
</unit>

<unit>
<decl_stmt><decl><type><name>Query</name></type> <name>query</name> =<init>
    <expr><linq><join>join <expr><name>item</name></expr> in <expr><name>list</name></expr> on <expr><name><name>other_item</name>.<name>value</name></name></expr> equals <expr><name><name>item</name>.<name>value</name></name></expr></join></linq></expr></init></decl>;</decl_stmt>
</unit>

<unit>
<decl_stmt><decl><type><name>Query</name></type> <name>query</name> =<init>
            <expr><linq><let>let <expr><name>items</name> = <name><name>list</name>.<name>items</name></name></expr></let></linq></expr></init></decl>;</decl_stmt>
</unit>

<unit>
<decl_stmt><decl><type><name>Query</name></type> <name>query</name> =<init>
    <expr><linq><from>from <expr><name>vegetable</name> in <name>vegetables</name></expr></from>
    <orderby>orderby <expr><name>vegetable</name> <name>ascending</name></expr></orderby>
    <select>select <expr><name>vegetable</name></expr></select></linq></expr></init></decl>;</decl_stmt>
</unit>

<unit>
<decl_stmt><decl><type><name>Query</name></type> <name>query</name> =<init>
    <expr><linq><from>from <expr><name>vegetable</name> in <name>vegetables</name></expr></from>
    <orderby>orderby <expr><name>vegetable</name> <name>descending</name></expr></orderby>
    <select>select <expr><name>vegetable</name></expr></select></linq></expr></init></decl>;</decl_stmt>
</unit>

<unit>
<decl_stmt><decl><type><name>Query</name></type> <name>query</name> =<init>
    <expr><linq><from>from <expr><name>student</name> in <name>students</name></expr></from>
    <group>group <expr><name>student</name> by <name>student</name>.<name><name>Last</name><index>[<expr>0</expr>]</index></name></expr></group></linq></expr></init></decl>;</decl_stmt>
</unit>

<unit>
<decl_stmt><decl><type><name>Query</name></type> <name>query</name> =<init>
            <expr><linq><from>from <expr><name>w</name> in <name>words</name></expr></from>
            <group>group <expr><name>w</name></expr> by <expr><name><name>w</name><index>[<expr>0</expr>]</index></name> into <name>fruitGroup</name></expr></group>
            <where>where <expr><call><name><name>fruitGroup</name>.<name>Count</name></name><argument_list>()</argument_list></call> &gt;= 2</expr></where>
            <select>select <expr>new <block>{ <expr><name>FirstLetter</name> = <name>fruitGroup</name>.<name>Key</name></expr>, <expr><name>Words</name> = <name>fruitGroup</name>.<name>Count</name><argument_list>()</argument_list></expr> }</block></expr></select></linq></expr></init></decl>;</decl_stmt>
</unit>

<unit>
<decl_stmt><decl><type><name>Query</name></type> <name>query</name> =<init>
    <expr><linq><from>from <expr><name>category</name> in <name>categories</name></expr></from>
    <join>join <expr><name>prod</name></expr> in <expr><name>products</name></expr> on <expr><name><name>category</name>.<name>ID</name></name></expr> equals <expr><name><name>prod</name>.<name>CategoryID</name></name></expr></join>
    <select>select <expr>new <block>{ <expr><name>ProductName</name> = <name>prod</name>.<name>Name</name></expr>, <expr><name>Category</name> = <name>category</name>.<name>Name</name></expr> }</block></expr></select></linq></expr></init></decl>;</decl_stmt> <comment type="line">//produces flat sequence</comment>
</unit>

<unit>
<decl_stmt><decl><type><name>Query</name></type> <name>query</name> =<init>
            <expr><linq><from>from <expr><name>sentence</name> in <name>strings</name></expr></from>
            <let>let <expr><name>words</name> = <call><name><name>sentence</name>.<name>Split</name></name><argument_list>(<argument><expr>''</expr></argument>)</argument_list></call></expr></let>
            <from>from <expr><name>word</name> in <name>words</name></expr></from>
            <let>let <expr><name>w</name> = <call><name><name>word</name>.<name>ToLower</name></name><argument_list>()</argument_list></call></expr></let>
            <where>where <expr><name><name>w</name><index>[<expr>0</expr>]</index></name> == 'a' || <name><name>w</name><index>[<expr>0</expr>]</index></name> == 'e'
                || <name><name>w</name><index>[<expr>0</expr>]</index></name> == 'i' || <name><name>w</name><index>[<expr>0</expr>]</index></name> == 'o'
                || <name><name>w</name><index>[<expr>0</expr>]</index></name> == 'u'</expr></where>
            <select>select <expr><name>word</name></expr></select></linq></expr></init></decl>;</decl_stmt>
</unit>

<unit>
<decl_stmt><decl><type><name>var</name></type> <name>from</name></decl>;</decl_stmt>
</unit>

<unit>
<decl_stmt><decl><type><name>var</name></type> <name>orderby</name></decl>;</decl_stmt>
</unit>

<unit>
<decl_stmt><decl><type><name>var</name></type> <name>group</name></decl>;</decl_stmt>
</unit>

<unit>
<decl_stmt><decl><type><name>var</name></type> <name>by</name></decl>;</decl_stmt>
</unit>

<unit>
<decl_stmt><decl><type><name>var</name></type> <name>into</name></decl>;</decl_stmt>
</unit>

<unit>
<decl_stmt><decl><type><name>var</name></type> <name>where</name></decl>;</decl_stmt>
</unit>

<unit>
<decl_stmt><decl><type><name>var</name></type> <name>join</name></decl>;</decl_stmt>
</unit>

<unit>
<decl_stmt><decl><type><name>var</name></type> <name>on</name></decl>;</decl_stmt>
</unit>

<unit>
<decl_stmt><decl><type><name>var</name></type> <name>equals</name></decl>;</decl_stmt>
</unit>

<unit>
<decl_stmt><decl><type><name>var</name></type> <name>let</name></decl>;</decl_stmt>
</unit>

</unit>
