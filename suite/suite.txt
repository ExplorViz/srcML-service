LANGUAGE_ALL_BASE comment
LANGUAGE_ALL_BASE string
LANGUAGE_ALL_BASE variable_names
LANGUAGE_ALL_BASE expression
LANGUAGE_ALL_BASE decl_simple
LANGUAGE_ALL_BASE if
LANGUAGE_ALL_BASE for
LANGUAGE_ALL_BASE do
LANGUAGE_ALL_BASE switch
LANGUAGE_ALL_BASE call
LANGUAGE_ALL_BASE function
LANGUAGE_ALL_BASE enum
LANGUAGE_ALL_BASE return_base
LANGUAGE_ALL_BASE problem

LANGUAGE_ALL_GEN while
LANGUAGE_ALL_GEN ifnestcond 
LANGUAGE_ALL_GEN return 
LANGUAGE_ALL_GEN function_decl 
LANGUAGE_ALL_GEN ifblock 

LANGUAGE_CXX_FAMILY throw
LANGUAGE_CXX_FAMILY constructor_explicit 
LANGUAGE_CXX_FAMILY destructor_virtual
LANGUAGE_CXX_FAMILY function_const
LANGUAGE_CXX_FAMILY struct
LANGUAGE_CXX_FAMILY union

LANGUAGE_C_FAMILY asm
LANGUAGE_C_FAMILY macro
LANGUAGE_C_FAMILY cstruct
LANGUAGE_C_FAMILY extern
LANGUAGE_C_FAMILY main
LANGUAGE_C_FAMILY function_pointer
LANGUAGE_C_FAMILY decl_struct
LANGUAGE_C_FAMILY typedef
LANGUAGE_C_FAMILY decl_pointer
LANGUAGE_C_FAMILY function_asterisk

LANGUAGE_CXX friend
LANGUAGE_CXX namespace
LANGUAGE_CXX template
LANGUAGE_CXX typedef_template
LANGUAGE_CXX constructor
LANGUAGE_CXX destructor
LANGUAGE_CXX throw_base
LANGUAGE_CXX function_throw
LANGUAGE_CXX class
LANGUAGE_CXX function_operator
LANGUAGE_CXX typedef_ns
LANGUAGE_CXX variable_names_ns
LANGUAGE_CXX function_ns
LANGUAGE_CXX decl_ns
LANGUAGE_CXX try
LANGUAGE_CXX typedef_struct

LANGUAGE_CS friend
LANGUAGE_CS namespace
LANGUAGE_CS template
LANGUAGE_CS typedef_template
LANGUAGE_CS constructor
LANGUAGE_CS destructor
LANGUAGE_CS throw_base
LANGUAGE_CS function_throw
LANGUAGE_CS class
LANGUAGE_CS function_operator
LANGUAGE_CS typedef_ns
LANGUAGE_CS variable_names_ns
LANGUAGE_CS function_ns
LANGUAGE_CS decl_ns
LANGUAGE_CS try
LANGUAGE_CS typedef_struct

LANGUAGE_JAVA class_java
LANGUAGE_JAVA constructor_java
LANGUAGE_JAVA keyword_java
LANGUAGE_JAVA interface_java
LANGUAGE_JAVA package_java
LANGUAGE_JAVA finally_java
LANGUAGE_JAVA generics_java

LANGUAGE_OO catch_form
LANGUAGE_OO foreach
LANGUAGE_OO try
