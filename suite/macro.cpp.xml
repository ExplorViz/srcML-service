<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" dir="macro">

<unit>
<macro><name>D</name><argument_list>( <argument>if (a) b;</argument>)</argument_list></macro>
</unit>

<!--
<unit>
<macro><name>D</name><argument_list>(<argument> <if>if <condition>(<expr><name>a</name></expr>)</condition> <then><expr_stmt><expr><name>b</name></expr>;</expr_stmt></then></if></argument>)</argument_list></macro>
</unit>
-->

<unit>
<macro><name>D</name><argument_list>(<argument>int i = 0;</argument>)</argument_list></macro>
</unit>

<!--
<unit>
<macro><name>D</name><argument_list>(<argument><decl_stmt><type>int</type> <name>i</name>=<init><expr>0</expr></init>;</decl_stmt></argument>)</argument_list></macro>
</unit>
-->

<unit>
<macro><name>D</name><argument_list>(<argument>{ int i = 0;}</argument>)</argument_list></macro>
</unit>

<!--
<unit>
<macro><name>D</name><argument_list>(<argument><block>{ <decl_stmt><type>int</type> <name>i</name>=<init><expr>0</expr></init>;</decl_stmt> }</block></argument>)</argument_list></macro>
</unit>
-->

<unit>
<macro><name>D</name><argument_list>(<argument>if (a) b</argument>)</argument_list></macro>
</unit>

<unit>
<macro><name>D</name><argument_list>(<argument>(if (a) b)</argument>)</argument_list></macro>
</unit>

<unit>
<macro><name>D</name><argument_list>(<argument>a</argument>, <argument>if (a) b</argument>)</argument_list></macro>
</unit>

<unit>
<macro><name>D</name><argument_list>(<argument>a</argument>, <argument>(if (a) b)</argument>)</argument_list></macro>
</unit>

<unit>
<macro><name>D</name><argument_list>(<argument>int i = 0</argument>)</argument_list></macro>
</unit>

<unit>
<macro><name>D</name><argument_list>(<argument>(int i = 0)</argument>)</argument_list></macro>
</unit>

<unit>
<macro><name>D</name><argument_list>(<argument>a</argument>, <argument>int i = 0</argument>)</argument_list></macro>
</unit>

<unit>
<macro><name>D</name><argument_list>(<argument>int i = 0</argument>, <argument>a</argument>)</argument_list></macro>
</unit>

<unit>
<macro><name>D</name><argument_list>(<argument>a</argument>, <argument>(int i = 0)</argument>)</argument_list></macro>
</unit>

<unit>
<macro><name>D</name><argument_list>(<argument>(int i = 0)</argument>, <argument>a</argument>)</argument_list></macro>
</unit>

<unit>
<block>{<macro><name>D</name><argument_list>(<argument>a</argument>)</argument_list></macro>}</block>
</unit>

<unit>
<macro><name>D</name><argument_list>(<argument>a</argument>)</argument_list></macro><if>if;</if>
</unit>

<unit>
<macro><name>D</name><argument_list>(<argument>a</argument>)</argument_list></macro><block>{}</block>
</unit>

<unit>
<macro><name>A</name><argument_list>(<argument>1</argument>)</argument_list></macro> <function><type><name>void</name></type> <name>f</name><parameter_list>()</parameter_list> <block>{}</block></function>
</unit>

<unit>
<expr_stmt><expr>.<name>macro</name> <name>a</name>
<cpp:error># <cpp:directive>comment</cpp:directive></cpp:error>
<cpp:error>#<cpp:directive/></cpp:error>
.<name>endm</name></expr></expr_stmt>
</unit>

<unit>
<function><type><name>static</name> <name>void</name></type>
<name>lto_read_decls</name> <parameter_list>(<param><decl><macro><name>VEC</name><argument_list>(<argument>ld_plugin_symbol_resolution_t</argument>,<argument>heap</argument>)</argument_list></macro> *<name>resolutions</name></decl></param>)</parameter_list>
<block>{}</block></function>
</unit>

<unit>
<macro><name>M</name><argument_list>(<argument>A</argument>)</argument_list></macro> <if>if
</if></unit>

<unit>
<macro><name>M</name><argument_list>(<argument>A</argument>)</argument_list></macro> <while>while
</while></unit>

<unit>
<macro><name>M</name><argument_list>(<argument>A</argument>)</argument_list></macro> <for>for
</for></unit>

</unit>
