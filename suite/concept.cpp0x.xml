<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++0x" dir="concept">

<unit>
<concept>concept <name>InputIterator</name><parameter_list>&lt;<param><type><name>typename</name></type> <name>Iter</name></param>&gt;</parameter_list>
<block>{
  <decl_stmt><decl><type><name>typename</name></type> <name>value_type</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>typename</name></type> <name>reference</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>typename</name></type> <name>pointer</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>typename</name></type> <name>difference_type</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>requires</name></type> <name><name>Regular</name><argument_list>&lt;<argument><name>Iter</name></argument>&gt;</argument_list></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>requires</name></type> <name><name>Convertible</name><argument_list>&lt;<argument><name>reference</name></argument>, <argument><name>value_type</name></argument>&gt;</argument_list></name></decl>;</decl_stmt>
  <function_decl><type><name>reference</name></type> <name>operator*</name><parameter_list>(<param><decl><type><name>const</name> <name>Iter</name>&amp;</type></decl></param>)</parameter_list>;</function_decl> <comment type="line">// dereference</comment>
  <function_decl><type><name>Iter</name>&amp;</type> <name>operator++</name><parameter_list>(<param><decl><type><name>Iter</name>&amp;</type></decl></param>)</parameter_list>;</function_decl> <comment type="line">// pre-increment</comment>
  <function_decl><type><name>Iter</name></type> <name>operator++</name><parameter_list>(<param><decl><type><name>Iter</name>&amp;</type></decl></param>, <param><decl><type><name>int</name></type></decl></param>)</parameter_list>;</function_decl> <comment type="line">// post-increment</comment>
  <comment type="line">// ...</comment>
}</block></concept>
</unit>

<unit>
<concept><name>auto</name> concept <name>InputIterator</name><parameter_list>&lt;<param><type><name>typename</name></type> <name>Iter</name></param>&gt;</parameter_list>
<block>{
  <decl_stmt><decl><type><name>typename</name></type> <name>value_type</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>typename</name></type> <name>reference</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>typename</name></type> <name>pointer</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>typename</name></type> <name>difference_type</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>requires</name></type> <name><name>Regular</name><argument_list>&lt;<argument><name>Iter</name></argument>&gt;</argument_list></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>requires</name></type> <name><name>Convertible</name><argument_list>&lt;<argument><name>reference</name></argument>, <argument><name>value_type</name></argument>&gt;</argument_list></name></decl>;</decl_stmt>
  <function_decl><type><name>reference</name></type> <name>operator*</name><parameter_list>(<param><decl><type><name>const</name> <name>Iter</name>&amp;</type></decl></param>)</parameter_list>;</function_decl> <comment type="line">// dereference</comment>
  <function_decl><type><name>Iter</name>&amp;</type> <name>operator++</name><parameter_list>(<param><decl><type><name>Iter</name>&amp;</type></decl></param>)</parameter_list>;</function_decl> <comment type="line">// pre-increment</comment>
  <function_decl><type><name>Iter</name></type> <name>operator++</name><parameter_list>(<param><decl><type><name>Iter</name>&amp;</type></decl></param>, <param><decl><type><name>int</name></type></decl></param>)</parameter_list>;</function_decl> <comment type="line">// post-increment</comment>
  <comment type="line">// ...</comment>
}</block></concept>
</unit>

</unit>
